"""Weekly growth digest sender."""
from __future__ import annotations

from datetime import timedelta

from aiogram import Bot

from app.config import settings
from growth.bonuses import get_digest_snapshot as bonuses_snapshot
from growth.referrals import get_digest_snapshot as referrals_snapshot

_WINDOW = timedelta(days=7)


async def send_growth_digest(bot: Bot) -> None:
    """Compile and deliver the weekly growth digest."""

    stats_ref = referrals_snapshot(window=_WINDOW)
    stats_bonus = bonuses_snapshot(window=_WINDOW)
    viral_k = stats_ref.get("viral_k", 0.0)
    top_channels = sorted(
        stats_ref.get("channels", {}).items(), key=lambda item: item[1], reverse=True
    )
    bonus_channels = sorted(
        stats_bonus.get("channels", {}).items(), key=lambda item: item[1], reverse=True
    )

    lines = [
        "üå± <b>Growth digest</b>",
        "",
        f"–í–∏—Ä–∞–ª—å–Ω–æ—Å—Ç—å K: <b>{viral_k:.2f}</b>",
        f"–ö–ª–∏–∫–∏: {stats_ref['clicks']} / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {stats_ref['joins']} / –ö–æ–Ω–≤–µ—Ä—Å–∏–∏: {stats_ref['conversions']}",
        "",
        "–¢–æ–ø –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –ª–∏–¥–∞–º:",
    ]
    if top_channels:
        for name, count in top_channels[:5]:
            lines.append(f" ‚Ä¢ {name}: {count}")
    else:
        lines.append(" ‚Ä¢ –¥–∞–Ω–Ω—ã—Ö –µ—â—ë –Ω–µ—Ç")

    lines.append("")
    lines.append("–ë–æ–Ω—É—Å—ã –∑–∞ –Ω–µ–¥–µ–ª—é:")
    lines.append(
        f" ‚Ä¢ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–π: {stats_bonus['awards']} | –æ—á–∫–æ–≤: {stats_bonus['points']} | –∫–∞–Ω–∞–ª–æ–≤: {len(stats_bonus['channels'])}"
    )
    if bonus_channels:
        lines.append(" ‚Ä¢ —Ç–æ–ø –ø–æ –∫–æ–Ω–≤–µ—Ä—Å–∏—è–º:")
        for name, count in bonus_channels[:3]:
            lines.append(f"    - {name}: {count}")

    text = "\n".join(lines)
    try:
        await bot.send_message(settings.ADMIN_ID, text)
    except Exception:  # pragma: no cover - avoid breaking scheduler on network errors
        pass
