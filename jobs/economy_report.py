"""Scheduler job that posts a daily turnover digest to the admin chat."""
from __future__ import annotations

import datetime as dt
from zoneinfo import ZoneInfo

from aiogram import Bot

from app.config import settings
from economy import service


def _top_wallets(limit: int = 5) -> str:
    wallets = sorted(service.list_wallets(), key=lambda w: w.balance, reverse=True)
    if not wallets:
        return "–Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ—à–µ–ª—å–∫–æ–≤"

    lines = []
    for idx, wallet in enumerate(wallets[:limit], start=1):
        lines.append(
            f"{idx}. <code>{wallet.user_id}</code> ‚Äî {wallet.balance} —Ç–æ–∫–µ–Ω–æ–≤ (—É—Ä–æ–≤–µ–Ω—å {wallet.level})"
        )
    return "\n".join(lines)


async def send_daily_economy_report(bot: Bot, *, day: dt.date | None = None) -> None:
    if not settings.ENABLE_GLOBAL_ECONOMY:
        return

    tz = ZoneInfo(settings.TZ)
    summary = service.get_turnover_summary(day, tz=tz)
    metrics = service.get_metrics()

    text = (
        "üìà <b>–≠–∫–æ–Ω–æ–º–∏–∫–∞ –∑–∞ –¥–µ–Ω—å</b>\n"
        f"–î–∞—Ç–∞: {summary['day']}\n"
        f"–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>{summary['earned']}</b>\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: <b>{summary['spent']}</b>\n"
        f"–ü–µ—Ä–µ–≤–æ–¥—ã: <b>{summary['transfers']}</b>\n"
        f"–ß–∏—Å—Ç—ã–π –∏—Ç–æ–≥: <b>{summary['net']}</b>\n\n"
        "‚ÑπÔ∏è –ö—É–º—É–ª—è—Ç–∏–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n"
        f"‚Ä¢ tokens_earned: {metrics.get('tokens_earned', 0)}\n"
        f"‚Ä¢ tokens_spent: {metrics.get('tokens_spent', 0)}\n\n"
        "üèÜ –¢–æ–ø –∫–æ—à–µ–ª—å–∫–æ–≤:\n"
        f"{_top_wallets()}"
    )

    try:
        await bot.send_message(settings.ADMIN_ID, text)
    except Exception as exc:
        print(f"[economy] failed to send report: {exc}")
