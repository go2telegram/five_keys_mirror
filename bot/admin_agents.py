"""Administrative tooling for the multi-agent collaboration module."""

from __future__ import annotations

import asyncio
import html
from datetime import datetime
from typing import Optional

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from agents.runtime import get_network, is_enabled

router = Router()


def _format_ts(timestamp: Optional[float]) -> str:
    if not timestamp:
        return "‚Äî"
    return datetime.fromtimestamp(timestamp).strftime("%H:%M:%S")


def _escape(text: Optional[str]) -> str:
    return html.escape(text or "")


@router.message(Command("agents"))
async def agents_admin(m: Message) -> None:
    if m.from_user.id != settings.ADMIN_ID:
        return

    if not is_enabled():
        await m.answer("–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω—ã–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ ENABLE_MULTI_AGENT=true –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞.")
        return

    network = get_network()
    if network is None:
        await m.answer("–°–µ—Ç—å –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    text = m.text or ""
    payload = text.split(maxsplit=1)
    if len(payload) == 1:
        await _send_status(m, network)
        return

    rest = payload[1].strip()
    if not rest or rest.lower() == "status":
        await _send_status(m, network)
        return

    if rest.lower() in {"help", "-h", "--help"}:
        await _send_help(m)
        return

    command_word, _, remainder = rest.partition(" ")
    command_word = command_word.lower()

    if command_word == "broadcast":
        query = remainder.strip()
        if not query:
            await m.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /agents broadcast <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏>")
            return
        if (query.startswith('"') and query.endswith('"')) or (query.startswith("'") and query.endswith("'")):
            query = query[1:-1]
        await _handle_broadcast(m, network, query)
        return

    await m.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–¥–∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π /agents help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")


async def _handle_broadcast(message: Message, network, query: str) -> None:
    note = await message.answer(f"üì° –†–∞—Å—Å—ã–ª–∞—é –∑–∞–¥–∞—á—É: <b>{_escape(query)}</b>")
    task_id: Optional[str] = None
    try:
        task_id, consensus = await network.dispatch_task(query, context={"title": query, "prompt": query})
    except asyncio.TimeoutError:
        await message.answer("‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞.")
        return
    except RuntimeError as exc:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å: {exc}")
        return
    finally:
        try:
            if task_id:
                await note.edit_text(f"üì° –ó–∞–¥–∞—á–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: <code>{task_id[:8]}</code>")
            else:
                await note.delete()
        except Exception:
            pass

    record = network.get_task(task_id)
    responses_block = ""
    if record and record.responses:
        lines = [f"‚Ä¢ <b>{_escape(agent)}</b>: {_escape(resp)}" for agent, resp in sorted(record.responses.items())]
        responses_block = "\n" + "\n".join(lines)

    consensus_text = _escape(consensus)
    await message.answer(
        "‚úÖ –ö–æ–Ω—Å–µ–Ω—Å—É—Å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç\n"
        f"<b>–ó–∞–¥–∞—á–∞:</b> <code>{task_id[:8]}</code>\n"
        f"<pre>{consensus_text}</pre>"
        f"{responses_block}"
    )


async def _send_status(message: Message, network) -> None:
    peers = network.peers_snapshot()
    tasks = network.list_tasks(limit=5)

    lines = ["ü§ñ <b>–°–æ—Å–µ–¥–∏</b>:"]
    if not peers:
        lines.append("‚Ä¢ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    else:
        for peer in peers:
            icon = "üü¢" if peer["healthy"] else "üî¥"
            line = f"{icon} <b>{_escape(peer['id'])}</b> ‚Üí {_escape(peer['endpoint'])}"
            if peer["last_seen"]:
                line += f" (–ø–æ—Å–ª. {_format_ts(peer['last_seen'])})"
            if peer["last_error"]:
                line += f" ‚Äî <i>{_escape(peer['last_error'])}</i>"
            lines.append(line)

    lines.append("\nüóÇ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏</b>:")
    if not tasks:
        lines.append("‚Ä¢ –ø–æ–∫–∞ –Ω–µ—Ç")
    else:
        for record in tasks:
            icon = "‚úÖ" if record.status == "consensus" else "‚è≥"
            preview = record.result or record.task
            preview = preview.replace("\n", " ")
            if len(preview) > 90:
                preview = preview[:87] + "‚Ä¶"
            lines.append(f"{icon} <code>{record.task_id[:8]}</code> ‚Äî {_escape(preview)}")

    lines.append("\n/agents broadcast <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Å–µ–º —Å–æ—Å–µ–¥—è–º")
    await message.answer("\n".join(lines))


async def _send_help(message: Message) -> None:
    await message.answer(
        "–°–ø—Ä–∞–≤–∫–∞ –ø–æ /agents:\n"
        "‚Ä¢ /agents ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å–µ–¥–µ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏\n"
        "‚Ä¢ /agents broadcast <—Ç–µ–∫—Å—Ç> ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤—Å–µ–º –±–æ—Ç–∞–º –∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞"
    )
