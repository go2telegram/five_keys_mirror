"""–ê–¥–º–∏–Ω—Å–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –º–µ–∂—Å–µ—Ç–µ–≤–æ–π –¥–∏–ø–ª–æ–º–∞—Ç–∏–∏."""
from __future__ import annotations

from typing import Dict

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from diplomacy.handshake import DiplomacyHandshake, DiplomacyError, StrategyReport


router = Router()


STRATEGY_TITLES: Dict[str, str] = {
    "knowledge_exchange": "–û–±–º–µ–Ω –∑–Ω–∞–Ω–∏—è–º–∏",
    "trade_agreement": "–¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã",
    "alert_sharing": "–û–±–º–µ–Ω –∞–ª–µ—Ä—Ç–∞–º–∏",
}


@router.message(Command("diplomacy_status"))
async def diplomacy_status(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–º–µ–Ω–æ–≤ –º–µ–∂–¥—É —Å–µ—Ç—è–º–∏."""
    if message.from_user.id != settings.ADMIN_ID:
        return

    if not settings.ENABLE_INTER_NETWORK_DIPLOMACY:
        await message.answer(
            "‚ö†Ô∏è –ò–Ω—Ç–µ—Ä—Å–µ—Ç–µ–≤–∞—è –¥–∏–ø–ª–æ–º–∞—Ç–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ "
            "ENABLE_INTER_NETWORK_DIPLOMACY=true, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±–º–µ–Ω—ã."
        )
        return

    handshake = DiplomacyHandshake()
    try:
        report = handshake.perform_handshake()
    except DiplomacyError as exc:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–ø–æ–∂–∞—Ç–∏–µ.\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {exc}"
        )
        return

    lines = [
        "ü§ù <b>–ò–Ω—Ç–µ—Ä—Å–µ—Ç–µ–≤–∞—è –¥–∏–ø–ª–æ–º–∞—Ç–∏—è</b>",
        f"–°–≤—è–∑—å: {report.context.get('primary_title')} ‚Üî {report.context.get('counterpart_title')}",
        f"–û—Ç—á—ë—Ç: {report.timestamp}",
        "",
    ]

    status_word = "—É—Å–ø–µ—à–Ω–æ" if report.concluded else "—Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
    lines.append(f"–ò—Ç–æ–≥: {status_word}.")

    for strategy in report.strategies:
        lines.extend(_render_strategy(strategy))

    await message.answer("\n".join(lines))


def _render_strategy(strategy: StrategyReport) -> list[str]:
    title = STRATEGY_TITLES.get(strategy.name, strategy.name)
    emoji = {
        "ok": "‚úÖ",
        "skipped": "‚è≠Ô∏è",
        "deferred": "‚è≥",
    }.get(strategy.status, "‚ÑπÔ∏è")

    block = [
        "",
        f"{emoji} <b>{title}</b>",
        strategy.summary,
    ]

    if strategy.name == "knowledge_exchange":
        shared = strategy.payload.get("shared_topics", [])
        new_primary = strategy.payload.get("new_for_primary", [])
        new_counter = strategy.payload.get("new_for_counterpart", [])
        if shared:
            block.append("–û–±—â–∏–π –ø—É–ª: " + ", ".join(shared[:5]))
            if len(shared) > 5:
                block.append(f"‚Ä¶–∏ –µ—â—ë {len(shared) - 5} —Ç–µ–º")
        block.append(
            "–ü–µ—Ä–µ–¥–∞–Ω–æ —è–¥—Ä—É: " + (", ".join(new_primary) if new_primary else "‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
        )
        block.append(
            "–ü–µ—Ä–µ–¥–∞–Ω–æ –ø–∞—Ä—Ç–Ω—ë—Ä—É: "
            + (", ".join(new_counter) if new_counter else "‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ—Ç")
        )

    if strategy.name == "trade_agreement":
        outbound = strategy.payload.get("outbound_contracts", [])
        inbound = strategy.payload.get("inbound_contracts", [])
        balance = strategy.payload.get("balance", 0)
        if outbound:
            goods = ", ".join(f"{item['good']} ({item['volume']})" for item in outbound)
            block.append(f"–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º: {goods}")
        if inbound:
            goods = ", ".join(f"{item['good']} ({item['volume']})" for item in inbound)
            block.append(f"–ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º: {goods}")
        block.append(f"–ë–∞–ª–∞–Ω—Å –æ–±–º–µ–Ω–∞: {'+' if balance >= 0 else ''}{balance}")

    if strategy.name == "alert_sharing":
        forwarded = strategy.payload.get("forwarded", [])
        received = strategy.payload.get("received", [])
        if forwarded:
            block.append("–ù–∞—à–∏ –∞–ª–µ—Ä—Ç—ã: " + "; ".join(forwarded))
        if received:
            block.append("–ê–ª–µ—Ä—Ç—ã –ø–∞—Ä—Ç–Ω—ë—Ä–∞: " + "; ".join(received))

    return block


__all__ = ["router", "diplomacy_status"]
