"""Router that selects a handler based on the detected user intent."""
from __future__ import annotations

from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app.config import settings
from app.handlers import lead as lead_handler
from app.handlers import report as report_handler
from app.keyboards import kb_goal_menu, kb_main
from app.storage import SESSIONS
from nlp.intents import Intent, IntentClassifier, IntentStatistics

router = Router(name="intent_router")
_classifier = IntentClassifier()
_stats = IntentStatistics()


@router.message(Command("intents"))
async def intents_admin(m: Message) -> None:
    """Show the current intent distribution to the admin."""
    if m.from_user.id != settings.ADMIN_ID:
        return

    if not settings.ENABLE_INTENT_UNDERSTANDING:
        await m.answer("Intent-–º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á—ë–Ω (ENABLE_INTENT_UNDERSTANDING=false).")
        return

    total = _stats.total()
    if not total:
        await m.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∏–Ω—Ç–µ–Ω—Ç–∞–º.")
        return

    lines = ["üìä Intent-—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ", f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total}"]
    for intent, count in _stats.most_common():
        percent = count / total * 100 if total else 0
        lines.append(f"‚Ä¢ {intent.value}: {count} ({percent:.1f}%)")
    await m.answer("\n".join(lines))


@router.message(StateFilter(None), F.text)
async def route_by_intent(m: Message, state: FSMContext) -> None:
    """Classify the incoming message and trigger the matching flow."""
    if not settings.ENABLE_INTENT_UNDERSTANDING:
        return

    user = m.from_user
    if user and SESSIONS.was_recently_active(user.id):
        # Another router has just processed the message (e.g. calculator
        # flows that rely on SESSIONS). Avoid sending a duplicate reply.
        return

    text = m.text or ""
    if not text.strip():
        return
    if text.startswith("/"):
        # –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        return

    prediction = _classifier.classify(text)
    intent = prediction.intent
    if intent == Intent.ADMIN and m.from_user.id != settings.ADMIN_ID:
        intent = Intent.LEARN

    _stats.add(intent)

    if intent == Intent.SUPPORT:
        await lead_handler.lead_cmd(m, state)
        return

    if intent == Intent.BUY:
        await m.answer(
            "–ü–æ–¥–±–µ—Ä—É –ø—Ä–æ–¥—É–∫—Ç—ã –ø–æ–¥ —Ç–≤–æ—é –∑–∞–¥–∞—á—É. –í—ã–±–µ—Ä–∏ —Ü–µ–ª—å:",
            reply_markup=kb_goal_menu(),
        )
        return

    if intent == Intent.REPORT:
        await report_handler.pdf_cmd(m)
        return

    if intent == Intent.ADMIN:
        total = _stats.total()
        lines = [
            "üìà Intent-–¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
            f"–í—Å–µ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–π: {total}",
        ]
        for det_intent, count in _stats.most_common():
            percent = count / total * 100 if total else 0
            lines.append(f"‚Ä¢ {det_intent.value}: {count} ({percent:.1f}%)")
        await m.answer("\n".join(lines))
        return

    # default ‚Üí Intent.LEARN
    await m.answer(
        "–í–æ—Ç —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:\n"
        "‚Ä¢ üß≠ –ù–∞–≤–∏–≥–∞—Ç–æ—Ä ‚Äî –ø–æ–¥–±–æ—Ä –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤\n"
        "‚Ä¢ üóÇ –ö–≤–∏–∑—ã ‚Äî –æ—Ü–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ\n"
        "‚Ä¢ üìê –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ‚Äî —Ä–∞—Å—á—ë—Ç—ã\n"
        "‚Ä¢ üìù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî –µ—Å–ª–∏ –Ω—É–∂–µ–Ω —ç–∫—Å–ø–µ—Ä—Ç\n"
        "–í—ã–±–∏—Ä–∞–π —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:",
        reply_markup=kb_main(),
    )
