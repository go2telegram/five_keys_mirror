"""Handlers that expose the internal economy to Telegram users."""
from __future__ import annotations

import datetime as dt

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from app.storage import save_event
from economy import service
from economy.models import Transaction

router = Router()


def _format_ts(ts: dt.datetime) -> str:
    return ts.strftime("%d.%m %H:%M")


def _format_transaction(tx: Transaction) -> str:
    icon = ""  # default fallback
    direction = ""
    if tx.kind == "earn":
        icon = "‚¨ÜÔ∏è"
        direction = "–∑–∞—á–∏—Å–ª–µ–Ω–∏–µ"
    elif tx.kind == "spend":
        icon = "‚¨áÔ∏è"
        direction = "—Å–ø–∏—Å–∞–Ω–∏–µ"
    elif tx.kind == "transfer_in":
        icon = "‚¨ÖÔ∏è"
        direction = f"–ø–µ—Ä–µ–≤–æ–¥ –æ—Ç {tx.actor_id}"
    elif tx.kind == "transfer_out":
        icon = "‚û°Ô∏è"
        direction = f"–ø–µ—Ä–µ–≤–æ–¥ {tx.counterparty_id}"
    else:
        direction = tx.kind

    note = f" ‚Äî {tx.note}" if tx.note else ""
    return f"{icon} {_format_ts(tx.ts)} ‚Ä¢ {direction}: <b>{tx.amount}</b>{note}"


@router.message(Command("wallet"))
async def show_wallet(message: Message):
    if not settings.ENABLE_GLOBAL_ECONOMY:
        await message.answer("–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    wallet = service.get_wallet(message.from_user.id)
    history = service.get_wallet_history(message.from_user.id, limit=5)

    header = (
        "üí∞ <b>–í–∞—à –∫–æ—à–µ–ª—ë–∫</b>\n"
        f"–ë–∞–ª–∞–Ω—Å: <b>{wallet.balance}</b> —Ç–æ–∫–µ–Ω–æ–≤\n"
        f"–£—Ä–æ–≤–µ–Ω—å: <b>{wallet.level}</b>\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {wallet.tokens_earned}\n"
        f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {wallet.tokens_spent}"
    )

    lines = [header]
    if history:
        lines.append("\n<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏</b>")
        lines.extend(_format_transaction(tx) for tx in history)
    else:
        lines.append("\n–û–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ –ø—Ä–æ–≤–æ–¥–∏–ª–∏—Å—å ‚Äî –∑–∞—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–µ—Ä–≤—ã–µ —Ç–æ–∫–µ–Ω—ã!")

    save_event(message.from_user.id, None, "wallet_view")
    await message.answer("\n".join(lines))


@router.message(Command("transfer"))
async def transfer_tokens(message: Message):
    if not settings.ENABLE_GLOBAL_ECONOMY:
        await message.answer("–≠–∫–æ–Ω–æ–º–∏–∫–∞ –ø–æ–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    parts = (message.text or "").split()
    if len(parts) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /transfer <user_id> <amount>")
        return

    try:
        target_id = int(parts[1])
        amount = int(parts[2])
    except ValueError:
        await message.answer("ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏. –ü—Ä–∏–º–µ—Ä: /transfer 123456789 50")
        return

    if amount <= 0:
        await message.answer("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
        return

    try:
        service.transfer_tokens(message.from_user.id, target_id, amount)
    except ValueError as exc:
        await message.answer(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥: {exc}")
        return

    wallet = service.get_wallet(message.from_user.id)
    save_event(message.from_user.id, None, "wallet_transfer", {"to": target_id, "amount": amount})

    await message.answer(
        "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>{amount}</b> —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <b>{target_id}</b>.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>{wallet.balance}</b>"
    )
