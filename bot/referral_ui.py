"""UI helpers for the referral dashboard."""
from __future__ import annotations

from dataclasses import dataclass
from typing import Iterable, Optional

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from growth.bonuses import BonusProfile
from growth.referrals import generate_referral_link

_DEFAULT_CHANNELS = ("organic", "stories", "reels", "newsletter")


@dataclass(slots=True)
class ReferralDashboard:
    text: str
    keyboard: InlineKeyboardMarkup


def _format_stats(stats: dict[str, int]) -> str:
    return (
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: <b>{stats.get('clicks', 0)}</b>\n"
        f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π: <b>{stats.get('joins', 0)}</b>\n"
        f"–ö–æ–Ω–≤–µ—Ä—Å–∏–π: <b>{stats.get('conversions', 0)}</b>"
    )


def build_dashboard(
    *,
    bot_username: str,
    user_id: int,
    stats: dict[str, int],
    bonus: BonusProfile,
    invited: int,
    channel: Optional[str] = None,
    viral_k: float = 0.0,
    channels: Iterable[str] = _DEFAULT_CHANNELS,
) -> ReferralDashboard:
    channel = channel or channels and next(iter(channels)) or "organic"
    link = generate_referral_link(bot_username, ref_code=str(user_id), channel=channel)

    text_lines = [
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>",
        link,
        "",
        _format_stats(stats),
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π: <b>{invited}</b>",
        "",
        f"–£—Ä–æ–≤–µ–Ω—å: <b>{bonus.level}</b> ‚Äî {bonus.points} pts / {bonus.lifetime_points} lifetime",
        f"–ê–Ω—Ç–∏-—Ñ—Ä–æ–¥: {'‚ö†Ô∏è' if bonus.flagged else '‚úÖ'}",
        f"Viral K (30d): <b>{viral_k:.2f}</b>",
        "",
        "–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã —Ç—Ä–µ–∫–∞—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
    ]

    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=link)
    for ch in channels:
        if ch == channel:
            continue
        kb.button(text=f"üìà {ch}", callback_data=f"ref:channel:{ch}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 2, 1)

    return ReferralDashboard(text="\n".join(text_lines), keyboard=kb.as_markup())
