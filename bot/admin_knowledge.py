from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from datetime import datetime

from app.config import settings
from knowledge.utils import get_event, list_events, upsert_event

router = Router()


def _format_timestamp(value: str) -> str:
    try:
        dt = datetime.fromisoformat(value.replace("Z", "+00:00"))
        return dt.strftime("%d.%m.%Y %H:%M UTC")
    except ValueError:
        return value


@router.message(Command("why"))
async def explain_decision(message: Message) -> None:
    if not settings.ENABLE_KNOWLEDGE_CENTER:
        await message.answer("–¶–µ–Ω—Ç—Ä –∑–Ω–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.")
        return

    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /why <event>")
        return

    event = parts[1].strip()
    entry = get_event(event)
    if not entry:
        await message.answer(
            "–ù–µ –Ω–∞—à—ë–ª —Å–æ–±—ã—Ç–∏–µ <b>{}</b>. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /why_events, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫.".format(event)
        )
        return

    actions = entry.get("actions") or []
    if actions:
        actions_text = "\n".join(f"‚Ä¢ {item}" for item in actions)
    else:
        actions_text = "‚Äî"

    updated = entry.get("timestamp") or ""
    await message.answer(
        "üìö –ü—Ä–∏—á–∏–Ω–∞ –¥–ª—è <b>{event}</b>\n"
        "{reason}\n\n"
        "üõ† –î–µ–π—Å—Ç–≤–∏—è:\n"
        "{actions}\n\n"
        "‚è± –û–±–Ω–æ–≤–ª–µ–Ω–æ: {updated}".format(
            event=entry.get("event", event),
            reason=entry.get("reason", "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞."),
            actions=actions_text,
            updated=_format_timestamp(updated) if updated else "‚Äî",
        )
    )


@router.message(Command("why_events"))
async def list_known_events(message: Message) -> None:
    if not settings.ENABLE_KNOWLEDGE_CENTER:
        await message.answer("–¶–µ–Ω—Ç—Ä –∑–Ω–∞–Ω–∏–π –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á—ë–Ω.")
        return

    events = list_events()
    if not events:
        await message.answer("–°–æ–±—ã—Ç–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    formatted = "\n".join(f"‚Ä¢ {event}" for event in events)
    await message.answer("üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n" + formatted)


@router.message(Command("setwhy"))
async def upsert_reason(message: Message) -> None:
    if message.from_user.id != settings.ADMIN_ID:
        return

    payload = message.text.split(maxsplit=1)
    if len(payload) < 2:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setwhy <event> | <reason> | <–¥–µ–π—Å—Ç–≤–∏–µ 1>; <–¥–µ–π—Å—Ç–≤–∏–µ 2>"
        )
        return

    data = [chunk.strip() for chunk in payload[1].split("|")]
    if len(data) < 2:
        await message.answer(
            "–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º –¥–≤–∞ –±–ª–æ–∫–∞: —Å–æ–±—ã—Ç–∏–µ –∏ –ø—Ä–∏—á–∏–Ω–∞. –§–æ—Ä–º–∞—Ç: /setwhy event | –ø—Ä–∏—á–∏–Ω–∞ | –¥–µ–π—Å—Ç–≤–∏–µ1; –¥–µ–π—Å—Ç–≤–∏–µ2"
        )
        return

    event = data[0]
    reason = data[1]
    actions = []
    if len(data) > 2:
        actions = [part.strip() for part in data[2].split(";") if part.strip()]

    try:
        entry = upsert_event(
            event=event,
            reason=reason,
            actions=actions,
            actor=str(message.from_user.id),
        )
    except ValueError as exc:
        await message.answer(str(exc))
        return

    await message.answer(
        "–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ <b>{event}</b>. –í—Ä–µ–º—è: {ts}".format(
            event=entry["event"],
            ts=_format_timestamp(entry.get("timestamp", "")),
        )
    )
