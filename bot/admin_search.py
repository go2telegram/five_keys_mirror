import time
from typing import Sequence

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from app.storage import save_event
from knowledge.search import SearchResult, get_search_service

router = Router()


def _format_results(results: Sequence[SearchResult]) -> str:
    lines: list[str] = []
    for idx, item in enumerate(results, 1):
        score_pct = max(0.0, min(1.0, item.score)) * 100
        lines.append(
            f"{idx}. <b>{item.title}</b> ‚Äî {item.snippet}\n"
            f"<code>{item.path}</code> ¬∑ {item.source} ¬∑ {score_pct:.0f}%"
        )
    return "\n\n".join(lines)


@router.message(Command("search"))
async def admin_search(message: Message) -> None:
    if message.from_user.id != settings.ADMIN_ID:
        return
    if not settings.ENABLE_SEMANTIC_SEARCH:
        await message.answer("üîå –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –æ—Ç–∫–ª—é—á—ë–Ω. –í–∫–ª—é—á–∏—Ç–µ ENABLE_SEMANTIC_SEARCH.")
        return

    text = message.text or ""
    query = text.split(maxsplit=1)
    if len(query) < 2 or not query[1].strip():
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /search <–∑–∞–ø—Ä–æ—Å>")
        return

    payload = query[1].strip()
    service = await get_search_service()

    if payload.lower() in {"–ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞", "rebuild"}:
        await service.rebuild()
        await message.answer("üîÑ –ò–Ω–¥–µ–∫—Å –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω.")
        return

    started = time.perf_counter()
    results = await service.search(payload)
    elapsed_ms = (time.perf_counter() - started) * 1000

    save_event(
        user_id=message.from_user.id,
        source="admin",
        action="semantic_search",
        payload={
            "query": payload,
            "results": [r.path for r in results],
            "latency_ms": round(elapsed_ms, 2),
        },
    )

    if not results:
        await message.answer(f"–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. ‚è± {elapsed_ms:.0f} –º—Å")
        return

    header = f"üîé –ù–∞—à–ª–æ—Å—å {len(results)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç(–æ–≤). ‚è± {elapsed_ms:.0f} –º—Å"
    await message.answer(f"{header}\n\n{_format_results(results)}")
