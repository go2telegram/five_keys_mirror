from __future__ import annotations

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from app.experiments.runtime import get_active_experiments, get_experiment_status

router = Router()


@router.message(Command("experiments"))
async def experiments_dashboard(message: Message):
    if message.from_user.id != settings.ADMIN_ID:
        return

    if not getattr(settings, "EXPERIMENTS_ENABLED", True):
        await message.answer("–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –≤—ã–∫–ª—é—á–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
        return

    active = get_active_experiments()
    if not active:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö A/B —Ç–µ—Å—Ç–æ–≤ –Ω–µ—Ç.")
        return

    chunks: list[str] = ["üìä –ê–∫—Ç–∏–≤–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã:"]
    for experiment in active:
        status = get_experiment_status(experiment)
        chunks.append(
            f"‚Ä¢ {experiment.name} ({experiment.key}) ‚Äî –º–µ—Ç—Ä–∏–∫–∞ {experiment.metric}"
        )
        for stat in status["stats"]:
            variant = stat["variant"]
            rate_percent = stat["rate"] * 100
            chunks.append(
                "  {code}: {assignments} —é–∑–µ—Ä–æ–≤ / {conversions} —É—Å–ø–µ—Ö–æ–≤"
                " ({rate:.1f}%)".format(
                    code=variant.code,
                    assignments=stat["assignments"],
                    conversions=stat["conversions"],
                    rate=rate_percent,
                )
            )
    await message.answer("\n".join(chunks))
