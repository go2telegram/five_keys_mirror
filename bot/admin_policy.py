"""Admin utilities for inspecting and steering the meta-policy AI."""
from __future__ import annotations

from typing import Dict

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from app.config import settings
from policy import get_policy_engine

router = Router()
_engine = get_policy_engine()
_engine.set_enabled(settings.ENABLE_META_POLICY_AI)


def _format_policy_status(status: Dict[str, object]) -> str:
    header = ["ü§ñ <b>Meta policy AI</b>"]
    header.append("–°—Ç–∞—Ç—É—Å: –≤–∫–ª—é—á—ë–Ω ‚úÖ" if status.get("enabled") else "–°—Ç–∞—Ç—É—Å: –≤—ã–∫–ª—é—á–µ–Ω ‚õî")

    metrics = status.get("metrics") or {}
    if metrics:
        metrics_lines = ["<b>–ú–µ—Ç—Ä–∏–∫–∏</b>"]
        for key, value in metrics.items():
            metrics_lines.append(f"‚Ä¢ {key}: {value}")
        header.append("\n".join(metrics_lines))

    policies = status.get("policies") or []
    if policies:
        policy_lines = ["<b>–¢–µ–∫—É—â–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏</b>"]
        for idx, policy in enumerate(policies, 1):
            policy_lines.append(
                "{idx}. {title} ‚Äî {directive} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {priority}, —Å—Ç–∞—Ç—É—Å: {status})\n‚Ü≥ {rationale}".format(
                    idx=idx,
                    title=policy.get("title", "(–±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è)"),
                    directive=policy.get("directive", ""),
                    priority=policy.get("priority", ""),
                    status=policy.get("status", ""),
                    rationale=policy.get("rationale", ""),
                )
            )
        header.append("\n".join(policy_lines))
    else:
        header.append("–ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–µ—Ç ‚Äî –¥–µ–π—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º.")

    rationales = status.get("rationales") or []
    if rationales:
        header.append("<b>–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏—è</b>:\n" + "\n".join(f"‚Ä¢ {item}" for item in rationales))

    return "\n\n".join(header)


@router.message(Command("policy_status"))
async def policy_status(message: Message) -> None:
    """Show current policy status for admins."""

    if message.from_user.id != settings.ADMIN_ID:
        return

    if not settings.ENABLE_META_POLICY_AI:
        await message.answer("Meta policy AI –æ—Ç–∫–ª—é—á—ë–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ENABLE_META_POLICY_AI=true –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.")
        return

    status = _engine.get_status()
    await message.answer(_format_policy_status(status))


@router.message(Command("policy_history"))
async def policy_history(message: Message) -> None:
    """Return the latest policy history entries."""

    if message.from_user.id != settings.ADMIN_ID:
        return

    history = _engine.get_history(limit=10)
    if not history:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –µ—â—ë –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞.")
        return

    chunks = []
    for item in reversed(history):
        ts = item.get("ts", "")
        rationales = "\n".join(f"‚Ä¢ {r}" for r in item.get("rationales", []))
        policies = item.get("policies", [])
        if policies:
            policies_repr = "\n".join(
                f"  - {p.get('title','')} ({p.get('directive','')}, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {p.get('priority','')})"
                for p in policies
            )
        else:
            policies_repr = "  - (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª)"
        chunks.append(f"<b>{ts}</b>\n{policies_repr}\n{rationales}")

    await message.answer("\n\n".join(chunks))


@router.message(Command("policy_simulate"))
async def policy_simulate(message: Message) -> None:
    """Allow admins to inject metrics for simulation purposes."""

    if message.from_user.id != settings.ADMIN_ID:
        return

    if not settings.ENABLE_META_POLICY_AI:
        await message.answer("Meta policy AI –æ—Ç–∫–ª—é—á—ë–Ω, —Å–∏–º—É–ª—è—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return

    parts = message.text.split()
    metrics: Dict[str, float] = {}
    for raw in parts[1:]:
        if "=" not in raw:
            continue
        key, value = raw.split("=", 1)
        try:
            metrics[key] = float(value)
        except ValueError:
            continue

    if not metrics:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /policy_simulate error_rate=0.32 response_latency=5.5")
        return

    status = _engine.update_metrics(metrics, source="telegram-admin")
    await message.answer(
        "–ú–µ—Ç—Ä–∏–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:\n" + "\n".join(f"‚Ä¢ {k} = {v}" for k, v in metrics.items()) + "\n\n" + _format_policy_status(status)
    )
