# Nginx configuration for canary deployments of five_keys_bot.
# The split_clients directive distributes a small portion of the traffic to the
# canary upstream while the rest is served by the stable release. Adjust the
# percentage to increase or decrease canary exposure.

upstream bot_stable {
    server bot-stable:8080 max_fails=3 fail_timeout=10s;
}

upstream bot_canary {
    server bot-canary:8080 max_fails=1 fail_timeout=10s;
}

# Hash based routing keeps visitors on the same variant to preserve session
# affinity while the canary is live.
split_clients "${remote_addr}${http_user_agent}" $traffic_bucket {
    10%     "canary";
    *       "stable";
}

map $traffic_bucket $backend_upstream {
    stable  http://bot_stable;
    canary  http://bot_canary;
}

map $traffic_bucket $variant_header {
    stable  "stable";
    canary  "canary";
}

server {
    listen 80;
    server_name _;

    # Default HTTP traffic is balanced between stable and canary based on the
    # split defined above.
    location / {
        proxy_pass $backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Deployment-Variant $variant_header;
    }

    # Production webhooks continue to respect the traffic split.
    location /webhook {
        proxy_pass $backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Deployment-Variant $variant_header;
    }

    # Canary-only webhook endpoint for targeted testing (e.g. Telegram test bot).
    location /webhook-canary {
        proxy_pass http://bot_canary;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Deployment-Variant canary;
    }

    # Metrics endpoints expose both stable and canary variants so that
    # Prometheus can scrape them as separate jobs.
    location /metrics {
        proxy_pass $backend_upstream;
        proxy_set_header Host $host;
        proxy_set_header X-Deployment-Variant $variant_header;
    }

    location /metrics/stable {
        proxy_pass http://bot_stable/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Deployment-Variant stable;
    }

    location /metrics/canary {
        proxy_pass http://bot_canary/metrics;
        proxy_set_header Host $host;
        proxy_set_header X-Deployment-Variant canary;
    }
}
