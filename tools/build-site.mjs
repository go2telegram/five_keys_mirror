#!/usr/bin/env node
import { globby } from 'globby';
import fs from 'fs/promises';
import { spawn } from 'node:child_process';
import path from 'path';
import { mkdir, rm, cp, writeFile } from 'fs/promises';

const ROOT = process.cwd();
const DOCS_DIR = path.join(ROOT, 'docs');
const DIST_DIR = path.join(ROOT, 'dist');
const MENU_DIR = path.join(DIST_DIR, 'menu');

async function run(cmd, args = []) {
  return new Promise((resolve, reject) => {
    const p = spawn(cmd, args, { stdio: 'inherit', shell: true });
    p.on('close', code => (code === 0 ? resolve() : reject(new Error(`${cmd} exited ${code}`))));
  });
}

async function renderMermaidFiles() {
  const entries = await globby(['**/*.mmd'], { cwd: DOCS_DIR });
  await mkdir(MENU_DIR, { recursive: true });

  if (entries.length === 0) {
    console.log('No .mmd files found in docs/. Skipping rendering.');
    return [];
  }

  console.log(`Found ${entries.length} Mermaid files`);
  const outputs = [];
  for (const rel of entries) {
    const src = path.join(DOCS_DIR, rel);
    const base = path.basename(rel, path.extname(rel));
    const out = path.join(MENU_DIR, `${base}.svg`);

    // Render via mermaid-cli (mmdc)
    await run('npx', [
      'mmdc',
      '-i', src,
      '-o', out,
      '-b', 'transparent',
      '-t', 'neutral',
      '-C', 'none',
      '-s', '1.0'
    ]);

    outputs.push({ name: `${base}.svg`, href: `menu/${base}.svg` });
  }
  return outputs;
}

async function writeIndex(svgs) {
  await mkdir(DIST_DIR, { recursive: true });
  const items = svgs.map(s => `<li><a href="${s.href}">${s.name}</a></li>`).join('\n');
  const html = `<!doctype html>
<html lang="ru">
<head>
  <meta charset="utf-8" />
  <title>five_keys_mirror — menu</title>
  <style>
    body { font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial; padding: 2rem; line-height: 1.6; }
    h1 { margin-bottom: 1rem; }
    ul { list-style: none; padding-left: 0; }
    li { margin: .5rem 0; }
    a { text-decoration: none; color: #0a58ca; }
  </style>
</head>
<body>
  <h1>Menu</h1>
  <p>Сгенерировано из <code>docs/*.mmd</code></p>
  <ul>
    ${items || '<li><em>Пока нет ни одного SVG. Добавь файлы .mmd в каталог <code>docs</code> и перезапусти сборку.</em></li>'}
  </ul>
</body>
</html>`;
  await writeFile(path.join(DIST_DIR, 'index.html'), html, 'utf8');
}

async function copyStatic() {
  // если есть статические svg в docs, копируем
  const statics = await globby(['**/*.svg'], { cwd: DOCS_DIR });
  for (const rel of statics) {
    await mkdir(path.dirname(path.join(MENU_DIR, rel)), { recursive: true });
    await cp(path.join(DOCS_DIR, rel), path.join(MENU_DIR, path.basename(rel)));
  }
}

async function main() {
  await rm(DIST_DIR, { recursive: true, force: true });
  await mkdir(DIST_DIR, { recursive: true });

  const svgs = await renderMermaidFiles();
  await copyStatic();
  await writeIndex(svgs);
  await writeFile(path.join(DIST_DIR, '.nojekyll'), '');
  await writeFile(path.join(DIST_DIR, 'CNAME'), ''); // при необходимости заполнить доменом
  await writeFile(path.join(DIST_DIR, 'README.txt'), 'Generated by GitHub Actions');

  await writeFile(path.join(DIST_DIR, 'robots.txt'), 'User-agent: *\nAllow: /\n');

  await writeFile(path.join(DIST_DIR, 'index.html'), (await fs.readFile(path.join(DIST_DIR, 'index.html'))));
}

main().then(() => console.log('Build complete')).catch(err => {
  console.error(err);
  process.exit(1);
});
