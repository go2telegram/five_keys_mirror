#!/usr/bin/env python3
import datetime
import json
import pathlib as pl
import subprocess as sp
import sys

ROOT = pl.Path(__file__).resolve().parents[1]
REPORTS = ROOT / "build" / "reports"
REPORTS.mkdir(parents=True, exist_ok=True)


def run(cmd: str, check: bool = True) -> sp.CompletedProcess[str]:
    print(f"$ {cmd}")
    res = sp.run(cmd, shell=True, text=True, capture_output=True)
    stdout_tail = res.stdout[-500:]
    stderr_tail = res.stderr[-500:]
    if stdout_tail:
        print(stdout_tail)
    if stderr_tail:
        print(stderr_tail, file=sys.stderr)
    if check and res.returncode != 0:
        sys.exit(res.returncode)
    return res


def safe_read(path: pl.Path) -> str:
    return path.read_text(encoding="utf-8") if path.exists() else ""


def main() -> int:
    run("python -m pip install --upgrade pip pip-tools", check=True)
    run(
        "pip-compile -q --upgrade --generate-hashes -o requirements.txt requirements.in",
        check=True,
    )
    run(
        "pip-compile -q --upgrade --generate-hashes -o requirements-dev.txt requirements-dev.in",
        check=True,
    )

    run("pip-sync requirements.txt requirements-dev.txt", check=True)

    run("python tools/build_products.py build", check=True)
    run("python tools/build_products.py validate", check=True)

    run(
        "python tools/self_audit.py --fast --no-net --out build/reports/self_audit_auto.md || true",
        check=False,
    )

    tests_rc = run("pytest -q", check=False).returncode
    security_rc = run("python tools/security_audit.py", check=False).returncode

    meta = {
        "datetime": datetime.datetime.utcnow().isoformat() + "Z",
        "tests_exit": tests_rc,
        "security_exit": security_rc,
    }
    REPORTS.mkdir(parents=True, exist_ok=True)
    (REPORTS / "auto_update_meta.json").write_text(
        json.dumps(meta, ensure_ascii=False, indent=2),
        encoding="utf-8",
    )

    body_parts = [
        "## Weekly dependencies update\n",
        "*Auto-generated by CI.*\n",
        "### Self audit\n",
        safe_read(REPORTS / "self_audit_auto.md") or "_no report_",
        "\n### Security audit\n",
        safe_read(REPORTS / "security_audit.md") or "_no report_",
    ]
    (REPORTS / "auto_update_body.md").write_text(
        "\n\n".join(body_parts), encoding="utf-8"
    )

    draft_flag = security_rc != 0 or tests_rc != 0
    print(f"::set-output name=draft::{1 if draft_flag else 0}")
    return 0


if __name__ == "__main__":
    sys.exit(main())
