from __future__ import annotations

from collections import Counter
from pathlib import Path
from typing import Iterable
import os
import sys

import streamlit as st

REPO_ROOT = Path(__file__).resolve().parents[1]
if str(REPO_ROOT) not in sys.path:
    sys.path.append(str(REPO_ROOT))

from bot.admin_collab import (  # noqa: E402  (import after sys.path mutation)
    ensure_storage,
    load_tasks,
    update_task_decision,
)
from collab.ui import render_task_panel  # noqa: E402


STATUS_LABELS = {
    "pending": "–û–∂–∏–¥–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è",
    "accepted": "–ü—Ä–∏–Ω—è—Ç—ã–µ",
    "modified": "–ò–∑–º–µ–Ω—ë–Ω–Ω—ã–µ",
    "rejected": "–û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ",
}


def _filter_tasks(tasks: Iterable[dict[str, str]], status: str | None) -> list[dict[str, str]]:
    if status is None:
        return list(tasks)
    return [task for task in tasks if task.get("status", "pending") == status]


def main() -> None:
    st.set_page_config(page_title="Human-in-the-loop", layout="wide")
    ensure_storage()

    if os.getenv("ENABLE_HUMAN_COLLAB", "false").lower() not in {"1", "true", "yes"}:
        st.warning(
            "–†–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–∫–ª—é—á—ë–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è "
            "ENABLE_HUMAN_COLLAB=true –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."
        )
        st.stop()

    st.title("ü§ù –°–æ–≤–º–µ—Å—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∏ –ò–ò")
    st.caption("–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Å–µ—Ç–∏ –∏ —Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.")

    if "operator_name" not in st.session_state:
        st.session_state.operator_name = ""

    with st.sidebar:
        st.header("–û–ø–µ—Ä–∞—Ç–æ—Ä")
        st.session_state.operator_name = st.text_input(
            "–ò–º—è", value=st.session_state.operator_name, placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä, –ê–Ω–Ω–∞"
        )
        st.markdown(
            """
            - –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
            - –ù–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª –∏–ª–∏ ¬´–û—Ç–∫–ª–æ–Ω–∏—Ç—å¬ª, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ.
            - –í—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ `collab_history.jsonl`.
            """
        )

    tasks = load_tasks()
    status_counter = Counter(task.get("status", "pending") for task in tasks)

    tabs = st.tabs(
        [
            "–í—Å–µ",
            f"{STATUS_LABELS['pending']} ({status_counter.get('pending', 0)})",
            f"{STATUS_LABELS['accepted']} ({status_counter.get('accepted', 0)})",
            f"{STATUS_LABELS['modified']} ({status_counter.get('modified', 0)})",
            f"{STATUS_LABELS['rejected']} ({status_counter.get('rejected', 0)})",
        ]
    )

    tab_keys = ["all", "pending", "accepted", "modified", "rejected"]
    for tab, status, tab_key in zip(
        tabs,
        [None, "pending", "accepted", "modified", "rejected"],
        tab_keys,
    ):
        with tab:
            _render_task_list(
                _filter_tasks(tasks, status),
                operator_name=st.session_state.operator_name,
                widget_prefix=tab_key,
            )


def _render_task_list(
    tasks: list[dict[str, str]], *, operator_name: str, widget_prefix: str
) -> None:
    if not tasks:
        st.info("–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å—Ç—Ä.")
        return

    for task in tasks:
        render_task_panel(
            task,
            operator_name=operator_name,
            on_decision=lambda status, recommendation, notes, task_id=task["id"]: update_task_decision(
                task_id,
                status=status,
                recommendation=recommendation,
                operator=operator_name or "",
                operator_notes=notes,
            ),
            widget_prefix=widget_prefix,
        )


if __name__ == "__main__":
    main()
