"""Time-series forecasting utilities for the predictive planner."""
from __future__ import annotations

import io
from dataclasses import dataclass
from pathlib import Path
from typing import Iterable, Optional

import numpy as np
import pandas as pd
from statsmodels.tsa.holtwinters import ExponentialSmoothing, HoltWintersResultsWrapper

import matplotlib

matplotlib.use("Agg")
import matplotlib.pyplot as plt

SUPPORTED_METRICS: dict[str, str] = {
    "rps": "–ó–∞–ø—Ä–æ—Å—ã –≤ —Å–µ–∫—É–Ω–¥—É",
    "revenue_total": "–í—ã—Ä—É—á–∫–∞, ‚ÇΩ",
    "error_rate": "–î–æ–ª—è –æ—à–∏–±–æ–∫, %",
}

DATA_PATH = Path(__file__).resolve().parent / "data" / "metrics.csv"


@dataclass(slots=True)
class ForecastResult:
    """Result of the forecast pipeline."""

    metric: str
    horizon_days: int
    history: pd.DataFrame
    forecast: pd.DataFrame
    mae_pct: float
    latest_actual: float
    horizon_mean: float
    recommendation: str
    chart_bytes: bytes

    @property
    def summary(self) -> str:
        direction = "+" if self.horizon_mean >= self.latest_actual else "‚àí"
        delta_pct = _safe_pct_change(self.horizon_mean, self.latest_actual)
        return (
            f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {format_metric_name(self.metric)} ({self.horizon_days} –¥.)\n"
            f"MAE: {self.mae_pct:.1f}%\n"
            f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: {self.latest_actual:,.2f}\n"
            f"–û–∂–∏–¥–∞–µ–º—ã–π —Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {self.horizon_mean:,.2f} ({direction}{abs(delta_pct):.1f}%)\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{self.recommendation}"
        )


class ForecastError(Exception):
    """Raised when a forecast cannot be produced."""


def format_metric_name(metric: str) -> str:
    return SUPPORTED_METRICS.get(metric, metric)


def build_forecast(metric: str, days: int = 7, *, output_path: Optional[Path] = None) -> ForecastResult:
    metric = metric.strip().lower()
    if metric not in SUPPORTED_METRICS:
        raise ForecastError(
            f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ '{metric}'. –î–æ—Å—Ç—É–ø–Ω—ã: {', '.join(SUPPORTED_METRICS)}"
        )

    history = _load_history(metric)
    if len(history) < max(days * 2, 30):
        raise ForecastError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ ‚Äî –Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã 30 —Ç–æ—á–µ–∫.")

    model, mae_pct = _backtest(history["value"], horizon=min(7, days))
    forecast_df, latest_actual, horizon_mean = _forecast(model, history, days)

    chart_bytes = _render_plot(metric, history, forecast_df, output_path=output_path)
    recommendation = _generate_recommendation(metric, latest_actual, horizon_mean, mae_pct)
    return ForecastResult(
        metric=metric,
        horizon_days=days,
        history=history,
        forecast=forecast_df,
        mae_pct=mae_pct,
        latest_actual=latest_actual,
        horizon_mean=horizon_mean,
        recommendation=recommendation,
        chart_bytes=chart_bytes,
    )


def _load_history(metric: str) -> pd.DataFrame:
    if not DATA_PATH.exists():
        raise ForecastError(
            f"–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏: {DATA_PATH}. –î–æ–±–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è."
        )

    df = pd.read_csv(DATA_PATH, parse_dates=["date"])
    if metric not in df.columns:
        raise ForecastError(f"–í —Ñ–∞–π–ª–µ {DATA_PATH.name} –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{metric}'.")

    series = df[["date", metric]].rename(columns={metric: "value"}).copy()
    series.dropna(inplace=True)
    series.sort_values("date", inplace=True)
    series = series.reset_index(drop=True)
    return series


def _backtest(series: pd.Series, horizon: int) -> tuple[HoltWintersResultsWrapper, float]:
    horizon = max(3, horizon)
    if len(series) <= horizon + 5:
        raise ForecastError("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π —Ä—è–¥ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏.")

    train = series.iloc[:-horizon]
    test = series.iloc[-horizon:]

    model = ExponentialSmoothing(
        train,
        trend="add",
        seasonal="add",
        seasonal_periods=7,
        initialization_method="estimated",
    )
    fitted = model.fit(optimized=True)
    pred = fitted.forecast(horizon)
    mae_pct = _mae_pct(test, pred)

    # retrain on full series for actual forecast
    final_model = ExponentialSmoothing(
        series,
        trend="add",
        seasonal="add",
        seasonal_periods=7,
        initialization_method="estimated",
    ).fit(optimized=True)

    return final_model, mae_pct


def _forecast(model: HoltWintersResultsWrapper, history: pd.DataFrame, days: int) -> tuple[pd.DataFrame, float, float]:
    forecast_index = pd.date_range(
        start=history["date"].iloc[-1] + pd.Timedelta(days=1), periods=days, freq="D"
    )
    preds = model.forecast(days)
    residuals = model.resid
    sigma = float(np.std(residuals, ddof=1)) if len(residuals) > 1 else 0.0
    interval = 1.96 * sigma

    forecast_df = pd.DataFrame(
        {
            "date": forecast_index,
            "prediction": preds.values,
            "lower": np.maximum(preds.values - interval, 0.0),
            "upper": preds.values + interval,
        }
    )

    latest_actual = float(history["value"].iloc[-1])
    horizon_mean = float(forecast_df["prediction"].mean())
    return forecast_df, latest_actual, horizon_mean


def _mae_pct(actual: pd.Series, predicted: Iterable[float]) -> float:
    actual = actual.astype(float)
    predicted = np.array(list(predicted), dtype=float)
    mae = np.mean(np.abs(actual.values - predicted))
    baseline = np.mean(np.abs(actual.values)) or 1.0
    return float(mae / baseline * 100.0)


def _safe_pct_change(new: float, old: float) -> float:
    if old == 0:
        return 0.0
    return (new - old) / abs(old) * 100.0


def _generate_recommendation(metric: str, latest: float, expected: float, mae_pct: float) -> str:
    delta_pct = _safe_pct_change(expected, latest)
    delta_significant = abs(delta_pct) >= 3.0

    if metric == "revenue_total":
        if delta_significant and delta_pct > 0:
            advice = [
                "–ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–æ–ø. –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ä–æ—Å—Ç–∞.",
                "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –∞–∫—Ü–∏–∏ —Å –ø–∏–∫–æ–≤—ã–º–∏ –¥–Ω—è–º–∏ —Å–ø—Ä–æ—Å–∞ –∏–∑ –ø—Ä–æ–≥–Ω–æ–∑–∞.",
            ]
        elif delta_significant and delta_pct < 0:
            advice = [
                "–£—Å–∏–ª–∏—Ç–µ –≤–æ—Ä–æ–Ω–∫—É –ø—Ä–æ–¥–∞–∂: –ø—Ä–æ–≥—Ä–µ–π—Ç–µ –ª–∏–¥—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –¥–æ–ø—Ä–æ–¥–∞–∂–∏.",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏ –±–æ–Ω—É—Å—ã ‚Äî –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –æ—Ñ—Ñ–µ—Ä—ã –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é.",
            ]
        else:
            advice = [
                "–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –º–µ–¥–∏–∞–ø–ª–∞–Ω –∏ –¥–µ—Ä–∂–∏—Ç–µ —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ –æ–ø–ª–∞—Ç—É.",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∫–≤–æ–∑–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É: –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è >10% –æ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ ‚Äî —Å–∏–≥–Ω–∞–ª –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫.",
            ]
    elif metric == "rps":
        if delta_significant and delta_pct > 0:
            advice = [
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–∏–∫–∞–º–∏ —Ç—Ä–∞—Ñ–∏–∫–∞.",
                "–ó–∞—Ä–∞–Ω–µ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É (–∞–≤—Ç–æ scaling –∏–ª–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—É–ª–∞ –≤–æ—Ä–∫–µ—Ä–æ–≤).",
            ]
        elif delta_significant and delta_pct < 0:
            advice = [
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–≤–æ–±–æ–¥–∏–≤—à—É—é—Å—è –º–æ—â–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π.",
                "–°–≤–µ—Ä—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞ ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–∞—Ñ–∏–∫ —É–π–¥—ë—Ç –Ω–∞ –Ω–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã.",
            ]
        else:
            advice = [
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã SLA –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ latency.",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç—Ä–µ–≤–æ–≥–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ª–æ–∂–Ω—ã—Ö —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –≤–æ –≤—Ä–µ–º—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞.",
            ]
    else:  # error_rate
        if delta_significant and delta_pct > 0:
            advice = [
                "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤—É –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–π—Ç–µ –±–∞–≥—Ñ–∏–∫—Å—ã –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏.",
                "–£—Å–∏–ª–∏—Ç–µ –∞–ª–µ—Ä—Ç—ã –Ω–∞ —Ä–æ—Å—Ç –æ—à–∏–±–æ–∫ >2œÉ –æ—Ç –Ω–æ—Ä–º—ã –∏ –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ on-call –ø–ª–∞–Ω.",
            ]
        elif delta_significant and delta_pct < 0:
            advice = [
                "–ó–∞—Ñ–∏–∫—Å–∏—Ä—É–π—Ç–µ —É–ª—É—á—à–µ–Ω–∏—è –≤ post-mortem –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–π—Ç–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏.",
                "–û–±–Ω–æ–≤–∏—Ç–µ runbooks, –ø–æ–∫–∞ –º–µ—Ç—Ä–∏–∫–∞ –≤ –∑–µ–ª—ë–Ω–æ–π –∑–æ–Ω–µ.",
            ]
        else:
            advice = [
                "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å–æ–±–ª—é–¥–∞—Ç—å —Ä–µ–≥–ª–∞–º–µ–Ω—Ç—ã –¥–µ–ø–ª–æ—è –∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Ñ–∏—á –ø–µ—Ä–µ–¥ —Ä–µ–ª–∏–∑–æ–º.",
                "–°–≤–µ—Ä—å—Ç–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã, —á—Ç–æ–±—ã —É–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.",
            ]

    header = (
        f"–¢–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞ (MAE) ‚Äî {mae_pct:.1f}%. "
        f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫ —Ç–µ–∫—É—â–µ–º—É —É—Ä–æ–≤–Ω—é: {delta_pct:+.1f}%."
    )
    bullet_list = "\n".join(f"‚Ä¢ {line}" for line in advice)
    return f"{header}\n{bullet_list}"


def _render_plot(
    metric: str,
    history: pd.DataFrame,
    forecast: pd.DataFrame,
    *,
    output_path: Optional[Path] = None,
) -> bytes:
    fig, ax = plt.subplots(figsize=(8, 4.2))
    ax.plot(history["date"], history["value"], label="–ò—Å—Ç–æ—Ä–∏—è", color="#1f77b4")
    ax.plot(forecast["date"], forecast["prediction"], label="–ü—Ä–æ–≥–Ω–æ–∑", color="#ff7f0e")
    ax.fill_between(
        forecast["date"],
        forecast["lower"],
        forecast["upper"],
        color="#ff7f0e",
        alpha=0.2,
        label="–î–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª",
    )
    ax.set_title(f"{format_metric_name(metric)} ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ {len(forecast)} –¥–Ω.")
    ax.set_xlabel("–î–∞—Ç–∞")
    ax.set_ylabel(format_metric_name(metric))
    ax.grid(True, alpha=0.3)
    ax.legend()
    fig.autofmt_xdate()

    buffer = io.BytesIO()
    fig.savefig(buffer, format="png", bbox_inches="tight")
    plt.close(fig)
    buffer.seek(0)

    if output_path:
        output_path.parent.mkdir(parents=True, exist_ok=True)
        with open(output_path, "wb") as fh:
            fh.write(buffer.getbuffer())
        buffer.seek(0)

    return buffer.getvalue()


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Forecast metrics using Holt-Winters.")
    parser.add_argument("--metric", required=True, help="Metric key (e.g. revenue_total)")
    parser.add_argument("--days", type=int, default=7, help="Forecast horizon in days")
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Optional path for the plot image (PNG)",
    )
    args = parser.parse_args()

    try:
        result = build_forecast(args.metric, args.days, output_path=args.output)
    except ForecastError as exc:
        print(f"‚ö†Ô∏è {exc}")
    else:
        if args.output:
            print(f"–ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {args.output}")
        print(result.summary)
