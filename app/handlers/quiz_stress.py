from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.catalog import record_view
from app.keyboards import kb_buylist_pdf
from app.storage import SESSIONS, USERS, save_event, set_last_plan
from app.utils_media import send_product_album
from app.reco import product_lines
from app.config import settings

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–°–¢–†–ï–°–°¬ª
# ----------------------------
STRESS_QUESTIONS = [
    ("–ß–∞—Å—Ç–æ –ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ/—Ç—Ä–µ–≤–æ–≥—É?",
     [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ï—Å—Ç—å –ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–µ–ª–æ—á–∏?", [
     ("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ö–∞–∫ —Å–æ —Å–Ω–æ–º –∏–∑-–∑–∞ –º—ã—Å–ª–µ–π/—Å—Ç—Ä–µ—Å—Å–∞?",
     [("–ó–∞—Å—ã–ø–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ", 0), ("–ò–Ω–æ–≥–¥–∞ –º–µ—à–∞–µ—Ç", 2), ("–ß–∞—Å—Ç–æ –º–µ—à–∞–µ—Ç", 4)]),
    ("–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –º—ã—à–µ—á–Ω—ã–µ –∑–∞–∂–∏–º—ã (—à–µ—è/–ø–ª–µ—á–∏) –∏–ª–∏ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ï—Å—Ç—å –ª–∏ –æ—â—É—â–µ–Ω–∏–µ ¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è¬ª?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    _, answers = STRESS_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:stress:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()

# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------


@router.callback_query(F.data == "quiz:stress")
async def quiz_stress_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "stress", "idx": 0, "score": 0}
    qtext, _ = STRESS_QUESTIONS[0]
    await c.message.edit_text(
        f"–¢–µ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞ üß†\n\n–í–æ–ø—Ä–æ—Å 1/{len(STRESS_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(0),
    )

# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------


@router.callback_query(F.data.regexp(r"^q:stress:\d+:\d+$"))
async def quiz_stress_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "stress":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(STRESS_QUESTIONS):
        total = sess["score"]

        if total <= 5:
            level = "–°—Ç—Ä–µ—Å—Å –≤ –Ω–æ—Ä–º–µ"
            rec_codes = ["OMEGA3", "T8_BLEND"]
            ctx = "stress_ok"
        elif total <= 10:
            level = "–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å"
            rec_codes = ["MAG_B6", "OMEGA3"]
            ctx = "stress_mid"
        else:
            level = "–í—ã—Å–æ–∫–∏–π —Å—Ç—Ä–µ—Å—Å"
            rec_codes = ["MAG_B6", "OMEGA3", "T8_BLEND"]
            ctx = "stress_high"

        await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å 60 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8.",
            "10 –º–∏–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ —É—Ç—Ä–æ–º/–¥–Ω—ë–º.",
            "30 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã –∏–ª–∏ –ª—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ]
        notes = "–ò–∑–±–µ–≥–∞–π –∫–æ—Ñ–µ–∏–Ω–∞ –ø–æ—Å–ª–µ 16:00. –î–æ–±–∞–≤—å —Ç—ë–ø–ª—ã–π –¥—É—à/—Ä–∞—Å—Ç—è–∂–∫—É –≤–µ—á–µ—Ä–æ–º."

        set_last_plan(
            c.from_user.id,
            {
                "title": "–ü–ª–∞–Ω: –°—Ç—Ä–µ—Å—Å",
                "context": "stress",
                "context_name": "–°—Ç—Ä–µ—Å—Å / –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
                "level": level,
                "products": rec_codes[:3],
                "lines": lines,
                "actions": actions,
                "notes": notes,
                "order_url": settings.VILAVI_ORDER_NO_REG,
            }
        )

        msg = [
            f"–ò—Ç–æ–≥: <b>{level}</b>\n",
            "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å:",
            "‚Ä¢ –≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å 60 –º–∏–Ω –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8",
            "‚Ä¢ –î–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç 10 –º–∏–Ω, –ø—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω",
            "‚Ä¢ –ö–æ—Ñ–µ–∏–Ω –¥–æ 16:00; —Ç—ë–ø–ª—ã–π –¥—É—à/—Ä–∞—Å—Ç—è–∂–∫–∞ –≤–µ—á–µ—Ä–æ–º\n",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
        ]
        await c.message.answer(
            "\n".join(msg),
            reply_markup=kb_buylist_pdf("quiz:stress", rec_codes[:3], campaign="stress")
        )

        source = USERS.get(c.from_user.id, {}).get("source")
        record_view(c.from_user.id, source, rec_codes[:3], "stress")

        save_event(c.from_user.id, USERS[c.from_user.id].get("source"), "quiz_finish",
                   {"quiz": "stress", "score": total, "level": level})
        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = STRESS_QUESTIONS[idx]
    await c.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(STRESS_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(idx),
    )
