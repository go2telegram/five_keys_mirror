import datetime as dt

from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.catalog.api import pick_for_context
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.link_manager import get_register_link
from app.reco import product_lines
from app.repo import events as events_repo, retention as retention_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan
from app.utils.premium_cta import send_premium_cta

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–°–¢–†–ï–°–°¬ª
# ----------------------------
STRESS_QUESTIONS = [
    (
        "–ß–∞—Å—Ç–æ –ª–∏ —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ/—Ç—Ä–µ–≤–æ–≥—É?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)],
    ),
    ("–ï—Å—Ç—å –ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–∞ –º–µ–ª–æ—á–∏?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    (
        "–ö–∞–∫ —Å–æ —Å–Ω–æ–º –∏–∑-–∑–∞ –º—ã—Å–ª–µ–π/—Å—Ç—Ä–µ—Å—Å–∞?",
        [("–ó–∞—Å—ã–ø–∞—é –Ω–æ—Ä–º–∞–ª—å–Ω–æ", 0), ("–ò–Ω–æ–≥–¥–∞ –º–µ—à–∞–µ—Ç", 2), ("–ß–∞—Å—Ç–æ –º–µ—à–∞–µ—Ç", 4)],
    ),
    (
        "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –º—ã—à–µ—á–Ω—ã–µ –∑–∞–∂–∏–º—ã (—à–µ—è/–ø–ª–µ—á–∏) –∏–ª–∏ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏?",
        [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)],
    ),
    ("–ï—Å—Ç—å –ª–∏ –æ—â—É—â–µ–Ω–∏–µ ¬´—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –≤—ã–≥–æ—Ä–∞–Ω–∏—è¬ª?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    _, answers = STRESS_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:stress:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


def _stress_outcome(total: int) -> tuple[str, str, str, list[str]]:
    if total <= 5:
        return (
            "mild",
            "\u0421\u0442\u0440\u0435\u0441\u0441 \u0432 \u043d\u043e\u0440\u043c\u0435",
            "stress_ok",
            ["OMEGA3", "T8_BLEND"],
        )
    if total <= 10:
        return (
            "moderate",
            "\u0423\u043c\u0435\u0440\u0435\u043d\u043d\u044b\u0439 \u0441\u0442\u0440\u0435\u0441\u0441",
            "stress_mid",
            ["MAG_B6", "OMEGA3"],
        )
    return (
        "severe",
        "\u0412\u044b\u0441\u043e\u043a\u0438\u0439 \u0441\u0442\u0440\u0435\u0441\u0441",
        "stress_high",
        ["MAG_B6", "OMEGA3", "T8_BLEND"],
    )


# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------


@router.callback_query(F.data == "quiz:stress")
async def quiz_stress_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "stress", "idx": 0, "score": 0}
    qtext, _ = STRESS_QUESTIONS[0]
    await safe_edit(
        c,
        f"–¢–µ—Å—Ç —Å—Ç—Ä–µ—Å—Å–∞ üß†\n\n–í–æ–ø—Ä–æ—Å 1/{len(STRESS_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(0),
    )


# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------


@router.callback_query(F.data.regexp(r"^q:stress:\d+:\d+$"))
async def quiz_stress_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "stress":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(STRESS_QUESTIONS):
        total = sess["score"]
        level_key, level_label, ctx, rec_codes = _stress_outcome(total)
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å 60 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–Ω–æ–º, –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8.",
            "10 –º–∏–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ —É—Ç—Ä–æ–º/–¥–Ω—ë–º.",
            "30 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã –∏–ª–∏ –ª—ë–≥–∫–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ]
        notes = "–ò–∑–±–µ–≥–∞–π –∫–æ—Ñ–µ–∏–Ω–∞ –ø–æ—Å–ª–µ 16:00. –î–æ–±–∞–≤—å —Ç—ë–ø–ª—ã–π –¥—É—à/—Ä–∞—Å—Ç—è–∂–∫—É –≤–µ—á–µ—Ä–æ–º."

        discount_link = await get_register_link()

        plan_payload = {
            "title": "–ü–ª–∞–Ω: –°—Ç—Ä–µ—Å—Å",
            "context": "stress",
            "context_name": "–°—Ç—Ä–µ—Å—Å / –Ω–µ—Ä–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞",
            "level": level_label,
            "products": rec_codes[:3],
            "lines": lines,
            "actions": actions,
            "notes": notes,
            "order_url": discount_link,
        }

        async with compat_session(session_scope) as session:
            await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
            await set_last_plan(session, c.from_user.id, plan_payload)
            await events_repo.log(
                session,
                c.from_user.id,
                "quiz_finish",
                {"quiz": "stress", "score": total, "level": level_label},
            )
            await retention_repo.schedule_journey(
                session,
                c.from_user.id,
                "stress_relief",
                dt.datetime.now(dt.timezone.utc) + dt.timedelta(hours=48),
            )
            await commit_safely(session)

        cards = pick_for_context("stress", level_key, rec_codes[:3])
        await send_product_cards(
            c,
            f"–ò—Ç–æ–≥: {level_label}",
            cards,
            bullets=actions,
            headline=notes,
            back_cb="quiz:menu",
            utm_category="quiz_stress",
        )
        await send_premium_cta(
            c,
            "üîì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º",
            source="quiz:stress",
        )

        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = STRESS_QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(STRESS_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(idx),
    )
