from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.keyboards import kb_buylist_pdf
from app.storage import SESSIONS, ensure_user, save_event, set_last_plan
from app.utils_media import send_product_album
from app.reco import product_lines
from app.config import settings

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–°–û–ù¬ª
# ----------------------------
SLEEP_QUESTIONS = [
    ("–õ–æ–∂–∏—Ç–µ—Å—å –ª–∏ –≤—ã —Å–ø–∞—Ç—å –¥–æ 23:00?", [
     ("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–†–µ–¥–∫–æ/–ù–µ—Ç", 4)]),
    ("–°–∫–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º (—Ç–µ–ª–µ—Ñ–æ–Ω, –¢–í, –Ω–æ—É—Ç)?",
     [("<30 –º–∏–Ω", 0), ("30‚Äì60 –º–∏–Ω", 2), (">1 —á", 4)]),
    ("–ü—å—ë—Ç–µ –∫–æ—Ñ–µ–∏–Ω (–∫–æ—Ñ–µ/—á–∞–π/—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏) –ø–æ—Å–ª–µ 16:00?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –ª–∏ –Ω–æ—á—å—é –∏–ª–∏ —Ç—è–∂–µ–ª–æ –∑–∞—Å—ã–ø–∞–µ—Ç–µ —Å–Ω–æ–≤–∞?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ 7‚Äì8 —á —Å–Ω–∞?",
     [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    _, answers = SLEEP_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:sleep:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()

# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------


@router.callback_query(F.data == "quiz:sleep")
async def quiz_sleep_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "sleep", "idx": 0, "score": 0}
    qtext, _ = SLEEP_QUESTIONS[0]
    await c.message.edit_text(
        f"–¢–µ—Å—Ç —Å–Ω–∞ üò¥\n\n–í–æ–ø—Ä–æ—Å 1/{len(SLEEP_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(0),
    )

# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------


@router.callback_query(F.data.regexp(r"^q:sleep:\d+:\d+$"))
async def quiz_sleep_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "sleep":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(SLEEP_QUESTIONS):
        total = sess["score"]

        if total <= 5:
            level = "–°–æ–Ω –≤ –ø–æ—Ä—è–¥–∫–µ"
            rec_codes = ["OMEGA3", "D3"]
            ctx = "sleep_ok"
        elif total <= 10:
            level = "–ï—Å—Ç—å –Ω–∞—Ä—É—à–µ–Ω–∏—è —Å–Ω–∞"
            rec_codes = ["MAG_B6", "OMEGA3"]
            ctx = "sleep_mild"
        else:
            level = "–°–æ–Ω —Å–µ—Ä—å—ë–∑–Ω–æ –Ω–∞—Ä—É—à–µ–Ω"
            rec_codes = ["MAG_B6", "OMEGA3", "D3"]
            ctx = "sleep_high"

        await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞.",
            "–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è —Ç—ë–º–Ω–∞—è —Å–ø–∞–ª—å–Ω—è (18‚Äì20¬∞C, –º–∞—Å–∫–∞/—à—Ç–æ—Ä—ã).",
            "–ö–æ—Ñ–µ–∏–Ω ‚Äî –Ω–µ –ø–æ–∑–∂–µ 16:00, —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞.",
        ]
        notes = "–ï—Å–ª–∏ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è ‚Äî –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8 –∏–ª–∏ —Ç—ë–ø–ª—ã–π –¥—É—à –ø–µ—Ä–µ–¥ —Å–Ω–æ–º."

        await set_last_plan(
            c.from_user.id,
            {
                "title": "–ü–ª–∞–Ω: –°–æ–Ω",
                "context": "sleep",
                "context_name": "–°–æ–Ω",
                "level": level,
                "products": rec_codes[:3],
                "lines": lines,
                "actions": actions,
                "notes": notes,
                "order_url": settings.VILAVI_ORDER_NO_REG,
            }
        )

        msg = [
            f"–ò—Ç–æ–≥: <b>{level}</b>\n",
            "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å:",
            "‚Ä¢ –õ–æ–∂–∏—Ç—å—Å—è –¥–æ 23:00",
            "‚Ä¢ –ú–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–∫—Ä–∞–Ω—ã –∑–∞ 1 —á –¥–æ —Å–Ω–∞",
            "‚Ä¢ –ö–æ—Ñ–µ–∏–Ω —Ç–æ–ª—å–∫–æ –¥–æ 16:00",
            "‚Ä¢ –ü—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏ —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–π —Å–≤–µ—Ç\n",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
        ]
        await c.message.answer("\n".join(msg), reply_markup=kb_buylist_pdf("quiz:sleep", rec_codes[:3]))

        profile = await ensure_user(c.from_user.id, {})
        await save_event(
            {
                "user_id": c.from_user.id,
                "source": profile.get("source"),
                "action": "quiz_finish",
                "payload": {"quiz": "sleep", "score": total, "level": level},
            }
        )
        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = SLEEP_QUESTIONS[idx]
    await c.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(SLEEP_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(idx),
    )
