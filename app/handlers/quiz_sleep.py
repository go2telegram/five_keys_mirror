from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.products import GOAL_MAP
from app.quiz.engine import (
    QuizDefinition,
    QuizHooks,
    QuizResultContext,
    register_quiz_hooks,
)
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan
from app.services import get_reco
from app.utils.nav import nav_footer
from app.utils.premium_cta import send_premium_cta
from app.utils.sender import chat_sender

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–°–û–ù¬ª
# ----------------------------
SLEEP_QUESTIONS = [
    ("–õ–æ–∂–∏—Ç–µ—Å—å –ª–∏ –≤—ã —Å–ø–∞—Ç—å –¥–æ 23:00?", [("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–†–µ–¥–∫–æ/–ù–µ—Ç", 4)]),
    ("–°–∫–æ–ª—å–∫–æ —ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º (—Ç–µ–ª–µ—Ñ–æ–Ω, –¢–í, –Ω–æ—É—Ç)?", [("<30 –º–∏–Ω", 0), ("30‚Äì60 –º–∏–Ω", 2), (">1 —á", 4)]),
    ("–ü—å—ë—Ç–µ –∫–æ—Ñ–µ–∏–Ω (–∫–æ—Ñ–µ/—á–∞–π/—ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∏) –ø–æ—Å–ª–µ 16:00?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ü—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –ª–∏ –Ω–æ—á—å—é –∏–ª–∏ —Ç—è–∂–µ–ª–æ –∑–∞—Å—ã–ø–∞–µ—Ç–µ —Å–Ω–æ–≤–∞?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ —É—Å—Ç–∞–ª–æ—Å—Ç—å –¥–∞–∂–µ –ø–æ—Å–ª–µ 7‚Äì8 —á —Å–Ω–∞?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    (
        "–õ–æ–∂–∏—Ç–µ—Å—å –∏ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –ª–∏ –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è (¬±30 –º–∏–Ω)?",
        [("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ù–µ—Ç", 4)],
    ),
    (
        "–ü–æ–ª—É—á–∞–µ—Ç–µ –ª–∏ 10‚Äì15 –º–∏–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–≥–æ —Å–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è?",
        [("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–†–µ–¥–∫–æ", 4)],
    ),
    (
        "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ª–∏ –∫—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–Ω–∞ –∏ –æ—Ç–¥—ã—Ö–∞ (–±–µ–∑ —Ä–∞–±–æ—Ç—ã –∏ —Å–µ—Ä–∏–∞–ª–æ–≤)?",
        [("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)],
    ),
    ("–ë—ã–≤–∞—é—Ç –ª–∏ —Ç—è–∂—ë–ª—ã–µ —É–∂–∏–Ω—ã/–ø–µ—Ä–µ–∫—É—Å—ã –ø–æ–∑–¥–Ω–µ–µ —á–µ–º –∑–∞ 2 —á–∞—Å–∞ –¥–æ —Å–Ω–∞?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
]


def _merge_tags(result: QuizResultContext) -> list[str]:
    merged: list[str] = []
    seen: set[str] = set()
    for source in (result.threshold.tags, result.collected_tags):
        for tag in source or []:
            normalized = str(tag).strip()
            if not normalized or normalized in seen:
                continue
            seen.add(normalized)
            merged.append(normalized)
    return merged


def _register_yaml_hooks() -> None:
    async def _on_finish_sleep(
        user_id: int, definition: QuizDefinition, result: QuizResultContext
    ) -> bool:
        origin = result.origin
        message = origin.message if origin and origin.message else None
        if not message:
            return False

        chat_id = message.chat.id
        tags = _merge_tags(result)
        products = await get_reco(
            user_id,
            limit=3,
            source="quiz:sleep",
            tags=tags,
        )
        if not products:
            products = GOAL_MAP.get("sleep", [])

        selected_products = list(products)[:3]
        title = f"–ò—Ç–æ–≥: {result.threshold.label}"
        headline = result.threshold.advice

        await chat_sender.send_sequence(
            chat_id,
            chat_sender.chat_action(chat_id, "typing"),
            lambda: send_product_cards(
                origin,
                title,
                selected_products,
                ctx="sleep",
                headline=headline,
                back_cb="menu:tests",
            ),
            chat_sender.send_text(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=nav_footer()),
        )
        return True

    register_quiz_hooks("sleep", QuizHooks(on_finish=_on_finish_sleep))


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    _, answers = SLEEP_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:sleep:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


def _sleep_outcome(total: int) -> tuple[str, str, str, list[str]]:
    if total <= 8:
        return (
            "mild",
            "\u0421\u043e\u043d \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435",
            "sleep_ok",
            ["OMEGA3", "D3"],
        )
    if total <= 16:
        return (
            "moderate",
            "\u0415\u0441\u0442\u044c \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0441\u043d\u0430",
            "sleep_mild",
            ["MAG_B6", "OMEGA3"],
        )
    return (
        "severe",
        (
            "\u0421\u043e\u043d \u0441\u0435\u0440\u044c\u0451\u0437\u043d\u043e "
            "\u043d\u0430\u0440\u0443\u0448\u0435\u043d"
        ),
        "sleep_high",
        ["MAG_B6", "OMEGA3", "D3"],
    )


# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------


@router.callback_query(F.data == "quiz:sleep")
async def quiz_sleep_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "sleep", "idx": 0, "score": 0}
    qtext, _ = SLEEP_QUESTIONS[0]
    await safe_edit(
        c,
        f"–¢–µ—Å—Ç —Å–Ω–∞ üò¥\n\n–í–æ–ø—Ä–æ—Å 1/{len(SLEEP_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(0),
    )


# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------


@router.callback_query(F.data.regexp(r"^q:sleep:\d+:\d+$"))
async def quiz_sleep_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "sleep":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(SLEEP_QUESTIONS):
        total = sess["score"]
        level_key, level_label, ctx, rec_codes = _sleep_outcome(total)
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞ –∏ –º—è–≥–∫–∏–π —Å–≤–µ—Ç.",
            "–§–∏–∫—Å–∏—Ä—É–π –≤—Ä–µ–º—è –æ—Ç–±–æ—è/–ø–æ–¥—ä—ë–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±30 –º–∏–Ω—É—Ç.",
            "10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –¥–Ω—ë–º.",
            "–õ—ë–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞, –∫–æ—Ñ–µ–∏–Ω ‚Äî –Ω–µ –ø–æ–∑–∂–µ 14:00.",
        ]
        notes = "–î–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è ‚Äî –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8, —Ç—ë–ø–ª—ã–π –¥—É—à –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ —Å–ø–∞–ª—å–Ω–∏."

        plan_payload = {
            "title": "–ü–ª–∞–Ω: –°–æ–Ω",
            "context": "sleep",
            "context_name": "–°–æ–Ω",
            "level": level_label,
            "products": rec_codes[:3],
            "lines": lines,
            "actions": actions,
            "notes": notes,
            "order_url": settings.velavie_url,
        }

        async with compat_session(session_scope) as session:
            await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
            await set_last_plan(session, c.from_user.id, plan_payload)
            await events_repo.log(
                session,
                c.from_user.id,
                "quiz_finish",
                {"quiz": "sleep", "score": total, "level": level_label},
            )
            await commit_safely(session)

        cards = pick_for_context("sleep", level_key, rec_codes[:3])
        await send_product_cards(
            c,
            f"–ò—Ç–æ–≥: {level_label}",
            cards,
            bullets=actions,
            headline=notes,
            back_cb="quiz:menu",
        )
        await send_premium_cta(
            c,
            "üîì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º",
            source="quiz:sleep",
        )

        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = SLEEP_QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(SLEEP_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(idx),
    )


_register_yaml_hooks()
