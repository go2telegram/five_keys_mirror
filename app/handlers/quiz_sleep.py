from __future__ import annotations

from __future__ import annotations

from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.quiz.engine import (
    QuizDefinition,
    QuizHooks,
    QuizResultContext,
    register_quiz_hooks,
    start_quiz,
)
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import commit_safely, set_last_plan

from .quiz_common import send_product_cards

router = Router()


def _register_hooks() -> None:
    register_quiz_hooks("sleep", QuizHooks(on_finish=_on_finish_sleep))


def _sleep_outcome(total: int) -> tuple[str, str, str, list[str]]:
    if total <= 9:
        return (
            "mild",
            "–°–æ–Ω –≤ –±–∞–ª–∞–Ω—Å–µ",
            "sleep_ok",
            ["OMEGA3", "D3"],
        )
    if total <= 13:
        return (
            "moderate",
            "–ù—É–∂–Ω–∞ –º—è–≥–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            "sleep_mild",
            ["MAG_B6", "OMEGA3"],
        )
    return (
        "severe",
        "–°–æ–Ω —Å–∏–ª—å–Ω–æ –ø—Ä–æ—Å–µ–ª",
        "sleep_high",
        ["MAG_B6", "OMEGA3", "D3"],
    )


async def _on_finish_sleep(
    call: CallbackQuery, definition: QuizDefinition, result: QuizResultContext
) -> bool:
    level_key, level_label, ctx, rec_codes = _sleep_outcome(result.total_score)
    lines = product_lines(rec_codes[:3], ctx)

    actions = [
        "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞ –∏ –º—è–≥–∫–∏–π —Å–≤–µ—Ç.",
        "–§–∏–∫—Å–∏—Ä—É–π –≤—Ä–µ–º—è –æ—Ç–±–æ—è –∏ –ø–æ–¥—ä—ë–º–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö ¬±30 –º–∏–Ω—É—Ç.",
        "10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ –∏ –∫–æ—Ä–æ—Ç–∫–∞—è –ø—Ä–æ–≥—É–ª–∫–∞ –¥–Ω—ë–º.",
        "–õ—ë–≥–∫–∏–π —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞, –∫–æ—Ñ–µ–∏–Ω ‚Äî –Ω–µ –ø–æ–∑–∂–µ 14:00.",
    ]
    notes = "–î–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è ‚Äî –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8, —Ç—ë–ø–ª—ã–π –¥—É—à –∏ –ø—Ä–æ–≤–µ—Ç—Ä–∏–≤–∞–Ω–∏–µ —Å–ø–∞–ª—å–Ω–∏."

    plan_payload = {
        "title": "–ü–ª–∞–Ω: –°–æ–Ω",
        "context": "sleep",
        "context_name": "–°–æ–Ω",
        "level": level_label,
        "products": rec_codes[:3],
        "lines": lines,
        "actions": actions,
        "notes": notes,
        "order_url": settings.velavie_url,
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, call.from_user.id, call.from_user.username)
        await set_last_plan(session, call.from_user.id, plan_payload)
        await events_repo.log(
            session,
            call.from_user.id,
            "quiz_finish",
            {"quiz": "sleep", "score": result.total_score, "level": level_label},
        )
        await commit_safely(session)

    summary_tags = sorted(set(result.threshold.tags) | set(result.collected_tags))
    tag_line = " ".join(f"#{tag}" for tag in summary_tags)
    message = call.message
    if message:
        parts = [
            f"üõå <b>–¢–µ—Å—Ç ¬´{definition.title}¬ª</b> –∑–∞–≤–µ—Ä—à—ë–Ω!",
            f"–°—É–º–º–∞ –±–∞–ª–ª–æ–≤: <b>{result.total_score}</b>",
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{result.threshold.label}</b>",
            result.threshold.advice,
        ]
        if tag_line:
            parts.append("")
            parts.append(tag_line)
        await message.answer("\n".join(part for part in parts if part).strip())

    cards = pick_for_context("sleep", level_key, rec_codes[:3])
    await send_product_cards(
        call,
        f"–ò—Ç–æ–≥: {level_label}",
        cards,
        bullets=actions,
        headline=notes,
        back_cb="quiz:menu",
    )

    return True


@router.callback_query(F.data == "quiz:sleep")
async def quiz_sleep_start(call: CallbackQuery, state: FSMContext) -> None:
    await start_quiz(call, state, "sleep")


_register_hooks()
