from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.keyboards import kb_recommend_follow_up
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan
from app.utils.premium_cta import send_premium_cta

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º¬ª
# ----------------------------
GUT_QUESTIONS = [
    ("–ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –≤–∑–¥—É—Ç–∏–µ –∏–ª–∏ —Ç—è–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–°—Ç—É–ª –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π (—Ä–µ–∂–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å / –∑–∞–ø–æ—Ä—ã / –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π)?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–¢—è–Ω–µ—Ç –Ω–∞ —Å–ª–∞–¥–∫–æ–µ/–ø–µ—Ä–µ–∫—É—Å—ã, —Å–ª–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ù–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏/–æ—Å—Ç—Ä—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏/—Å—Ç—Ä–µ—Å—Å—ã?", [("–ù–µ—Ç", 0), ("–ó–∞ 3‚Äì6 –º–µ—Å", 2), ("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", 4)]),
    ("–ò–∑–∂–æ–≥–∞/—Ä–µ—Ñ–ª—é–∫—Å/–¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≤–µ—Ä—Ö–Ω–∏—Ö –æ—Ç–¥–µ–ª–∞—Ö –ñ–ö–¢?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    _, answers = GUT_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:gut:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


def _gut_outcome(total: int) -> tuple[str, str, str, list[str]]:
    if total <= 5:
        return (
            "mild",
            "\u0411\u0430\u043b\u0430\u043d\u0441 \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435",
            "gut_ok",
            ["TEO_GREEN", "OMEGA3"],
        )
    if total <= 10:
        return (
            "moderate",
            (
                "\u041b\u0451\u0433\u043a\u0438\u0435 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f "
                "\u043c\u0438\u043a\u0440\u043e\u0431\u0438\u043e\u043c\u0430"
            ),
            "gut_mild",
            ["TEO_GREEN", "MOBIO"],
        )
    return (
        "severe",
        "\u0416\u041a\u0422 \u043f\u043e\u0434 \u043d\u0430\u0433\u0440\u0443\u0437\u043a\u043e\u0439",
        "gut_high",
        ["MOBIO", "TEO_GREEN", "OMEGA3"],
    )


# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------
@router.callback_query(F.data == "quiz:gut")
async def quiz_gut_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "gut", "idx": 0, "score": 0}
    qtext, _ = GUT_QUESTIONS[0]
    await safe_edit(
        c,
        f"–¢–µ—Å—Ç –ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º üåø\n\n–í–æ–ø—Ä–æ—Å 1/{len(GUT_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(0),
    )


# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------
@router.callback_query(F.data.regexp(r"^q:gut:\d+:\d+$"))
async def quiz_gut_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "gut":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(GUT_QUESTIONS):
        total = sess["score"]
        level_key, level_label, ctx, rec_codes = _gut_outcome(total)
        lines = product_lines(rec_codes[:3], ctx)

        # 3) –ø–ª–∞–Ω –¥–ª—è PDF
        actions = [
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è (–±–µ–∑ ¬´–¥–æ–Ω—ã—à–µ–∫¬ª).",
            "–ö–ª–µ—Ç—á–∞—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (TEO GREEN) + –≤–æ–¥–∞ 30‚Äì35 –º–ª/–∫–≥.",
            "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π —Å–∞—Ö–∞—Ä –∏ —É–ª—å—Ç—Ä–∞-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.",
        ]
        notes = "–ï—Å–ª–∏ –±—ã–ª–∏ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ ‚Äî –∫—É—Ä—Å MOBIO –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."

        plan_payload = {
            "title": "–ü–ª–∞–Ω: –ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
            "context": "gut",
            "context_name": "–ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
            "level": level_label,
            "products": rec_codes[:3],
            "lines": lines,
            "actions": actions,
            "notes": notes,
            "order_url": settings.velavie_url,
        }

        async with compat_session(session_scope) as session:
            await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
            await set_last_plan(session, c.from_user.id, plan_payload)
            await events_repo.log(
                session,
                c.from_user.id,
                "quiz_finish",
                {"quiz": "gut", "score": total, "level": level_label},
            )
            await commit_safely(session)

        cards = pick_for_context("gut", level_key, rec_codes[:3])
        await send_product_cards(
            c,
            f"–ò—Ç–æ–≥: {level_label}",
            cards,
            bullets=actions,
            headline=notes,
            back_cb="quiz:menu",
            follow_up=("–ß—Ç–æ –¥–∞–ª—å—à–µ?", kb_recommend_follow_up()),
        )
        await send_premium_cta(
            c,
            "üîì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º",
            source="quiz:gut",
        )

        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = GUT_QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(GUT_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(idx),
    )
