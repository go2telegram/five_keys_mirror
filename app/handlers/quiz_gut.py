from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.keyboards import kb_buylist_pdf
from app.storage import SESSIONS, USERS, save_event, set_last_plan
from app.utils_media import send_product_album
from app.reco import product_lines
from app.config import settings

router = Router()

# ----------------------------
# –í–û–ü–†–û–°–´ –ö–í–ò–ó–ê ¬´–ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º¬ª
# ----------------------------
GUT_QUESTIONS = [
    ("–ß–∞—Å—Ç–æ –±—ã–≤–∞–µ—Ç –≤–∑–¥—É—Ç–∏–µ –∏–ª–∏ —Ç—è–∂–µ—Å—Ç—å –ø–æ—Å–ª–µ –µ–¥—ã?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–°—Ç—É–ª –Ω–µ—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π (—Ä–µ–∂–µ 1 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å / –∑–∞–ø–æ—Ä—ã / –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π)?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–¢—è–Ω–µ—Ç –Ω–∞ —Å–ª–∞–¥–∫–æ–µ/–ø–µ—Ä–µ–∫—É—Å—ã, —Å–ª–æ–∂–Ω–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞–ø–ø–µ—Ç–∏—Ç?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ù–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏/–æ—Å—Ç—Ä—ã–µ –∏–Ω—Ñ–µ–∫—Ü–∏–∏/—Å—Ç—Ä–µ—Å—Å—ã?", [("–ù–µ—Ç", 0), ("–ó–∞ 3‚Äì6 –º–µ—Å", 2), ("–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", 4)]),
    ("–ò–∑–∂–æ–≥–∞/—Ä–µ—Ñ–ª—é–∫—Å/–¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç –≤ –≤–µ—Ä—Ö–Ω–∏—Ö –æ—Ç–¥–µ–ª–∞—Ö –ñ–ö–¢?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
]

def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    _, answers = GUT_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:gut:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()

# ----------------------------
# –°–¢–ê–†–¢ –ö–í–ò–ó–ê
# ----------------------------
@router.callback_query(F.data == "quiz:gut")
async def quiz_gut_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "gut", "idx": 0, "score": 0}
    qtext, _ = GUT_QUESTIONS[0]
    await c.message.edit_text(
        f"–¢–µ—Å—Ç –ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º üåø\n\n–í–æ–ø—Ä–æ—Å 1/{len(GUT_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(0),
    )

# ----------------------------
# –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í
# ----------------------------
@router.callback_query(F.data.regexp(r"^q:gut:\d+:\d+$"))
async def quiz_gut_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "gut":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(GUT_QUESTIONS):
        total = sess["score"]

        if total <= 5:
            level = "–ë–∞–ª–∞–Ω—Å –≤ –ø–æ—Ä—è–¥–∫–µ"
            rec_codes = ["TEO_GREEN", "OMEGA3"]; ctx = "gut_ok"
        elif total <= 10:
            level = "–õ—ë–≥–∫–∏–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –º–∏–∫—Ä–æ–±–∏–æ–º–∞"
            rec_codes = ["TEO_GREEN", "MOBIO"]; ctx = "gut_mild"
        else:
            level = "–ñ–ö–¢ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π"
            rec_codes = ["MOBIO", "TEO_GREEN", "OMEGA3"]; ctx = "gut_high"

        # 1) —Ñ–æ—Ç–æ
        await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])

        # 2) –∫–∞—Ä—Ç–æ—á–∫–∞
        lines = product_lines(rec_codes[:3], ctx)

        # 3) –ø–ª–∞–Ω –¥–ª—è PDF
        actions = [
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è (–±–µ–∑ ¬´–¥–æ–Ω—ã—à–µ–∫¬ª).",
            "–ö–ª–µ—Ç—á–∞—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (TEO GREEN) + –≤–æ–¥–∞ 30‚Äì35 –º–ª/–∫–≥.",
            "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π —Å–∞—Ö–∞—Ä –∏ —É–ª—å—Ç—Ä–∞-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.",
        ]
        notes = "–ï—Å–ª–∏ –±—ã–ª–∏ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ ‚Äî –∫—É—Ä—Å MOBIO –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è."

        set_last_plan(
            c.from_user.id,
            {
                "title": "–ü–ª–∞–Ω: –ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
                "context": "gut",
                "context_name": "–ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
                "level": level,
                "products": rec_codes[:3],
                "lines": lines,
                "actions": actions,
                "notes": notes,
                "order_url": settings.VILAVI_ORDER_NO_REG,
            }
        )

        msg = [
            f"–ò—Ç–æ–≥: <b>{level}</b>\n",
            "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è:",
            "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è, –±–µ–∑ ¬´–¥–æ–Ω—ã—à–µ–∫¬ª –∏ —á–∞—Å—Ç—ã—Ö –ø–µ—Ä–µ–∫—É—Å–æ–≤",
            "‚Ä¢ –í–æ–¥–∞ 30‚Äì35 –º–ª/–∫–≥ –∏ –ø—Ä–æ–≥—É–ª–∫–∏ 30 –º–∏–Ω –≤ –¥–µ–Ω—å",
            "‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–µ—Ç—á–∞—Ç–∫—É –∏ –±–µ–ª–æ–∫ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏—ë–º –ø–∏—â–∏\n",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
        ]
        await c.message.answer("\n".join(msg), reply_markup=kb_buylist_pdf("quiz:gut", rec_codes[:3]))

        save_event(c.from_user.id, USERS[c.from_user.id].get("source"), "quiz_finish",
                   {"quiz": "gut", "score": total, "level": level})
        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = GUT_QUESTIONS[idx]
    await c.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(GUT_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(idx),
    )
