# app/handlers/admin.py
from aiogram import Router
from aiogram.types import Message, BufferedInputFile
from aiogram.filters import Command
from io import StringIO
from datetime import datetime

from app.config import settings
from app.storage import (
    EVENTS,
    get_leads_last,
    count_users,
    count_notify_enabled,
    count_leads,
)

router = Router()


@router.message(Command("stats"))
async def stats(m: Message):
    if m.from_user.id != settings.ADMIN_ID:
        return
    total_users = await count_users()
    subs = await count_notify_enabled()
    quizzes = sum(1 for e in EVENTS if e["action"] == "quiz_finish")
    starts = sum(1 for e in EVENTS if e["action"] == "start")
    leads_cnt = await count_leads()

    await m.answer(
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {total_users}\n"
        f"–ü–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {subs}\n"
        f"–°—Ç–∞—Ä—Ç–æ–≤: {starts}\n"
        f"–ó–∞–≤–µ—Ä—à–µ–Ω–æ –∫–≤–∏–∑–æ–≤: {quizzes}\n"
        f"–õ–∏–¥—ã (–≤—Å–µ–≥–æ): {leads_cnt}\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /leads ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–∏–¥–æ–≤\n"
        "‚Ä¢ /leads 20 ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–∏–¥–æ–≤\n"
        "‚Ä¢ /leads_csv ‚Äî CSV –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 100\n"
        "‚Ä¢ /leads_csv 500 ‚Äî CSV –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 500"
    )


@router.message(Command("leads"))
async def leads_list(m: Message):
    if m.from_user.id != settings.ADMIN_ID:
        return

    # /leads <N?>
    parts = m.text.strip().split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 10
    except Exception:
        n = 10

    items = await get_leads_last(n)
    if not items:
        await m.answer("–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–µ–∫
    chunks = []
    for i, lead in enumerate(items, 1):
        chunks.append(
            f"#{i} ‚Äî <b>{lead.name or '(–±–µ–∑ –∏–º–µ–Ω–∏)'}</b>\n"
            f"üìû {lead.phone or '(–Ω–µ—Ç)'}\n"
            f"üí¨ {lead.comment or '(–ø—É—Å—Ç–æ)'}\n"
            f"üë§ {lead.username or lead.user_id or '(–Ω–µ—Ç)'}\n"
            f"üïí {lead.created_at.isoformat()}"
        )

    text = "üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–∏–¥—ã:\n\n" + "\n\n".join(chunks)
    # —Ç–µ–ª–µ–≥–∞ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç –¥–ª–∏–Ω—É ‚Äî –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ, –ø–æ—Ä–µ–∂–µ–º
    if len(text) > 4000:
        text = text[:3900] + "\n\n‚Ä¶–æ–±—Ä–µ–∑–∞–Ω–æ, –≤—ã–≥—Ä—É–∑–∏ CSV ‚Üí /leads_csv"
    await m.answer(text)


@router.message(Command("leads_csv"))
async def leads_csv(m: Message):
    if m.from_user.id != settings.ADMIN_ID:
        return

    # /leads_csv <N?>
    parts = m.text.strip().split()
    try:
        n = int(parts[1]) if len(parts) > 1 else 100
    except Exception:
        n = 100

    items = await get_leads_last(n)
    if not items:
        await m.answer("–õ–∏–¥–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # CSV
    out = StringIO()
    out.write("ts;name;phone;comment;username;user_id\n")
    for lead in items:
        ts = lead.created_at.isoformat()
        name = (lead.name or "").replace(";", ",")
        phone = lead.phone or ""
        comment = (lead.comment or "").replace(";", ",")
        username = lead.username or ""
        user_id = lead.user_id or ""
        out.write(f"{ts};{name};{phone};{comment};{username};{user_id}\n")

    csv_bytes = out.getvalue().encode("utf-8")
    out.close()

    fname = f"leads_{datetime.now().strftime('%Y%m%d_%H%M')}.csv"
    await m.answer_document(BufferedInputFile(csv_bytes, filename=fname), caption=f"–≠–∫—Å–ø–æ—Ä—Ç –ª–∏–¥–æ–≤ ({len(items)})")
