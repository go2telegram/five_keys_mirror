# app/handlers/referral.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime, timezone

from app.storage import USERS, save_event

router = Router()


def _now(): return datetime.now(timezone.utc)


async def _ref_link(bot, user_id: int) -> str:
    me = await bot.get_me()
    uname = me.username or "your_bot"
    return f"https://t.me/{uname}?start=ref_{user_id}"


def _ensure_ref_fields(uid: int):
    u = USERS.setdefault(uid, {})
    u.setdefault("ref_code", str(uid))
    u.setdefault("referred_by", None)
    u.setdefault("ref_clicks", 0)       # —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã –ø–æ —Å—Å—ã–ª–∫–µ
    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø–µ—Ä–≤—ã–π /start)
    u.setdefault("ref_joins", 0)
    u.setdefault("ref_conversions", 0)  # –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ (–∏–∑ –≤–µ–±—Ö—É–∫–∞)
    u.setdefault("ref_users", set())    # set(uid) –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö (–≤ –ø–∞–º—è—Ç–∏)


def _kb_ref(link: str):
    kb = InlineKeyboardBuilder()
    kb.button(text="üîó –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π", url=link)
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1)
    return kb.as_markup()


@router.callback_query(F.data == "ref:menu")
async def ref_menu_cb(c: CallbackQuery):
    uid = c.from_user.id
    _ensure_ref_fields(uid)
    link = await _ref_link(c.bot, uid)
    u = USERS[uid]
    text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n"
        f"{link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{len(u['ref_users'])}</b>\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: <b>{u['ref_clicks']}</b>\n"
        f"–û–ø–ª–∞—Ç (–∫–æ–Ω–≤–µ—Ä—Å–∏–π): <b>{u['ref_conversions']}</b>\n\n"
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π ‚Äî –∫–æ–≥–¥–∞ –¥—Ä—É–≥ –æ—Ñ–æ—Ä–º–∏—Ç –ø–æ–¥–ø–∏—Å–∫—É, —è –∑–∞—Å—á–∏—Ç–∞—é –∫–æ–Ω–≤–µ—Ä—Å–∏—é."
    )
    await c.message.edit_text(text, reply_markup=_kb_ref(link))


@router.message(Command("ref"))
async def ref_menu_msg(m: Message):
    uid = m.from_user.id
    _ensure_ref_fields(uid)
    link = await _ref_link(m.bot, uid)
    u = USERS[uid]
    text = (
        "üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n"
        f"{link}\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö: <b>{len(u['ref_users'])}</b>\n"
        f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤: <b>{u['ref_clicks']}</b>\n"
        f"–û–ø–ª–∞—Ç (–∫–æ–Ω–≤–µ—Ä—Å–∏–π): <b>{u['ref_conversions']}</b>\n"
    )
    await m.answer(text, reply_markup=_kb_ref(link))
    save_event(uid, USERS.get(uid, {}).get("source"), "ref_menu")
