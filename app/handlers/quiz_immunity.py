from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.catalog import record_view
from app.keyboards import kb_buylist_pdf
from app.storage import SESSIONS, USERS, save_event, set_last_plan
from app.utils_media import send_product_album
from app.reco import product_lines
from app.config import settings

router = Router()

IMMUNITY_QUESTIONS = [
    ("–ü—Ä–æ—Å—Ç—É–∂–∞–µ—Ç–µ—Å—å —á–∞—â–µ 3 —Ä–∞–∑ –≤ –≥–æ–¥?", [
     ("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–ë–æ–ª–µ–∑–Ω–∏ –∑–∞—Ç—è–≥–∏–≤–∞—é—Ç—Å—è –¥–æ–ª—å—à–µ –Ω–µ–¥–µ–ª–∏?", [
     ("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ï—Å—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Å—Ç—Ä–µ—Å—Å –∏–ª–∏ –Ω–µ–¥–æ—Å—ã–ø?", [
     ("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
    ("–ë—ã–≤–∞—é—Ç –∞–ª–ª–µ—Ä–≥–∏–∏ –∏–ª–∏ –≤—ã—Å—ã–ø–∞–Ω–∏—è?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    _, answers = IMMUNITY_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:immunity:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


@router.callback_query(F.data == "quiz:immunity")
async def quiz_immunity_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "immunity", "idx": 0, "score": 0}
    qtext, _ = IMMUNITY_QUESTIONS[0]
    await c.message.edit_text(
        f"–¢–µ—Å—Ç –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞ üõ°\n\n–í–æ–ø—Ä–æ—Å 1/{len(IMMUNITY_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(0),
    )


@router.callback_query(F.data.regexp(r"^q:immunity:\d+:\d+$"))
async def quiz_immunity_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "immunity":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(IMMUNITY_QUESTIONS):
        total = sess["score"]

        if total <= 4:
            level = "–•–æ—Ä–æ—à–∏–π –∏–º–º—É–Ω–∏—Ç–µ—Ç"
            rec_codes = ["OMEGA3", "D3"]
            ctx = "immunity_good"
        elif total <= 8:
            level = "–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–º–º—É–Ω–∏—Ç–µ—Ç–∞"
            rec_codes = ["VITEN", "T8_BLEND"]
            ctx = "immunity_mid"
        else:
            level = "–ò–º–º—É–Ω–∏—Ç–µ—Ç –æ—Å–ª–∞–±–ª–µ–Ω"
            rec_codes = ["VITEN", "T8_BLEND", "D3"]
            ctx = "immunity_low"

        await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º.",
            "–ü—Ä–æ–≥—É–ª–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 30‚Äì40 –º–∏–Ω—É—Ç.",
            "–ë–µ–ª–æ–∫ 1.2‚Äì1.6 –≥/–∫–≥, –æ–≤–æ—â–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ]
        notes = "–í —Å–µ–∑–æ–Ω –ø—Ä–æ—Å—Ç—É–¥: —Ç—ë–ø–ª—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 40‚Äì60%, –ø—Ä–æ–º—ã–≤–∞–Ω–∏–µ –Ω–æ—Å–∞."

        set_last_plan(
            c.from_user.id,
            {
                "title": "–ü–ª–∞–Ω: –ò–º–º—É–Ω–∏—Ç–µ—Ç",
                "context": "immunity",
                "context_name": "–ò–º–º—É–Ω–∏—Ç–µ—Ç",
                "level": level,
                "products": rec_codes[:3],
                "lines": lines,
                "actions": actions,
                "notes": notes,
                "order_url": settings.VILAVI_ORDER_NO_REG,
            }
        )

        msg = [
            f"–ò—Ç–æ–≥: <b>{level}</b>\n",
            "–ß—Ç–æ –≤–∞–∂–Ω–æ –¥–µ–ª–∞—Ç—å:",
            "‚Ä¢ –°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤",
            "‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ",
            "‚Ä¢ –ë–æ–ª—å—à–µ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ\n",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
        ]
        await c.message.answer(
            "\n".join(msg),
            reply_markup=kb_buylist_pdf("quiz:immunity", rec_codes[:3], campaign="immunity")
        )

        source = USERS.get(c.from_user.id, {}).get("source")
        record_view(c.from_user.id, source, rec_codes[:3], "immunity")

        save_event(c.from_user.id, USERS[c.from_user.id].get("source"), "quiz_finish",
                   {"quiz": "immunity", "score": total, "level": level})
        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = IMMUNITY_QUESTIONS[idx]
    await c.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(IMMUNITY_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(idx),
    )
