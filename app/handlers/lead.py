# app/handlers/lead.py
import re
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command

from app.keyboards import kb_cancel_home, kb_main
from app.storage import USERS, add_lead, save_event
from app.config import settings

router = Router()

PHONE_RE = re.compile(r"^\+?\d[\d\-\s\(\)]{6,}$")


class LeadForm(StatesGroup):
    name = State()
    phone = State()
    comment = State()

# —Å—Ç–∞—Ä—Ç –∏–∑ –º–µ–Ω—é/—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π


@router.callback_query(F.data == "lead:start")
async def lead_start(c: CallbackQuery, state: FSMContext):
    await state.set_state(LeadForm.name)
    await c.message.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–∏–º—è)", reply_markup=kb_cancel_home())


@router.message(Command("consult"))
async def lead_cmd(m: Message, state: FSMContext):
    await state.set_state(LeadForm.name)
    await m.answer("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–∏–º—è)", reply_markup=kb_cancel_home())


@router.callback_query(F.data == "lead:cancel")
async def lead_cancel_cb(c: CallbackQuery, state: FSMContext):
    await state.clear()
    await c.message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è ‚Äî –Ω–∞–∂–º–∏—Ç–µ üìù –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.", reply_markup=kb_main())


@router.message(LeadForm.name)
async def lead_name(m: Message, state: FSMContext):
    name = m.text.strip()
    if len(name) < 2:
        await m.answer("–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.", reply_markup=kb_cancel_home())
        return
    await state.update_data(name=name)
    await state.set_state(LeadForm.phone)
    await m.answer("–¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +7...)")


@router.message(LeadForm.phone)
async def lead_phone(m: Message, state: FSMContext):
    phone = m.text.strip()
    if not PHONE_RE.match(phone):
        await m.answer("–ü–æ—Ö–æ–∂–µ, –Ω–æ–º–µ—Ä –≤ –Ω–µ–æ–±—ã—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑ (–ø—Ä–∏–º–µ—Ä: +7 999 123-45-67).")
        return
    await state.update_data(phone=phone)
    await state.set_state(LeadForm.comment)
    await m.answer("–ö–æ—Ä–æ—Ç–∫–æ: —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å? (–º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ ¬´-¬ª).")


@router.message(LeadForm.comment)
async def lead_done(m: Message, state: FSMContext):
    data = await state.get_data()
    await state.clear()

    name = data.get("name")
    phone = data.get("phone")
    comment = m.text.strip()
    if comment == "-":
        comment = ""

    lead = {
        "user_id": m.from_user.id,
        "username": (m.from_user.username and "@" + m.from_user.username) or "(–Ω–µ—Ç)",
        "name": name,
        "phone": phone,
        "comment": comment,
        "ts": datetime.utcnow().isoformat()
    }
    add_lead(lead)
    items = data.get("products") or []
    save_event(m.from_user.id, USERS.get(m.from_user.id, {}).get("source"), "lead_done", {"items": items})

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–≤ —á–∞—Ç
    admin_chat = settings.LEADS_CHAT_ID or settings.ADMIN_ID
    text_admin = (
        "üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n"
        f"–ò–º—è: {name}\n"
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '(–ø—É—Å—Ç–æ)'}\n"
        f"–ü—Ä–æ—Ñ–∏–ª—å: @{m.from_user.username if m.from_user.username else m.from_user.id}"
    )
    try:
        from aiogram import Bot
        # –ø–æ–ª—É—á–∞–µ–º bot —á–µ—Ä–µ–∑ –º–∏–¥–ª–≤–∞—Ä—å? –ø—Ä–æ—â–µ ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º —é–∑–µ—Ä–∞ –ø–µ—Ä–µ–¥–∞—Ç—å —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ–ª—å–∑—è; –∏—Å–ø–æ–ª—å–∑—É–µ–º message.bot
        await m.bot.send_message(admin_chat, text_admin)
    except Exception:
        pass

    await m.answer("–°–ø–∞—Å–∏–±–æ! –Ø –ø–µ—Ä–µ–¥–∞–ª –∑–∞—è–≤–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üôå", reply_markup=kb_main())
