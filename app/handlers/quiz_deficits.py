"""Quiz for nutrient deficiencies (omega-3, magnesium, vitamin D)."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.reco import product_lines
from app.repo import events as events_repo, quiz_results as quiz_results_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan

router = Router(name="quiz_deficits")

_QUESTION_KEYS = ("omega", "mag", "vitd")

QUESTIONS: list[tuple[str, list[tuple[str, tuple[int, int, int]]]]] = [
    (
        "–°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –µ—à—å –∂–∏—Ä–Ω—É—é —Ä—ã–±—É –∏–ª–∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã?",
        [("2+ —Ä–∞–∑–∞", (0, 0, 0)), ("1 —Ä–∞–∑", (1, 0, 0)), ("–†–µ–∂–µ", (2, 0, 0))],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –≤ —Ä–∞—Ü–∏–æ–Ω–µ –µ—Å—Ç—å –æ—Ä–µ—Ö–∏, —Å–µ–º–µ—á–∫–∏, –∑–µ–ª–µ–Ω—å?",
        [("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", (0, 0, 0)), ("–ü–∞—Ä—É —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", (0, 1, 0)), ("–†–µ–¥–∫–æ", (0, 2, 0))],
    ),
    (
        "–ë—ã–≤–∞—é—Ç –ª–∏ —Å—É–¥–æ—Ä–æ–≥–∏, –ø–æ–¥—ë—Ä–≥–∏–≤–∞–Ω–∏—è –≤–µ–∫ –∏–ª–∏ –º—ã—à–µ—á–Ω–æ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ?",
        [("–†–µ–¥–∫–æ", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (0, 1, 0)), ("–ß–∞—Å—Ç–æ", (0, 2, 0))],
    ),
    (
        "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–æ–¥–∏—à—å –Ω–∞ —Å–æ–ª–Ω—Ü–µ –±–µ–∑ SPF (–¥–Ω—ë–º)?",
        [("20+ –º–∏–Ω—É—Ç", (0, 0, 0)), ("10‚Äì20 –º–∏–Ω—É—Ç", (0, 0, 1)), ("<10 –º–∏–Ω—É—Ç", (0, 0, 2))],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ —Å–µ–∑–æ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –æ—Å–µ–Ω—å—é/–∑–∏–º–æ–π?",
        [("–ù–µ—Ç", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (0, 0, 1)), ("–î–∞, –∑–∞–º–µ—Ç–Ω–æ", (0, 0, 2))],
    ),
    (
        "–ö–æ–∂–∞/–≤–æ–ª–æ—Å—ã: –∑–∞–º–µ—á–∞–µ—à—å —Å—É—Ö–æ—Å—Ç—å, —à–µ–ª—É—à–µ–Ω–∏–µ, –ª–æ–º–∫–æ—Å—Ç—å?",
        [("–ù–µ—Ç", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (1, 0, 1)), ("–ß–∞—Å—Ç–æ", (2, 0, 2))],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ—É—Ç–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å –≤—ã—à–µ –æ–±—ã—á–Ω–æ–≥–æ?",
        [("–ù–µ—Ç", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (1, 1, 0)), ("–î–∞", (2, 2, 0))],
    ),
    (
        "–ü—Ä–∏–Ω–∏–º–∞–µ—à—å –ª–∏ –¥–æ–±–∞–≤–∫–∏ –æ–º–µ–≥–∞-3/–º–∞–≥–Ω–∏–π/–≤–∏—Ç–∞–º–∏–Ω D?",
        [
            ("–î–∞, —Ä–µ–≥—É–ª—è—Ä–Ω–æ", (0, 0, 0)),
            ("–ò–Ω–æ–≥–¥–∞ –∫—É—Ä—Å–∞–º–∏", (1, 1, 1)),
            ("–ü–æ–∫–∞ –Ω–µ—Ç", (2, 2, 2)),
        ],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –±—ã–≤–∞–µ—à—å –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ –¥–Ω—ë–º (–ø—Ä–æ–≥—É–ª–∫–∏/—Å–ø–æ—Ä—Ç)?",
        [("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", (0, 0, 0)), ("2‚Äì3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", (1, 0, 1)), ("–†–µ–¥–∫–æ", (2, 0, 2))],
    ),
    (
        "–ü–∏—Ç–∞–Ω–∏–µ: –µ—Å—Ç—å –ª–∏ 3+ –ø–æ—Ä—Ü–∏–∏ –æ–≤–æ—â–µ–π/—Ñ—Ä—É–∫—Ç–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ?",
        [("–î–∞", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (1, 1, 0)), ("–†–µ–¥–∫–æ", (2, 2, 0))],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º (–∑–∞—Å—ã–ø–∞–Ω–∏–µ, —á–∞—Å—Ç—ã–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è)?",
        [("–ù–µ—Ç", (0, 0, 0)), ("–ò–Ω–æ–≥–¥–∞", (0, 1, 0)), ("–î–∞", (0, 2, 0))],
    ),
]


def _keyboard(idx: int) -> InlineKeyboardMarkup:
    text, answers = QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for pos, (label, _) in enumerate(answers):
        kb.button(text=label, callback_data=f"q:deficits:{idx}:{pos}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="quiz:menu")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 2)
    return kb.as_markup()


def _level(score: int) -> str:
    if score <= 6:
        return "mild"
    if score <= 12:
        return "moderate"
    return "severe"


def _level_text(nutrient: str, level: str) -> str:
    mapping = {
        "omega": {
            "mild": "–û–º–µ–≥–∞-3 –≤ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
            "moderate": "–î–æ–±–∞–≤—å —Ä—ã–±—É 2‚Äì3 —Ä–∞–∑–∞ –∏ –≥–æ—Ä—Å—Ç—å –æ—Ä–µ—Ö–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
            "severe": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –æ–º–µ–≥–∞-3 ‚Äî –æ–±—Å—É–¥–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        },
        "mag": {
            "mild": "–ú–∞–≥–Ω–∏–π –Ω–∞ —É—Ä–æ–≤–Ω–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ —Å–æ–Ω.",
            "moderate": "–°—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å –º–∞–≥–Ω–∏–π –≤–µ—á–µ—Ä–æ–º –∏ —Ç–µ—Ö–Ω–∏–∫–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è.",
            "severe": "–Ø—Ä–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ –º–∞–≥–Ω–∏—è ‚Äî –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å –∏ —Å–Ω–∏–∑–∏—Ç—å —Å—Ç—Ä–µ—Å—Å.",
        },
        "vitd": {
            "mild": "–í–∏—Ç–∞–º–∏–Ω D –ø–æ–∫—Ä—ã—Ç —Å–æ–ª–Ω—Ü–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–∫–∞–º–∏.",
            "moderate": "–ü—Ä–æ–≤–µ—Ä—å 25(OH)D –∏ –¥–æ–±–∞–≤—å –ø—Ä–æ–≥—É–ª–∫–∏/–ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            "severe": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–∞ D ‚Äî –∞–Ω–∞–ª–∏–∑—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–æ–∑–∏—Ä–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã.",
        },
    }
    return mapping[nutrient][level]


def _overall_level(levels: dict[str, str]) -> str:
    rank = {"mild": 0, "moderate": 1, "severe": 2}
    return max(levels.values(), key=lambda value: rank[value])


@router.callback_query(F.data == "quiz:deficits")
async def quiz_deficits_start(c: CallbackQuery) -> None:
    SESSIONS[c.from_user.id] = {
        "quiz": "deficits",
        "idx": 0,
        "scores": {key: 0 for key in _QUESTION_KEYS},
    }
    question, _ = QUESTIONS[0]
    await safe_edit(
        c,
        f"–ö–≤–∏–∑: –¥–µ—Ñ–∏—Ü–∏—Ç—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ ü©∏\n\n–í–æ–ø—Ä–æ—Å 1/{len(QUESTIONS)}:\n{question}",
        _keyboard(0),
    )


@router.callback_query(F.data.regexp(r"^q:deficits:\d+:\d+$"))
async def quiz_deficits_step(c: CallbackQuery) -> None:
    sess = SESSIONS.get(c.from_user.id)
    if not sess or sess.get("quiz") != "deficits":
        await c.answer()
        return

    _, _, idx_s, choice_s = c.data.split(":")
    idx = int(idx_s)
    choice = int(choice_s)

    if idx >= len(QUESTIONS):
        await c.answer()
        return

    answers = QUESTIONS[idx][1]
    if choice < 0 or choice >= len(answers):
        await c.answer()
        return

    scores = answers[choice][1]
    for key, add in zip(_QUESTION_KEYS, scores, strict=False):
        sess["scores"][key] += add

    idx += 1
    if idx >= len(QUESTIONS):
        await _finish_quiz(c)
        return

    question, _ = QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(QUESTIONS)}:\n{question}",
        _keyboard(idx),
    )


async def _finish_quiz(c: CallbackQuery) -> None:
    user_id = c.from_user.id
    sess = SESSIONS.get(user_id)
    if not sess:
        await c.answer()
        return

    scores = sess["scores"]
    levels = {key: _level(value) for key, value in scores.items()}
    level_key = _overall_level(levels)
    level_label = {
        "mild": "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤",
        "moderate": "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤",
        "severe": "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –¥–µ—Ñ–∏—Ü–∏—Ç–æ–≤",
    }[level_key]

    summary = [
        _level_text("omega", levels["omega"]),
        _level_text("mag", levels["mag"]),
        _level_text("vitd", levels["vitd"]),
    ]

    rec_codes = ["OMEGA3", "MAG_B6", "D3"]
    context_key = {
        "mild": "deficit_low",
        "moderate": "deficit_mid",
        "severe": "deficit_high",
    }[level_key]
    lines = product_lines(rec_codes, context_key)

    actions = [
        "–î–æ–±–∞–≤—å –æ–º–µ–≥–∞-3 (—Ä—ã–±–∞/–æ—Ä–µ—Ö–∏) –º–∏–Ω–∏–º—É–º 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.",
        "–ü–µ–π –º–∞–≥–Ω–∏–π –≤–µ—á–µ—Ä–æ–º –∫—É—Ä—Å–æ–º 4‚Äì6 –Ω–µ–¥–µ–ª—å –∏ —Å–ª–µ–¥–∏ –∑–∞ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ–º.",
        "–ü—Ä–æ–≤–µ—Ä—å –≤–∏—Ç–∞–º–∏–Ω D —Ä–∞–∑ –≤ 6 –º–µ—Å—è—Ü–µ–≤ –∏ –¥–µ—Ä–∂–∏ –ø—Ä–æ–≥—É–ª–∫–∏ –¥–Ω—ë–º.",
    ]
    plan_payload = {
        "title": "–ü–ª–∞–Ω: –¥–µ—Ñ–∏—Ü–∏—Ç—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤",
        "context": "deficits",
        "context_name": "–î–µ—Ñ–∏—Ü–∏—Ç—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤",
        "level": level_label,
        "products": rec_codes,
        "lines": lines,
        "actions": actions,
        "notes": ("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –∑–∞–º–µ–Ω—è—é—Ç –∞–Ω–∞–ª–∏–∑—ã –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞.\n" + "\n".join(summary)),
        "order_url": settings.velavie_url,
    }

    total_score = sum(scores.values())

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, user_id, c.from_user.username)
        await set_last_plan(session, user_id, plan_payload)
        await events_repo.log(
            session,
            user_id,
            "quiz_finish",
            {
                "quiz": "deficits",
                "scores": scores,
                "levels": levels,
                "overall": level_key,
            },
        )
        await quiz_results_repo.save(
            session,
            user_id=user_id,
            quiz_name="deficits",
            score=total_score,
            tags={"levels": levels, "overall": level_key},
        )
        await commit_safely(session)

    cards = pick_for_context("deficit", level_key, rec_codes)
    await send_product_cards(
        c,
        f"–ò—Ç–æ–≥: {level_label}",
        cards,
        bullets=actions,
        headline="\n".join(summary),
        back_cb="quiz:menu",
    )

    SESSIONS.pop(user_id, None)
