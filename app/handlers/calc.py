import re

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message

from app.catalog.api import product_meta
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import send_product_cards
from app.keyboards import kb_back_home, kb_calc_menu
from app.reco import CTX, product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan

router = Router()

MSD_INPUT_RE = re.compile(r"^\s*(?P<height>\d{2,3})\s*(?P<sex>[–ú–º–ñ–∂])\s*$")

MSD_PROMPT = "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–≤–æ–¥. –ü—Ä–∏–º–µ—Ä: <code>165 –ñ</code>." "\n–£–∫–∞–∂–∏ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –∏ –ø–æ–ª (–ú/–ñ)."

# --- –ù–∞–±–æ—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ–¥ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ---


def msd_recommendations():
    """
    –ò–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (MSD): –º–µ—Ç–∞–±–æ–ª–∏–∑–º + –º–∏–∫—Ä–æ–±–∏–æ–º.
    """
    return ["OMEGA3", "TEO_GREEN"]


def _cards_with_overrides(codes: list[str], context_key: str) -> list[dict]:
    overrides = CTX.get(context_key, {})
    cards: list[dict] = []
    for code in codes:
        meta = product_meta(code)
        if not meta:
            continue
        cards.append(
            {
                "code": meta["code"],
                "name": meta.get("name", meta["code"]),
                "short": meta.get("short", ""),
                "props": meta.get("props", []),
                "images": meta.get("images", []),
                "order_url": meta.get("order_url"),
                "helps_text": overrides.get(code),
            }
        )
    return cards


# --- –ú–µ–Ω—é ---


@router.callback_query(F.data == "calc:menu")
async def calc_menu(c: CallbackQuery):
    await c.answer()
    await c.message.edit_text("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä—ã ‚Äî –≤—ã–±–µ—Ä–∏ —Ä–∞—Å—á—ë—Ç:", reply_markup=kb_calc_menu())


# --- MSD (–∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –ø–æ —Ä–æ—Å—Ç—É) ---


@router.callback_query(F.data == "calc:msd")
async def calc_msd(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"calc": "msd"}
    await c.answer()
    await c.message.edit_text(
        "–í–≤–µ–¥–∏ —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö –∏ –ø–æ–ª (–ú/–ñ), –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>165 –ñ</code>",
        reply_markup=kb_back_home("calc:menu"),
    )


async def _process_msd(message: Message) -> None:
    text = (message.text or "").strip()
    match = MSD_INPUT_RE.fullmatch(text)
    if not match:
        await message.answer(MSD_PROMPT, reply_markup=kb_back_home("calc:menu"))
        return

    height_cm = int(match.group("height"))
    sex = match.group("sex")
    height_m = height_cm / 100.0
    coeff = 23.0 if sex.lower().startswith("–º") else 21.5
    ideal = round(height_m * height_m * coeff, 1)

    rec_codes = msd_recommendations()
    cards = _cards_with_overrides(rec_codes, "msd")
    lines = product_lines(rec_codes, "msd")
    bullets = [
        "–ë–µ–ª–æ–∫ –≤ –∫–∞–∂–¥–æ–º –ø—Ä–∏—ë–º–µ –ø–∏—â–∏ (1.2‚Äì1.6 –≥/–∫–≥).",
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∫–ª–µ—Ç—á–∞—Ç–∫–∞ (TEO GREEN) + –≤–æ–¥–∞ 30‚Äì35 –º–ª/–∫–≥.",
        "30 –º–∏–Ω—É—Ç —Ö–æ–¥—å–±—ã + 2 —Å–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é.",
    ]
    notes = "–¶–µ–ª—å ‚Äî –±–∞–ª–∞–Ω—Å –º—ã—à—Ü –∏ –∂–∏—Ä–∞. –î–µ–ª–∞–π –∑–∞–º–µ—Ä—ã —Ä–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏."

    plan_payload = {
        "title": "–ü–ª–∞–Ω: –ò–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å (MSD)",
        "context": "msd",
        "context_name": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä MSD",
        "level": None,
        "products": rec_codes,
        "lines": lines,
        "actions": bullets,
        "notes": notes,
        "order_url": settings.velavie_url,
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, message.from_user.id, message.from_user.username)
        await set_last_plan(session, message.from_user.id, plan_payload)
        await events_repo.log(
            session,
            message.from_user.id,
            "calc_finish",
            {"calc": "msd", "ideal_weight": ideal},
        )
        await commit_safely(session)

    headline = (
        f"–û—Ä–∏–µ–Ω—Ç–∏—Ä –ø–æ —Ñ–æ—Ä–º—É–ª–µ MSD: <b>{ideal} –∫–≥</b>." "\n–§–æ—Ä–º—É–ª–∞ ‚Äî —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä. –§–æ–∫—É—Å –Ω–∞ —Å–æ—Å—Ç–∞–≤–µ —Ç–µ–ª–∞ (–º—ã—à—Ü—ã ‚â† –∂–∏—Ä)."
    )
    await send_product_cards(
        message,
        "–ò—Ç–æ–≥: –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–µ—Å –ø–æ MSD",
        cards,
        headline=headline,
        bullets=bullets,
        back_cb="calc:menu",
    )
    SESSIONS.pop(message.from_user.id, None)


@router.message(F.text)
async def handle_calc_message(message: Message):
    sess = SESSIONS.get(message.from_user.id)
    if not sess:
        return

    if sess.get("calc_engine") == "core":
        return

    calc_kind = sess.get("calc")
    if calc_kind == "msd":
        await _process_msd(message)
