from aiogram import Router, F
from aiogram.types import CallbackQuery

from app.keyboards import kb_buylist_pdf
from app.storage import SESSIONS, save_event, set_last_plan, get_user
from app.utils_media import send_product_album
from app.reco import product_lines
from app.config import settings

router = Router()

ENERGY_QUESTIONS = [
    ("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∏—à—å –æ–±—ã—á–Ω–æ?", [
     ("8+ —á", 0), ("6‚Äì7 —á", 2), ("< 6 —á", 4)]),
    ("–ï—Å—Ç—å ¬´—Ç—É–º–∞–Ω –≤ –≥–æ–ª–æ–≤–µ¬ª –∏ —Å–ª–æ–∂–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è?",
     [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–¢—è–≥–∞ –∫ —Å–ª–∞–¥–∫–æ–º—É/–±—ã—Å—Ç—Ä—ã–º –ø–µ—Ä–µ–∫—É—Å–∞–º?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–•–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏/–Ω–æ–≥–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–î–æ–ª–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–æ–∫/–±–æ–ª–µ–∑–Ω–∏?",
     [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder
    _, answers = ENERGY_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:energy:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


@router.callback_query(F.data == "quiz:energy")
async def quiz_energy_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "energy", "idx": 0, "score": 0}
    qtext, _ = ENERGY_QUESTIONS[0]
    await c.message.edit_text(
        f"–¢–µ—Å—Ç —ç–Ω–µ—Ä–≥–∏–∏ ‚ö°\n\n–í–æ–ø—Ä–æ—Å 1/{len(ENERGY_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(0),
    )


@router.callback_query(F.data.regexp(r"^q:energy:\d+:\d+$"))
async def quiz_energy_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "energy":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(ENERGY_QUESTIONS):
        total = sess["score"]

        if total <= 5:
            level = "–ù–æ—Ä–º–∞"
            rec_codes = ["OMEGA3", "VITEN"]
            ctx = "energy_norm"
        elif total <= 10:
            level = "–õ—ë–≥–∫–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
            rec_codes = ["T8_BLEND", "VITEN", "TEO_GREEN"]
            ctx = "energy_light"
        else:
            level = "–í—ã—Ä–∞–∂–µ–Ω–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å"
            rec_codes = ["T8_EXTRA", "VITEN", "MOBIO"]
            ctx = "energy_high"

        await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–õ–æ–∂–∏—Ç—å—Å—è –¥–æ 23:00 –∏ —Å–ø–∞—Ç—å 7‚Äì9 —á–∞—Å–æ–≤.",
            "10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ (–±–∞–ª–∫–æ–Ω/—É–ª–∏—Ü–∞).",
            "30 –º–∏–Ω—É—Ç –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ]
        notes = "–°–ª–µ–¥–∏ –∑–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π: 30‚Äì35 –º–ª –≤–æ–¥—ã/–∫–≥. –£–∂–∏–Ω ‚Äî –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞."

        await set_last_plan(
            c.from_user.id,
            {
                "title": "–ü–ª–∞–Ω: –≠–Ω–µ—Ä–≥–∏—è",
                "context": "energy",
                "context_name": "–≠–Ω–µ—Ä–≥–∏—è",
                "level": level,
                "products": rec_codes[:3],
                "lines": lines,
                "actions": actions,
                "notes": notes,
                "order_url": settings.VILAVI_ORDER_NO_REG,
            }
        )

        msg = [
            f"–ò—Ç–æ–≥: <b>{level}</b>\n",
            "–ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è:",
            "‚Ä¢ –°–æ–Ω –¥–æ 23:00, 7‚Äì9 —á",
            "‚Ä¢ 10 –º–∏–Ω —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞",
            "‚Ä¢ 30 –º–∏–Ω –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã\n",
            "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
        ]
        await c.message.answer("\n".join(msg), reply_markup=kb_buylist_pdf("quiz:energy", rec_codes[:3]))

        profile = await get_user(c.from_user.id)
        await save_event(
            c.from_user.id,
            profile.source if profile else None,
            "quiz_finish",
            {"quiz": "energy", "score": total, "level": level},
        )
        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = ENERGY_QUESTIONS[idx]
    await c.message.edit_text(
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(ENERGY_QUESTIONS)}:\n{qtext}",
        reply_markup=kb_quiz_q(idx),
    )
