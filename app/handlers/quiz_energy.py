from aiogram import F, Router
from aiogram.types import CallbackQuery

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, set_last_plan

router = Router()

ENERGY_QUESTIONS = [
    ("–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —Å–ø–∏—à—å –æ–±—ã—á–Ω–æ?", [("8+ —á", 0), ("6‚Äì7 —á", 2), ("< 6 —á", 4)]),
    ("–ï—Å—Ç—å ¬´—Ç—É–º–∞–Ω –≤ –≥–æ–ª–æ–≤–µ¬ª –∏ —Å–ª–æ–∂–Ω–æ —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è?", [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–¢—è–≥–∞ –∫ —Å–ª–∞–¥–∫–æ–º—É/–±—ã—Å—Ç—Ä—ã–º –ø–µ—Ä–µ–∫—É—Å–∞–º?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–•–æ–ª–æ–¥–Ω—ã–µ —Ä—É–∫–∏/–Ω–æ–≥–∏ –±–µ–∑ –ø—Ä–∏—á–∏–Ω—ã?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–ß–∞—Å—Ç–æ", 4)]),
    ("–î–æ–ª–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å—Å—è –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–æ–∫/–±–æ–ª–µ–∑–Ω–∏?", [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 2), ("–î–∞", 4)]),
]


def kb_quiz_q(idx: int):
    from aiogram.utils.keyboard import InlineKeyboardBuilder

    _, answers = ENERGY_QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for label, score in answers:
        kb.button(text=label, callback_data=f"q:energy:{idx}:{score}")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home")
    kb.adjust(1, 1, 1, 1)
    return kb.as_markup()


def _energy_outcome(total: int) -> tuple[str, str, str, list[str]]:
    if total <= 5:
        return (
            "mild",
            "\u042d\u043d\u0435\u0440\u0433\u0438\u044f \u0432 \u043d\u043e\u0440\u043c\u0435",
            "energy_norm",
            ["T8_BLEND", "OMEGA3", "VITEN"],
        )
    if total <= 10:
        return (
            "moderate",
            "\u041b\u0451\u0433\u043a\u0430\u044f \u0443\u0441\u0442\u0430\u043b\u043e\u0441\u0442\u044c",
            "energy_light",
            ["T8_BLEND", "VITEN", "TEO_GREEN"],
        )
    return (
        "severe",
        (
            "\u0412\u044b\u0440\u0430\u0436\u0435\u043d\u043d\u0430\u044f "
            "\u0443\u0441\u0442\u0430\u043b\u043e\u0441\u0442\u044c"
        ),
        "energy_high",
        ["T8_EXTRA", "VITEN", "MOBIO"],
    )


@router.callback_query(F.data == "quiz:energy")
async def quiz_energy_start(c: CallbackQuery):
    SESSIONS[c.from_user.id] = {"quiz": "energy", "idx": 0, "score": 0}
    qtext, _ = ENERGY_QUESTIONS[0]
    await safe_edit(
        c,
        f"–¢–µ—Å—Ç —ç–Ω–µ—Ä–≥–∏–∏ ‚ö°\n\n–í–æ–ø—Ä–æ—Å 1/{len(ENERGY_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(0),
    )


@router.callback_query(F.data.regexp(r"^q:energy:\d+:\d+$"))
async def quiz_energy_step(c: CallbackQuery):
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "energy":
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(ENERGY_QUESTIONS):
        total = sess["score"]
        level_key, level_label, ctx, rec_codes = _energy_outcome(total)
        lines = product_lines(rec_codes[:3], ctx)

        actions = [
            "–õ–æ–∂–∏—Ç—å—Å—è –¥–æ 23:00 –∏ —Å–ø–∞—Ç—å 7‚Äì9 —á–∞—Å–æ–≤.",
            "10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ (–±–∞–ª–∫–æ–Ω/—É–ª–∏—Ü–∞).",
            "30 –º–∏–Ω—É—Ç –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ]
        notes = "–°–ª–µ–¥–∏ –∑–∞ –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–µ–π: 30‚Äì35 –º–ª –≤–æ–¥—ã/–∫–≥. –£–∂–∏–Ω ‚Äî –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞."

        plan_payload = {
            "title": "–ü–ª–∞–Ω: –≠–Ω–µ—Ä–≥–∏—è",
            "context": "energy",
            "context_name": "–≠–Ω–µ—Ä–≥–∏—è",
            "level": level_label,
            "products": rec_codes[:3],
            "lines": lines,
            "actions": actions,
            "notes": notes,
            "order_url": settings.VILAVI_ORDER_NO_REG,
        }

        async with session_scope() as session:
            await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
            await set_last_plan(session, c.from_user.id, plan_payload)
            await events_repo.log(
                session,
                c.from_user.id,
                "quiz_finish",
                {"quiz": "energy", "score": total, "level": level_label},
            )
            await session.commit()

        cards = pick_for_context("energy", level_key, rec_codes[:3])
        await send_product_cards(
            c,
            f"–ò—Ç–æ–≥: {level_label}",
            cards,
        )

        SESSIONS.pop(c.from_user.id, None)
        return

    qtext, _ = ENERGY_QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(ENERGY_QUESTIONS)}:\n{qtext}",
        kb_quiz_q(idx),
    )
