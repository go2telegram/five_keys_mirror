# app/handlers/notify.py
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from app.storage import USERS
from app.ethics import ethics_validator, EthicsViolation

router = Router()


@router.message(Command("notify_on"))
async def notify_on(m: Message):
    try:
        ethics_validator.ensure_allowed(
            "record_opt_in_status",
            details={"user_id": m.from_user.id, "enabled": True},
        )
    except EthicsViolation:
        await m.answer("‚ö†Ô∏è –ù–µ –º–æ–≥—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return

    USERS.setdefault(m.from_user.id, {})["subs"] = True
    await m.answer("üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã. –ë—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å 1‚Äì2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é.")


@router.message(Command("notify_off"))
async def notify_off(m: Message):
    try:
        ethics_validator.ensure_allowed(
            "record_opt_in_status",
            details={"user_id": m.from_user.id, "enabled": False},
        )
    except EthicsViolation:
        await m.answer("‚ö†Ô∏è –ù–µ –º–æ–≥—É –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª–∏—Ç–∏–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")
        return

    USERS.setdefault(m.from_user.id, {})["subs"] = False
    await m.answer("üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã. –í–∫–ª—é—á–∏—Ç—å —Å–Ω–æ–≤–∞: /notify_on")


@router.message(Command("notify"))
async def notify_help(m: Message):
    subs = USERS.get(m.from_user.id, {}).get("subs")
    status = "–≤–∫–ª—é—á–µ–Ω—ã" if subs else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
    await m.answer(
        f"–°–µ–π—á–∞—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {status}.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /notify_on ‚Äî –≤–∫–ª—é—á–∏—Ç—å\n"
        "‚Ä¢ /notify_off ‚Äî –≤—ã–∫–ª—é—á–∏—Ç—å"
    )
