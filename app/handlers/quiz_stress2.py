"""Extended stress resilience quiz."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan
from app.utils.premium_cta import send_premium_cta

router = Router(name="quiz_stress2")

QUESTIONS: list[tuple[str, list[tuple[str, int]]]] = [
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—à—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –≤—ã–≥–æ—Ä–∞–Ω–∏–µ –∫ –∫–æ–Ω—Ü—É –¥–Ω—è?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞", 2)],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–Ω–æ–º –∏–∑-–∑–∞ –º—ã—Å–ª–µ–π –∏–ª–∏ —Ç—Ä–µ–≤–æ–≥–∏?",
        [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–î–∞", 2)],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å —Å–∫–∞—á–∫–∏ –∞–ø–ø–µ—Ç–∏—Ç–∞ –∏–∑-–∑–∞ —Å—Ç—Ä–µ—Å—Å–∞?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–£–¥–∞–µ—Ç—Å—è –ª–∏ —É–¥–µ–ª—è—Ç—å –≤—Ä–µ–º—è –ø—Ä–æ–≥—É–ª–∫–∞–º –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ?",
        [("–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", 0), ("1‚Äì2 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é", 1), ("–ü–æ—á—Ç–∏ –Ω–µ—Ç", 2)],
    ),
    (
        "–î–µ–ª–∞–µ—à—å –ª–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∏–ª–∏ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ (–π–æ–≥–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è)?",
        [("–†–µ–≥—É–ª—è—Ä–Ω–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ü–æ–∫–∞ –Ω–µ—Ç", 2)],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –≤—Å–ø—ã—à–∫–∏ —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–ª–∏ —Å–ª–µ–∑–ª–∏–≤–æ—Å—Ç–∏?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ –∑–∞–∂–∏–º—ã –≤ –ø–ª–µ—á–∞—Ö/—à–µ–µ –∏–ª–∏ –≥–æ–ª–æ–≤–Ω—ã–µ –±–æ–ª–∏ –æ—Ç –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–°–∫–æ–ª—å–∫–æ –∫–æ—Ñ–µ–∏–Ω–∞ –∏–ª–∏ —Å—Ç–∏–º—É–ª—è—Ç–æ—Ä–æ–≤ –≤ –¥–µ–Ω—å?",
        [("0‚Äì1 –ø–æ—Ä—Ü–∏—è", 0), ("2‚Äì3", 1), ("4+", 2)],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –±–µ—Ä–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–∞—É–∑—ã/–ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è?",
        [("–ö–∞–∂–¥—ã–π —á–∞—Å", 0), ("2‚Äì3 —Ä–∞–∑–∞", 1), ("–†–µ–¥–∫–æ", 2)],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ –æ—â—É—â–µ–Ω–∏–µ, —á—Ç–æ –∏–º–º—É–Ω–∏—Ç–µ—Ç –ø—Ä–æ—Å–µ–¥–∞–µ—Ç –Ω–∞ —Ñ–æ–Ω–µ —Å—Ç—Ä–µ—Å—Å–∞?",
        [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–î–∞", 2)],
    ),
    (
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Å—Ç–∞–±–∏–ª—å–Ω—ã–º –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É—Ç—Ä–æ–º?",
        [("–°—Ç–∞–±–∏–ª—å–Ω–æ–µ", 0), ("–ü–ª–∞–≤–∞–µ—Ç", 1), ("–°–∏–ª—å–Ω—ã–µ –ø–µ—Ä–µ–ø–∞–¥—ã", 2)],
    ),
    (
        "–ü–æ–ª—É—á–∞–µ—Ç—Å—è –ª–∏ –æ–±—â–∞—Ç—å—Å—è —Å –±–ª–∏–∑–∫–∏–º–∏/–ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–µ–≥—É–ª—è—Ä–Ω–æ?",
        [("–î–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ü–æ—á—Ç–∏ –Ω–µ—Ç", 2)],
    ),
]


def _keyboard(idx: int) -> InlineKeyboardMarkup:
    _, answers = QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for _, (label, value) in enumerate(answers):
        kb.button(text=label, callback_data=f"q:stress2:{idx}:{value}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="quiz:menu")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 2)
    return kb.as_markup()


def _level(score: int) -> tuple[str, str, str]:
    if score <= 8:
        return "mild", "–°—Ç—Ä–µ—Å—Å –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º", "stress_ok"
    if score <= 16:
        return "moderate", "–ù—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Ä–∞–∑–≥—Ä—É–∑–∫–∞", "stress_mid"
    return "severe", "–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞", "stress_high"


@router.callback_query(F.data == "quiz:stress2")
async def quiz_stress2_start(c: CallbackQuery) -> None:
    SESSIONS[c.from_user.id] = {"quiz": "stress2", "idx": 0, "score": 0}
    question, _ = QUESTIONS[0]
    await safe_edit(
        c,
        f"–°—Ç—Ä–µ—Å—Å 2.0 üßò\n\n–í–æ–ø—Ä–æ—Å 1/{len(QUESTIONS)}:\n{question}",
        _keyboard(0),
    )


@router.callback_query(F.data.regexp(r"^q:stress2:\d+:\d+$"))
async def quiz_stress2_step(c: CallbackQuery) -> None:
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "stress2":
        await c.answer()
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(QUESTIONS):
        await _finish_quiz(c)
        return

    question, _ = QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(QUESTIONS)}:\n{question}",
        _keyboard(idx),
    )


async def _finish_quiz(c: CallbackQuery) -> None:
    user_id = c.from_user.id
    sess = SESSIONS.pop(user_id, None)
    if not sess:
        await c.answer()
        return

    total = sess.get("score", 0)
    level_key, level_label, ctx = _level(total)

    rec_codes = ["VITEN", "OMEGA3", "TEO_GREEN"]
    lines = product_lines(rec_codes, ctx)

    actions = [
        "–î—ã—Ö–∞–Ω–∏–µ 4-7-8 –ø–æ 5 –º–∏–Ω—É—Ç –≤–µ—á–µ—Ä–æ–º.",
        "–£—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç: 10‚Äì15 –º–∏–Ω—É—Ç —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è.",
        "30 –º–∏–Ω—É—Ç –ø—Ä–æ–≥—É–ª–∫–∏ –∏–ª–∏ —Ä–∞—Å—Ç—è–∂–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.",
    ]
    notes = "–ù–∞–ø–æ–º–∏–Ω–∞–π —Å–µ–±–µ –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç –∏ —Å–Ω–∏–∂–∞–π –∫–æ—Ñ–µ–∏–Ω –ø–æ—Å–ª–µ –æ–±–µ–¥–∞."

    plan_payload = {
        "title": "–ü–ª–∞–Ω: —Å—Ç—Ä–µ—Å—Å 2.0",
        "context": "stress",
        "context_name": "–°—Ç—Ä–µ—Å—Å 2.0",
        "level": level_label,
        "products": rec_codes,
        "lines": lines,
        "actions": actions,
        "notes": notes,
        "order_url": settings.velavie_url,
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, user_id, c.from_user.username)
        await set_last_plan(session, user_id, plan_payload)
        await events_repo.log(
            session,
            user_id,
            "quiz_finish",
            {"quiz": "stress2", "score": total, "level": level_label},
        )
        await commit_safely(session)

    cards = pick_for_context("stress", level_key, rec_codes)
    await send_product_cards(
        c,
        f"–ò—Ç–æ–≥: {level_label}",
        cards,
        bullets=actions,
        headline=notes,
        back_cb="quiz:menu",
    )
    await send_premium_cta(
        c,
        "üîì –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –ü—Ä–µ–º–∏—É–º",
        source="quiz:stress2",
    )
