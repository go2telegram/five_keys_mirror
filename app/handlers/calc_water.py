"""Water balance calculator flow."""

from __future__ import annotations

from typing import Literal

from aiogram import F, Router
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import send_product_cards
from app.keyboards import kb_back_home
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan

router = Router(name="calc_water")

_ACTIVITY_LABELS: dict[str, str] = {
    "low": "–ù–∏–∑–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "moderate": "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
    "high": "–í—ã—Å–æ–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å",
}

_CLIMATE_LABELS: dict[str, str] = {
    "temperate": "–£–º–µ—Ä–µ–Ω–Ω—ã–π –∫–ª–∏–º–∞—Ç",
    "hot": "–ñ–∞—Ä–∫–∏–π –∫–ª–∏–º–∞—Ç",
}


def _activity_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for code in ("low", "moderate", "high"):
        kb.button(text=_ACTIVITY_LABELS[code], callback_data=f"calc:water:activity:{code}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calc:menu")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 2)
    return kb


def _climate_keyboard() -> InlineKeyboardBuilder:
    kb = InlineKeyboardBuilder()
    for code in ("temperate", "hot"):
        kb.button(text=_CLIMATE_LABELS[code], callback_data=f"calc:water:climate:{code}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="calc:menu")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 2)
    return kb


@router.callback_query(F.data == "calc:water")
async def start_water_calc(c: CallbackQuery) -> None:
    SESSIONS[c.from_user.id] = {"calc": "water", "step": "weight"}
    await c.answer()
    await c.message.edit_text(
        "–í–≤–µ–¥–∏ –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>72</code>",
        reply_markup=kb_back_home("calc:menu"),
    )


async def handle_message(message: Message) -> bool:
    sess = SESSIONS.get(message.from_user.id)
    if not sess or sess.get("calc") != "water":
        return False

    step = sess.get("step")
    if step != "weight":
        return True

    text = (message.text or "").replace(",", ".").strip()
    try:
        weight = float(text)
    except ValueError:
        weight = 0.0

    if weight <= 0 or weight > 300:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–µ—Å. –ü—Ä–∏–º–µ—Ä: <code>72.5</code>",
            reply_markup=kb_back_home("calc:menu"),
        )
        return True

    sess["weight"] = weight
    sess["step"] = "activity"
    kb = _activity_keyboard()
    await message.answer(
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:",
        reply_markup=kb.as_markup(),
    )
    return True


def _compute_total(
    weight: float,
    activity: Literal["low", "moderate", "high"],
    climate: Literal["temperate", "hot"],
) -> tuple[float, int]:
    base = weight * 0.03
    activity_add = {"low": 0.0, "moderate": 0.35, "high": 0.6}[activity]
    climate_add = {"temperate": 0.0, "hot": 0.7}[climate]
    total = round(base + activity_add + climate_add, 1)
    glasses = max(1, round(total / 0.25))
    return total, glasses


def _headline(total: float, glasses: int) -> str:
    return f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–Ω–µ–≤–Ω–∞—è –Ω–æ—Ä–º–∞: <b>{total} –ª</b>" f" (~{glasses} —Å—Ç–∞–∫–∞–Ω–æ–≤ –ø–æ 250 –º–ª)."


def _bullets(activity: str, climate: str) -> list[str]:
    hints = {
        "low": "–î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫—É—é —Ä–∞–∑–º–∏–Ω–∫—É –¥–Ω—ë–º –∏ —à–∞–≥–∏ –∫ –≤–µ—á–µ—Ä—É.",
        "moderate": "–î–µ—Ä–∂–∏ –±—É—Ç—ã–ª–∫—É –≤–æ–¥—ã –ø–æ–¥ —Ä—É–∫–æ–π –∏ –ø–µ–π –ø–æ –≥–ª–æ—Ç–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å.",
        "high": "–ü–æ–ø–æ–ª–Ω—è–π –≤–æ–¥—É –¥–æ –∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –¥–æ–±–∞–≤—å —ç–ª–µ–∫—Ç—Ä–æ–ª–∏—Ç—ã.",
    }
    climate_hint = {
        "temperate": "–°—Ç–∞—Ä—Ç—É–π —É—Ç—Ä–æ —Å–æ —Å—Ç–∞–∫–∞–Ω–∞ –≤–æ–¥—ã –Ω–∞—Ç–æ—â–∞–∫.",
        "hot": "–í –∂–∞—Ä—É –¥–æ–±–∞–≤–ª—è–π —â–µ–ø–æ—Ç–∫—É —Å–æ–ª–∏/–ª–∏–º–æ–Ω –∫ –æ–¥–Ω–æ–º—É-–¥–≤—É–º —Å—Ç–∞–∫–∞–Ω–∞–º.",
    }
    return [
        "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –±—É—Ç—ã–ª–∫—É —Å –¥–µ–ª–µ–Ω–∏—è–º–∏.",
        hints.get(activity, "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —Ä–æ–≤–Ω—ã–π –≤–æ–¥–Ω—ã–π —Ä–µ–∂–∏–º –¥–Ω—ë–º."),
        climate_hint.get(climate, "–ü–µ–π –ø–æ 2-3 –±–æ–ª—å—à–∏—Ö —Å—Ç–∞–∫–∞–Ω–∞ –º–µ–∂–¥—É –ø—Ä–∏—ë–º–∞–º–∏ –ø–∏—â–∏."),
    ]


async def _finalize(c: CallbackQuery, total: float, glasses: int) -> None:
    user_id = c.from_user.id
    sess = SESSIONS.get(user_id, {})
    weight = float(sess.get("weight", 0.0))
    activity = sess.get("activity", "moderate")
    climate = sess.get("climate", "temperate")

    rec_codes = ["TEO_GREEN", "OMEGA3"]
    cards = pick_for_context("calc_water", None, rec_codes)
    bullets = _bullets(activity, climate)

    plan_payload = {
        "title": "–ü–ª–∞–Ω: –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å",
        "context": "calc_water",
        "context_name": "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–æ–¥–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞",
        "level": None,
        "products": rec_codes,
        "lines": [
            f"‚Äî –ü–∏—Ç—å {total} –ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å (~{glasses} —Å—Ç–∞–∫–∞–Ω–æ–≤)",
            "‚Äî –û–±–Ω–æ–≤–ª—è—Ç—å –±—É—Ç—ã–ª–∫—É –∫–∞–∂–¥—ã–µ 2‚Äì3 —á–∞—Å–∞",
        ],
        "actions": bullets,
        "notes": ("–°–ª–µ–¥–∏ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –Ω–æ—Ä–º—É —Å –≤—Ä–∞—á–æ–º –ø—Ä–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö."),
        "order_url": settings.velavie_url,
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, user_id, c.from_user.username)
        await set_last_plan(session, user_id, plan_payload)
        await events_repo.log(
            session,
            user_id,
            "calc_finish",
            {
                "calc": "water",
                "liters": total,
                "glasses": glasses,
                "activity": activity,
                "climate": climate,
                "weight": weight,
            },
        )
        await commit_safely(session)

    await send_product_cards(
        c,
        "–ò—Ç–æ–≥: –≤–æ–¥–Ω—ã–π –±–∞–ª–∞–Ω—Å",
        cards,
        headline=_headline(total, glasses),
        bullets=bullets,
        back_cb="calc:menu",
    )
    SESSIONS.pop(user_id, None)


@router.callback_query(F.data.startswith("calc:water:activity:"))
async def choose_activity(c: CallbackQuery) -> None:
    sess = SESSIONS.get(c.from_user.id)
    if not sess or sess.get("calc") != "water":
        await c.answer()
        return

    activity = c.data.split(":")[-1]
    if activity not in _ACTIVITY_LABELS:
        await c.answer()
        return

    sess["activity"] = activity
    sess["step"] = "climate"
    await c.answer()
    await c.message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–ª–∏–º–∞—Ç:",
        reply_markup=_climate_keyboard().as_markup(),
    )


@router.callback_query(F.data.startswith("calc:water:climate:"))
async def choose_climate(c: CallbackQuery) -> None:
    sess = SESSIONS.get(c.from_user.id)
    if not sess or sess.get("calc") != "water":
        await c.answer()
        return

    climate = c.data.split(":")[-1]
    if climate not in _CLIMATE_LABELS:
        await c.answer()
        return

    weight = float(sess.get("weight") or 0.0)
    activity = sess.get("activity", "moderate")
    sess["climate"] = climate
    if weight <= 0:
        await c.answer()
        await c.message.answer(
            "–í–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω. –ó–∞–ø—É—Å—Ç–∏ —Ä–∞—Å—á—ë—Ç –∑–∞–Ω–æ–≤–æ.",
            reply_markup=kb_back_home("calc:menu"),
        )
        SESSIONS.pop(c.from_user.id, None)
        return

    total, glasses = _compute_total(weight, activity, climate)  # type: ignore[arg-type]
    await _finalize(c, total, glasses)


__all__ = ["router", "handle_message"]
