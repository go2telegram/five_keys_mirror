from datetime import datetime
from zoneinfo import ZoneInfo

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.config import settings
from app.db.session import compat_session, session_scope
from app.keyboards import kb_back_home
from app.repo import events as events_repo, subscriptions as subscriptions_repo, users as users_repo
from app.storage import commit_safely
from app.utils import safe_edit_text

router = Router(name="subscription")


def _kb_sub_menu() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    kb.button(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="sub:check")
    if settings.TRIBUTE_LINK_BASIC:
        kb.button(
            text=f"üíé MITO Basic ‚Äî {settings.SUB_BASIC_PRICE}",
            url=settings.TRIBUTE_LINK_BASIC,
        )
    if settings.TRIBUTE_LINK_PRO:
        kb.button(
            text=f"üíé MITO Pro ‚Äî {settings.SUB_PRO_PRICE}",
            url=settings.TRIBUTE_LINK_PRO,
        )
    kb.button(text="‚ÑπÔ∏è –ö–∞–∫ –ø—Ä–æ–¥–ª–∏—Ç—å", callback_data="sub:renew")
    kb.adjust(1)
    markup = kb.as_markup()
    markup.inline_keyboard.extend(kb_back_home("home:main").inline_keyboard)
    return markup


def _kb_sub_renew() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    if settings.TRIBUTE_LINK_BASIC:
        kb.button(
            text=f"üíé MITO Basic ‚Äî {settings.SUB_BASIC_PRICE}",
            url=settings.TRIBUTE_LINK_BASIC,
        )
    if settings.TRIBUTE_LINK_PRO:
        kb.button(
            text=f"üíé MITO Pro ‚Äî {settings.SUB_PRO_PRICE}",
            url=settings.TRIBUTE_LINK_PRO,
        )
    kb.adjust(1)
    for row in kb_back_home("sub:menu").inline_keyboard:
        kb.row(*row)
    return kb.as_markup()


def _format_until(until: datetime) -> str:
    try:
        tz = ZoneInfo(settings.TIMEZONE) if settings.TIMEZONE else ZoneInfo("UTC")
    except Exception:  # pragma: no cover - fallback for invalid tz data
        tz = ZoneInfo("UTC")
    return until.astimezone(tz).strftime("%d.%m.%Y")


@router.callback_query(F.data == "sub:menu")
async def sub_menu(c: CallbackQuery):
    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
        await events_repo.log(session, c.from_user.id, "subscription_menu", {})
        await commit_safely(session)
    await c.answer()
    markup = _kb_sub_menu()
    await safe_edit_text(
        c.message,
        "üíé <b>–ü–æ–¥–ø–∏—Å–∫–∞</b>\n–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ Premium –∏ –∑–∞–∫—Ä—ã—Ç—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º.",
        markup,
    )


@router.callback_query(F.data == "sub:check")
async def sub_check(c: CallbackQuery):
    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
        is_active, sub = await subscriptions_repo.is_active(session, c.from_user.id)
        plan = sub.plan if sub else None
        until = sub.until.isoformat() if sub else None
        await events_repo.log(
            session,
            c.from_user.id,
            "subscription_check",
            {"active": is_active, "plan": plan, "until": until},
        )
        await commit_safely(session)

    await c.answer()
    if is_active and sub:
        until_text = _format_until(sub.until)
        text = f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n–¢–∞—Ä–∏—Ñ: <b>MITO {sub.plan.upper()}</b>\n–î–æ—Å—Ç—É–ø –¥–æ: <b>{until_text}</b>."
        builder = InlineKeyboardBuilder()
        builder.button(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="sub:check")
        builder.button(text="–û—Ç–∫—Ä—ã—Ç—å Premium", callback_data="premium:menu")
        for row in kb_back_home("sub:menu").inline_keyboard:
            builder.row(*row)
        await safe_edit_text(c.message, text, builder.as_markup())
    else:
        await safe_edit_text(
            c.message,
            "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –û–ø–ª–∞—Ç–∏—Ç–µ MITO –≤ Tribute –∏ –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–∞.",
            _kb_sub_menu(),
        )


@router.callback_query(F.data == "sub:renew")
async def sub_renew(c: CallbackQuery):
    await c.answer()
    await safe_edit_text(
        c.message,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ MITO –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.",
        _kb_sub_renew(),
    )
