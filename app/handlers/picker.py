# app/handlers/picker.py
import logging

from aiogram import F, Router
from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.links.service import get_register_url
from app.db.session import compat_session, session_scope
from app.keyboards import kb_back_home, kb_buylist_pdf, kb_goal_menu
from app.products import GOAL_MAP, PRODUCTS
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan
from app.utils_media import send_product_album
from app.utils.premium_cta import send_premium_cta
from app.utils import safe_edit_text

LOG = logging.getLogger(__name__)

router = Router()

# ---- –ë–∞–∑–∞ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø–æ —Ü–µ–ª—è–º ----
GOAL_META = {
    "energy": {
        "title": "–ü–ª–∞–Ω: –≠–Ω–µ—Ä–≥–∏—è",
        "context_name": "–≠–Ω–µ—Ä–≥–∏—è",
        "ctx_basic": "energy_light",
        "ctx_pro": "energy_high",
        "actions": [
            "–õ–æ–∂–∏—Ç—å—Å—è –¥–æ 23:00 –∏ —Å–ø–∞—Ç—å 7‚Äì9 —á–∞—Å–æ–≤.",
            "10 –º–∏–Ω—É—Ç —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞ (–±–∞–ª–∫–æ–Ω/—É–ª–∏—Ü–∞).",
            "30 –º–∏–Ω—É—Ç –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ],
        "notes": "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è 30‚Äì35 –º–ª/–∫–≥. –£–∂–∏–Ω ‚Äî –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞.",
        "codes_basic": ["T8_BLEND", "OMEGA3"],
        "codes_pro": ["T8_EXTRA", "VITEN", "MOBIO"],
    },
    "immunity": {
        "title": "–ü–ª–∞–Ω: –ò–º–º—É–Ω–∏—Ç–µ—Ç",
        "context_name": "–ò–º–º—É–Ω–∏—Ç–µ—Ç",
        "ctx_basic": "immunity_mid",
        "ctx_pro": "immunity_low",
        "actions": [
            "–°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º.",
            "–ü—Ä–æ–≥—É–ª–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 30‚Äì40 –º–∏–Ω—É—Ç.",
            "–ë–µ–ª–æ–∫ 1.2‚Äì1.6 –≥/–∫–≥, –æ–≤–æ—â–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ.",
        ],
        "notes": "–í —Å–µ–∑–æ–Ω –ø—Ä–æ—Å—Ç—É–¥: —Ç—ë–ø–ª—ã–µ –Ω–∞–ø–∏—Ç–∫–∏, –≤–ª–∞–∂–Ω–æ—Å—Ç—å 40‚Äì60%, –ø—Ä–æ–º—ã–≤–∞–Ω–∏–µ –Ω–æ—Å–∞.",
        "codes_basic": ["VITEN", "T8_BLEND"],
        "codes_pro": ["VITEN", "T8_BLEND", "D3"],
    },
    "gut": {
        "title": "–ü–ª–∞–Ω: –ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
        "context_name": "–ñ–ö–¢ / –º–∏–∫—Ä–æ–±–∏–æ–º",
        "ctx_basic": "gut_mild",
        "ctx_pro": "gut_high",
        "actions": [
            "–†–µ–≥—É–ª—è—Ä–Ω—ã–π —Ä–µ–∂–∏–º –ø–∏—Ç–∞–Ω–∏—è (–±–µ–∑ ¬´–¥–æ–Ω—ã—à–µ–∫¬ª).",
            "–ö–ª–µ—Ç—á–∞—Ç–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ (TEO GREEN) + –≤–æ–¥–∞ 30‚Äì35 –º–ª/–∫–≥.",
            "–ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π —Å–∞—Ö–∞—Ä –∏ —É–ª—å—Ç—Ä–∞-–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã.",
        ],
        "notes": "–ï—Å–ª–∏ –±—ã–ª–∏ –∞–Ω—Ç–∏–±–∏–æ—Ç–∏–∫–∏ ‚Äî –∫—É—Ä—Å MOBIO –ø–æ–º–æ–∂–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
        "codes_basic": ["TEO_GREEN", "MOBIO"],
        "codes_pro": ["MOBIO", "TEO_GREEN", "OMEGA3"],
    },
    "sleep": {
        "title": "–ü–ª–∞–Ω: –°–æ–Ω",
        "context_name": "–°–æ–Ω",
        "ctx_basic": "sleep_mild",
        "ctx_pro": "sleep_high",
        "actions": [
            "–≠–∫—Ä–∞–Ω-–¥–µ—Ç–æ–∫—Å –∑–∞ 60 –º–∏–Ω—É—Ç –¥–æ —Å–Ω–∞.",
            "–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è —Ç—ë–º–Ω–∞—è —Å–ø–∞–ª—å–Ω—è (18‚Äì20¬∞C, –º–∞—Å–∫–∞/—à—Ç–æ—Ä—ã).",
            "–ö–æ—Ñ–µ–∏–Ω ‚Äî –Ω–µ –ø–æ–∑–∂–µ 16:00, —É–∂–∏–Ω –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞.",
        ],
        "notes": "–ï—Å–ª–∏ —Å–ª–æ–∂–Ω–æ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è ‚Äî –¥—ã—Ö–∞–Ω–∏–µ 4‚Äì7‚Äì8 –∏–ª–∏ —Ç—ë–ø–ª—ã–π –¥—É—à –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
        "codes_basic": ["MAG_B6", "OMEGA3"],
        "codes_pro": ["MAG_B6", "OMEGA3", "D3"],
    },
    "beauty_joint": {
        "title": "–ü–ª–∞–Ω: –ö–æ–∂–∞ / —Å—É—Å—Ç–∞–≤—ã",
        "context_name": "–ö–æ–∂–∞ / —Å—É—Å—Ç–∞–≤—ã",
        "ctx_basic": "energy_norm",
        "ctx_pro": "energy_norm",
        "actions": [
            "–î–æ—Å—Ç–∞—Ç–æ–∫ –±–µ–ª–∫–∞ (‚âà1.4 –≥/–∫–≥) –∏ –∫–æ–ª–ª–∞–≥–µ–Ω–æ–≤—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.",
            "–õ—ë–≥–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ —Å—É—Å—Ç–∞–≤—ã (—Ö–æ–¥—å–±–∞, –ø–ª–∞–≤–∞–Ω–∏–µ).",
            "–°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤ (–∏–¥—ë—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∫–∞–Ω–µ–π).",
        ],
        "notes": "–ë–µ—Ä–µ–≥–∏ —Å–≤—è–∑–∫–∏/—Å—É—Ö–æ–∂–∏–ª–∏—è: —Ä–∞—Å—Ç—è–∂–∫–∞, –±–µ–∑ —Ä–µ–∑–∫–∏—Ö —Å—Ç–∞—Ä—Ç–æ–≤.",
        "codes_basic": ["ERA_MIT_UP", "OMEGA3"],
        "codes_pro": ["ERA_MIT_UP", "OMEGA3", "D3"],
    },
}


def _extend_with_back_home(builder: InlineKeyboardBuilder, back_cb: str) -> InlineKeyboardBuilder:
    for row in kb_back_home(back_cb).inline_keyboard:
        builder.row(*row)
    return builder


async def _safe_edit(c: CallbackQuery, text: str, markup):
    if c.message is None:
        LOG.warning("picker edit called without message")
        return
    try:
        await safe_edit_text(c.message, text, markup)
    except Exception:  # noqa: BLE001 - fallback to a fresh message
        LOG.exception("picker edit failed")
        await c.message.answer(text, reply_markup=markup)


# --- –®–ê–ì 0: –º–µ–Ω—é —Ü–µ–ª–µ–π ---


@router.callback_query(F.data == "pick:menu")
async def pick_menu(c: CallbackQuery):
    await c.answer()
    await _safe_edit(c, "–í—ã–±–µ—Ä–∏ —Ü–µ–ª—å ‚Äî –ø–æ–¥–±–µ—Ä—É –ø—Ä–æ–¥—É–∫—Ç—ã:", kb_goal_menu())


# --- –®–ê–ì 1: —Ü–µ–ª—å ‚Üí –≤–æ–∑—Ä–∞—Å—Ç ---


@router.callback_query(F.data.startswith("pick:goal:"))
async def pick_goal(c: CallbackQuery):
    await c.answer()
    goal_key = c.data.split(":")[-1]
    if goal_key not in GOAL_META:
        await _safe_edit(c, "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —ç—Ç–æ–π —Ü–µ–ª–∏.", kb_back_home())
        return

    SESSIONS.setdefault(c.from_user.id, {})["pick"] = {"goal": goal_key}

    kb = InlineKeyboardBuilder()
    kb.button(text="–î–æ 30", callback_data=f"pick:age:{goal_key}:u30")
    kb.button(text="30‚Äì50", callback_data=f"pick:age:{goal_key}:30_50")
    kb.button(text="50+", callback_data=f"pick:age:{goal_key}:50p")
    _extend_with_back_home(kb, "pick:menu")
    kb.adjust(3, 2)
    await _safe_edit(c, "–í–æ–∑—Ä–∞—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞:", kb.as_markup())


# --- –®–ê–ì 2: –≤–æ–∑—Ä–∞—Å—Ç ‚Üí –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ ---


@router.callback_query(F.data.regexp(r"^pick:age:[a-z_]+:(u30|30_50|50p)$"))
async def pick_age(c: CallbackQuery):
    await c.answer()
    _, _, goal_key, age = c.data.split(":")
    SESSIONS.setdefault(c.from_user.id, {}).setdefault("pick", {})["age"] = age

    kb = InlineKeyboardBuilder()
    kb.button(text="–û—Ñ–∏—Å/–º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π", callback_data=f"pick:life:{goal_key}:{age}:office")
    kb.button(text="–ê–∫—Ç–∏–≤–Ω—ã–π/—Å–ø–æ—Ä—Ç", callback_data=f"pick:life:{goal_key}:{age}:active")
    _extend_with_back_home(kb, f"pick:goal:{goal_key}")
    kb.adjust(2, 2)
    await _safe_edit(c, "–û–±—Ä–∞–∑ –∂–∏–∑–Ω–∏:", kb.as_markup())


# --- –®–ê–ì 3: –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏ ‚Üí —É—Ä–æ–≤–µ–Ω—å ---


@router.callback_query(F.data.regexp(r"^pick:life:[a-z_]+:(u30|30_50|50p):(office|active)$"))
async def pick_life(c: CallbackQuery):
    await c.answer()
    _, _, goal_key, age, life = c.data.split(":")
    SESSIONS.setdefault(c.from_user.id, {}).setdefault("pick", {})["life"] = life

    kb = InlineKeyboardBuilder()
    kb.button(text="üü¢ –ù–æ–≤–∏—á–æ–∫", callback_data=f"pick:lvl:{goal_key}:{age}:{life}:basic")
    kb.button(text="üîµ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data=f"pick:lvl:{goal_key}:{age}:{life}:pro")
    _extend_with_back_home(kb, f"pick:age:{goal_key}:{age}")
    kb.adjust(2, 2)
    await _safe_edit(c, "–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∞:", kb.as_markup())


# --- –®–ê–ì 4: —É—Ä–æ–≤–µ–Ω—å ‚Üí –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ---


@router.callback_query(F.data.regexp(r"^pick:lvl:[a-z_]+:(u30|30_50|50p):(office|active):(basic|pro)$"))
async def pick_level(c: CallbackQuery):
    await c.answer()
    _, _, goal_key, age, life, level = c.data.split(":")
    SESSIONS.setdefault(c.from_user.id, {}).setdefault("pick", {})["level"] = level

    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–µ—Ç", callback_data=f"pick:all:{goal_key}:{age}:{life}:{level}:none")
    kb.button(text="–ê–ª–ª–µ—Ä–≥–∏—è –Ω–∞ —Ç—Ä–∞–≤—ã", callback_data=f"pick:all:{goal_key}:{age}:{life}:{level}:herbs")
    kb.button(text="–í–µ–≥–∞–Ω", callback_data=f"pick:all:{goal_key}:{age}:{life}:{level}:vegan")
    _extend_with_back_home(kb, f"pick:life:{goal_key}:{age}:{life}")
    kb.adjust(3, 2)
    await _safe_edit(c, "–ê–ª–ª–µ—Ä–≥–∏–∏/–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:", kb.as_markup())


# --- –®–ê–ì 5: –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è ‚Üí —Å–µ–∑–æ–Ω ---


@router.callback_query(
    F.data.regexp(r"^pick:all:[a-z_]+:(u30|30_50|50p):(office|active):(basic|pro):(none|herbs|vegan)$")
)
async def pick_allergies(c: CallbackQuery):
    await c.answer()
    _, _, goal_key, age, life, level, allerg = c.data.split(":")
    SESSIONS.setdefault(c.from_user.id, {}).setdefault("pick", {})["allerg"] = allerg

    kb = InlineKeyboardBuilder()
    kb.button(text="–õ–µ—Ç–æ", callback_data=f"pick:season:{goal_key}:{age}:{life}:{level}:{allerg}:summer")
    kb.button(text="–ó–∏–º–∞", callback_data=f"pick:season:{goal_key}:{age}:{life}:{level}:{allerg}:winter")
    kb.button(text="–î—Ä—É–≥–æ–µ", callback_data=f"pick:season:{goal_key}:{age}:{life}:{level}:{allerg}:other")
    _extend_with_back_home(kb, f"pick:lvl:{goal_key}:{age}:{life}:{level}")
    kb.adjust(3, 2)
    await _safe_edit(c, "–°–µ–∑–æ–Ω:", kb.as_markup())


# --- –®–ê–ì 6: —Å–µ–∑–æ–Ω ‚Üí –±—é–¥–∂–µ—Ç ---


@router.callback_query(
    F.data.regexp(
        r"^pick:season:[a-z_]+:(u30|30_50|50p):(office|active):(basic|pro):(none|herbs|vegan):(summer|winter|other)$"
    )
)
async def pick_season(c: CallbackQuery):
    await c.answer()
    _, _, goal_key, age, life, level, allerg, season = c.data.split(":")
    SESSIONS.setdefault(c.from_user.id, {}).setdefault("pick", {})["season"] = season

    kb = InlineKeyboardBuilder()
    kb.button(
        text="üí° –õ–∞–π—Ç (1‚Äì2 –ø–æ–∑.)", callback_data=f"pick:budget:{goal_key}:{age}:{life}:{level}:{allerg}:{season}:lite"
    )
    kb.button(text="‚öñ –°—Ç–∞–Ω–¥–∞—Ä—Ç", callback_data=f"pick:budget:{goal_key}:{age}:{life}:{level}:{allerg}:{season}:std")
    kb.button(text="üöÄ –ü—Ä–æ", callback_data=f"pick:budget:{goal_key}:{age}:{life}:{level}:{allerg}:{season}:pro")
    _extend_with_back_home(kb, f"pick:all:{goal_key}:{age}:{life}:{level}:{allerg}")
    kb.adjust(3, 2)
    await _safe_edit(c, "–ë—é–¥–∂–µ—Ç:", kb.as_markup())


# --- –®–ê–ì 7: —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤—ã–¥–∞—á–∞ ---


@router.callback_query(
    F.data.regexp(
        r"^pick:budget:[a-z_]+:(u30|30_50|50p):(office|active):(basic|pro):(none|herbs|vegan):(summer|winter|other):(lite|std|pro)$"
    )
)
async def pick_finalize(c: CallbackQuery):
    await c.answer()

    _, _, goal_key, age, life, level, allerg, season, budget = c.data.split(":")
    meta = GOAL_META[goal_key]

    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –ø–æ —É—Ä–æ–≤–Ω—é
    if level == "basic":
        rec_codes = meta["codes_basic"].copy()
        ctx = meta["ctx_basic"]
    else:
        rec_codes = meta["codes_pro"].copy()
        ctx = meta["ctx_pro"]

    # –í–æ–∑—Ä–∞—Å—Ç/–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏
    if age == "50p" and "D3" in PRODUCTS and "D3" not in rec_codes:
        rec_codes.append("D3")
    if life == "active" and "OMEGA3" in PRODUCTS and "OMEGA3" not in rec_codes:
        rec_codes.append("OMEGA3")

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
    if allerg == "herbs":
        rec_codes = [c for c in rec_codes if c not in ("TEO_GREEN",)]
    if allerg == "vegan":
        rec_codes = [c for c in rec_codes if c not in ("ERA_MIT_UP", "OMEGA3")]

    # –°–µ–∑–æ–Ω
    if season == "winter" and "D3" in PRODUCTS and "D3" not in rec_codes:
        rec_codes.append("D3")

    # –ë—é–¥–∂–µ—Ç
    if budget == "lite":
        rec_codes = rec_codes[:2]
    elif budget == "std":
        rec_codes = rec_codes[:3]
    # pro ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å—ë

    # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
    if not rec_codes:
        rec_codes = GOAL_MAP.get(goal_key, [])[:2]

    # –§–æ—Ç–æ
    await send_product_album(c.bot, c.message.chat.id, rec_codes[:3])

    # –ö–∞—Ä—Ç–æ—á–∫–∞ –∏ PDF-–ø–ª–∞–Ω
    lines = product_lines(rec_codes[:3], ctx)
    level_label = "–ù–æ–≤–∏—á–æ–∫" if level == "basic" else "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
    age_label = "50+" if age == "50p" else ("30‚Äì50" if age == "30_50" else "–¥–æ 30")
    life_label = "–∞–∫—Ç–∏–≤–Ω—ã–π" if life == "active" else "–æ—Ñ–∏—Å"
    allerg_label = "–Ω–µ—Ç" if allerg == "none" else ("—Ç—Ä–∞–≤—ã" if allerg == "herbs" else "–≤–µ–≥–∞–Ω")
    season_label = "–∑–∏–º–∞" if season == "winter" else ("–ª–µ—Ç–æ" if season == "summer" else "–¥—Ä—É–≥–æ–π")
    budget_label = "–ª–∞–π—Ç" if budget == "lite" else ("—Å—Ç–∞–Ω–¥–∞—Ä—Ç" if budget == "std" else "–ø—Ä–æ")
    desc = (
        f"–≤–æ–∑—Ä–∞—Å—Ç: {age_label}, "
        f"–æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏: {life_label}, "
        f"–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è: {allerg_label}, "
        f"—Å–µ–∑–æ–Ω: {season_label}, "
        f"–±—é–¥–∂–µ—Ç: {budget_label}"
    )

    msg = [
        f"<b>{meta['context_name']}</b> ‚Äî {level_label}\n",
        desc + "\n",
        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n" + "\n".join(lines),
    ]
    reply_markup = kb_buylist_pdf("pick:menu", rec_codes[:3])
    await c.message.answer("".join(msg), reply_markup=reply_markup)
    await send_premium_cta(
        c.message,
        "üíé –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –ø–ª–∞–Ω (AI)",
        source=f"pick:{goal_key}",
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–∞–Ω –¥–ª—è PDF
    actions = meta["actions"]
    notes = meta["notes"]
    if allerg == "herbs":
        notes += " –£—á–∏—Ç—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π –ñ–ö–¢/–∞–ª–ª–µ—Ä–≥–∏–∏: –Ω–∞—á–Ω–∏ —Å –ø–æ–ª–æ–≤–∏–Ω–Ω—ã—Ö –ø–æ—Ä—Ü–∏–π, " "–∏–∑–±–µ–≥–∞–π –æ—Å—Ç—Ä—ã—Ö –±–ª—é–¥ –∏ –∞–ª–∫–æ–≥–æ–ª—è."
    if age == "50p":
        notes += " –°—Ñ–æ–∫—É—Å–∏—Ä—É–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ—Å—Ç—è—Ö/—Å—É—Å—Ç–∞–≤–∞—Ö: –≤–∏—Ç–∞–º–∏–Ω D3 –ø—Ä–∏ –¥–µ—Ñ–∏—Ü–∏—Ç–µ " "–ø–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—é —Å –≤—Ä–∞—á–æ–º."

    plan_payload = {
        "title": meta["title"],
        "context": goal_key,
        "context_name": meta["context_name"],
        "level": f"{level_label}, {desc}",
        "products": rec_codes[:3],
        "lines": lines,
        "actions": actions,
        "notes": notes,
        "order_url": get_register_url(),
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, c.from_user.id, c.from_user.username)
        await set_last_plan(session, c.from_user.id, plan_payload)
        await events_repo.log(
            session,
            c.from_user.id,
            "picker_plan",
            {
                "goal": goal_key,
                "level": level,
                "budget": budget,
                "season": season,
            },
        )
        await commit_safely(session)
