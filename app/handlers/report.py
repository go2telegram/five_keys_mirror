# app/handlers/report.py
import logging
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import BufferedInputFile, CallbackQuery, Message

from app.db.session import compat_session, session_scope
from app.keyboards import kb_back_home
from app.pdf_report import build_pdf, ensure_reportlab
from app.repo import events as events_repo
from app.storage import commit_safely, get_last_plan

router = Router()

log = logging.getLogger(__name__)


def _clean_lines(lines: list[str]) -> list[str]:
    out = []
    for s in lines:
        s = s.replace("<b>", "").replace("</b>", "").replace("<i>", "").replace("</i>", "").replace("&nbsp;", " ")
        out.append(s)
    return out


def _compose_pdf(plan: dict) -> bytes | None:
    title = plan.get("title", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω")
    context_name = plan.get("context_name", "")
    level = plan.get("level")
    subtitle = f"{context_name} ‚Ä¢ {level}" if level else context_name

    actions = plan.get("actions", [])
    products = _clean_lines(plan.get("lines", []))
    notes = plan.get("notes", "")
    # <‚Äî –µ—Å–ª–∏ –ø—É—Å—Ç–æ, pdf_report —Å–∞–º –ø–æ–¥—Å—Ç–∞–≤–∏—Ç –¥–µ—Ñ–æ–ª—Ç
    intake_rows = plan.get("intake", [])
    order_url = plan.get("order_url")

    footer = (
        "–û—Ç—á—ë—Ç –Ω–æ—Å–∏—Ç –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤—Ä–∞—á–∞. "
        "–ë–∞–∑–∞: —Å–æ–Ω 7‚Äì9 —á, —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç, —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ."
    )

    if not ensure_reportlab():
        log.warning("PDF disabled (reportlab missing)")
        return None

    return build_pdf(
        title=title,
        subtitle=subtitle,
        actions=actions,
        products=products,
        notes=notes,
        footer=footer,
        intake_rows=intake_rows,  # <‚Äî –ø—Ä–æ–∫–∏–¥—ã–≤–∞–µ–º
        order_url=order_url,
        recommended_products=list(plan.get("products", [])),
        context=plan.get("context"),
    )


@router.callback_query(F.data.in_({"report:last", "pdf:last"}))
async def pdf_last_cb(c: CallbackQuery):
    async with compat_session(session_scope) as session:
        plan = await get_last_plan(session, c.from_user.id)
        if plan:
            await events_repo.log(
                session,
                c.from_user.id,
                "pdf_export",
                {"context": plan.get("context"), "title": plan.get("title")},
            )
            await commit_safely(session)
    if not plan:
        await c.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á—ë—Ç–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä.", show_alert=True)
        await c.message.answer(
            "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –∫–≤–∏–∑ –∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —á—Ç–æ–±—ã —è —Å–æ–±—Ä–∞–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω.",
            reply_markup=kb_back_home(),
        )
        return
    await c.answer()
    pdf_bytes = _compose_pdf(plan)
    if not pdf_bytes:
        await c.message.answer(
            "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.",
            reply_markup=kb_back_home(),
        )
        return
    filename = f"plan_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
    await c.message.answer_document(BufferedInputFile(pdf_bytes, filename=filename), caption="–ì–æ—Ç–æ–≤–æ! üìÑ –í–∞—à PDF-–ø–ª–∞–Ω.")


@router.message(Command("pdf"))
async def pdf_cmd(m: Message):
    async with compat_session(session_scope) as session:
        plan = await get_last_plan(session, m.from_user.id)
        if plan:
            await events_repo.log(
                session,
                m.from_user.id,
                "pdf_export",
                {"context": plan.get("context"), "title": plan.get("title")},
            )
            await commit_safely(session)
    if not plan:
        await m.answer("–ù–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞–Ω–∞. –ü—Ä–æ–π–¥–∏—Ç–µ —Ç–µ—Å—Ç –∏–ª–∏ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —á—Ç–æ–±—ã —è —Å–æ–±—Ä–∞–ª —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.")
        return
    pdf_bytes = _compose_pdf(plan)
    if not pdf_bytes:
        await m.answer("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å–±–æ—Ä–∫–µ.")
        return
    filename = f"plan_{datetime.now().strftime('%Y%m%d_%H%M')}.pdf"
    await m.answer_document(BufferedInputFile(pdf_bytes, filename=filename), caption="–ì–æ—Ç–æ–≤–æ! üìÑ –í–∞—à PDF-–ø–ª–∞–Ω.")
