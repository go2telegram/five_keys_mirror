"""Quiz for skin and joint wellbeing."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

from app.catalog.api import pick_for_context
from app.config import settings
from app.db.session import compat_session, session_scope
from app.handlers.quiz_common import safe_edit, send_product_cards
from app.reco import product_lines
from app.repo import events as events_repo, users as users_repo
from app.storage import SESSIONS, commit_safely, set_last_plan

router = Router(name="quiz_skin_joint")

QUESTIONS: list[tuple[str, list[tuple[str, int]]]] = [
    (
        "–ï—Å—Ç—å –ª–∏ —Å—É—Ö–æ—Å—Ç—å –∫–æ–∂–∏ –∏–ª–∏ –æ—â—É—â–µ–Ω–∏–µ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ü–æ—è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—ã—Å—ã–ø–∞–Ω–∏—è/–∞–∫–Ω–µ –ø—Ä–∏ —Å—Ç—Ä–µ—Å—Å–µ –∏–ª–∏ –ø–∏—Ç–∞–Ω–∏–∏?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –∑–∞–º–µ—á–∞–µ—à—å –ª–æ–º–∫–æ—Å—Ç—å –Ω–æ–≥—Ç–µ–π –∏–ª–∏ –≤–æ–ª–æ—Å?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ —É—Ç—Ä–µ–Ω–Ω—è—è —Å–∫–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –≤ —Å—É—Å—Ç–∞–≤–∞—Ö/—Å–ø–∏–Ω–µ?",
        [("–ù–µ—Ç", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–î–∞", 2)],
    ),
    (
        "–ë—ã–≤–∞—é—Ç –ª–∏ —â–µ–ª—á–∫–∏/—Ö—Ä—É—Å—Ç –≤ —Å—É—Å—Ç–∞–≤–∞—Ö –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ö–∞–∫ —á–∞—Å—Ç–æ –ø–æ—Ç—Ä–µ–±–ª—è–µ—à—å –±–µ–ª–æ–∫ (–º—è—Å–æ/—Ä—ã–±–∞/–±–æ–±–æ–≤—ã–µ/—è–π—Ü–∞)?",
        [("–ö–∞–∂–¥—ã–π –ø—Ä–∏—ë–º –ø–∏—â–∏", 0), ("1‚Äì2 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å", 1), ("–†–µ–¥–∫–æ", 2)],
    ),
    (
        "–î–æ–±–∞–≤–ª—è–µ—à—å –ª–∏ –û–º–µ–≥–∞-3 –∏–ª–∏ –∞–Ω—Ç–∏–æ–∫—Å–∏–¥–∞–Ω—Ç—ã –≤ —Ä–∞—Ü–∏–æ–Ω?",
        [("–†–µ–≥—É–ª—è—Ä–Ω–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ü–æ–∫–∞ –Ω–µ—Ç", 2)],
    ),
    (
        "–ï—Å—Ç—å –ª–∏ —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏ (—Å–ø–æ—Ä—Ç, —Å–∏–¥—è—á–∞—è —Ä–∞–±–æ—Ç–∞)?",
        [("–£–º–µ—Ä–µ–Ω–Ω–æ", 0), ("–¢—Ä–µ–±—É—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è", 1), ("–ß–∞—Å—Ç–æ –ø–µ—Ä–µ–≥—Ä—É–∑", 2)],
    ),
    (
        "–°–∫–æ–ª—å–∫–æ —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –ø—å—ë—à—å –≤ –¥–µ–Ω—å?",
        [("6+", 0), ("3‚Äì5", 1), ("–ú–µ–Ω—å—à–µ", 2)],
    ),
    (
        "–ë—ã–≤–∞—é—Ç –ª–∏ –≤–æ—Å–ø–∞–ª–µ–Ω–∏—è/–æ—Ç–µ–∫–∏ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫?",
        [("–†–µ–¥–∫–æ", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–ß–∞—Å—Ç–æ", 2)],
    ),
    (
        "–ù–∞—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ —Å–ø–∏—à—å 7‚Äì8 —á–∞—Å–æ–≤?",
        [("–ü–æ—á—Ç–∏ –≤—Å–µ–≥–¥–∞", 0), ("–ò–Ω–æ–≥–¥–∞", 1), ("–†–µ–¥–∫–æ", 2)],
    ),
]


def _keyboard(idx: int) -> InlineKeyboardMarkup:
    _, answers = QUESTIONS[idx]
    kb = InlineKeyboardBuilder()
    for _, (label, value) in enumerate(answers):
        kb.button(text=label, callback_data=f"q:skin_joint:{idx}:{value}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="tests:menu")
    kb.button(text="üè† –î–æ–º–æ–π", callback_data="home:main")
    kb.adjust(1, 1, 1, 2)
    return kb.as_markup()


def _level(score: int) -> tuple[str, str, str]:
    if score <= 8:
        return "mild", "–ö–æ–∂–∞ –∏ —Å—É—Å—Ç–∞–≤—ã –≤ –Ω–æ—Ä–º–µ", "skin_joint_low"
    if score <= 16:
        return "moderate", "–ï—Å—Ç—å –∑–æ–Ω—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏", "skin_joint_mid"
    return "severe", "–ù—É–∂–Ω–∞ —Å–∏—Å—Ç–µ–º–Ω–∞—è –∑–∞–±–æ—Ç–∞", "skin_joint_high"


@router.callback_query(F.data == "quiz:skin_joint")
async def quiz_skin_joint_start(c: CallbackQuery) -> None:
    SESSIONS[c.from_user.id] = {"quiz": "skin_joint", "idx": 0, "score": 0}
    question, _ = QUESTIONS[0]
    await safe_edit(
        c,
        f"–ö–æ–∂–∞ –∏ —Å—É—Å—Ç–∞–≤—ã ‚ú®\n\n–í–æ–ø—Ä–æ—Å 1/{len(QUESTIONS)}:\n{question}",
        _keyboard(0),
    )


@router.callback_query(F.data.regexp(r"^q:skin_joint:\d+:\d+$"))
async def quiz_skin_joint_step(c: CallbackQuery) -> None:
    sess = SESSIONS.get(c.from_user.id, {})
    if sess.get("quiz") != "skin_joint":
        await c.answer()
        return

    _, _, idx_s, score_s = c.data.split(":")
    idx = int(idx_s)
    score = int(score_s)
    sess["score"] += score
    idx += 1

    if idx >= len(QUESTIONS):
        await _finish_quiz(c)
        return

    question, _ = QUESTIONS[idx]
    await safe_edit(
        c,
        f"–í–æ–ø—Ä–æ—Å {idx + 1}/{len(QUESTIONS)}:\n{question}",
        _keyboard(idx),
    )


async def _finish_quiz(c: CallbackQuery) -> None:
    user_id = c.from_user.id
    sess = SESSIONS.pop(user_id, None)
    if not sess:
        await c.answer()
        return

    total = sess.get("score", 0)
    level_key, level_label, ctx = _level(total)

    rec_codes = ["ERA_MIT_UP", "OMEGA3", "T8_BLEND"]
    lines = product_lines(rec_codes, ctx)

    actions = [
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –±–µ–ª–æ–∫ 1.5 –≥/–∫–≥ –∏ –≤–∏—Ç–∞–º–∏–Ω—ã –°+–ï –≤ —Ä–∞—Ü–∏–æ–Ω–µ.",
        "–î–æ–±–∞–≤—å —Å—É—Å—Ç–∞–≤–Ω—É—é —Ä–∞–∑–º–∏–Ω–∫—É —É—Ç—Ä–æ–º –∏ –ø–æ—Å–ª–µ –Ω–∞–≥—Ä—É–∑–∫–∏.",
        "–°–ª–µ–¥–∏ –∑–∞ –≤–æ–¥–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º –∏ —Å–Ω–æ–º –Ω–µ –º–µ–Ω–µ–µ 7 —á–∞—Å–æ–≤.",
    ]
    notes = "–†–µ–≥—É–ª—è—Ä–Ω–æ –¥–µ–ª–∞–π —Ñ–æ—Ç–æ-–ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–∂–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π –ø–æ–¥–≤–∏–∂–Ω–æ—Å—Ç—å —Å—É—Å—Ç–∞–≤–æ–≤."

    plan_payload = {
        "title": "–ü–ª–∞–Ω: –∫–æ–∂–∞ –∏ —Å—É—Å—Ç–∞–≤—ã",
        "context": "skin_joint",
        "context_name": "–ö–æ–∂–∞ –∏ —Å—É—Å—Ç–∞–≤—ã",
        "level": level_label,
        "products": rec_codes,
        "lines": lines,
        "actions": actions,
        "notes": notes,
        "order_url": settings.velavie_url,
    }

    async with compat_session(session_scope) as session:
        await users_repo.get_or_create_user(session, user_id, c.from_user.username)
        await set_last_plan(session, user_id, plan_payload)
        await events_repo.log(
            session,
            user_id,
            "quiz_finish",
            {"quiz": "skin_joint", "score": total, "level": level_label},
        )
        await commit_safely(session)

    cards = pick_for_context("skin_joint", level_key, rec_codes)
    await send_product_cards(
        c,
        f"–ò—Ç–æ–≥: {level_label}",
        cards,
        bullets=actions,
        headline=notes,
            back_cb="tests:menu",
    )
