# app/scheduler/jobs.py
import datetime as dt
from zoneinfo import ZoneInfo

from aiogram import Bot
from sqlalchemy import func, or_, select

from app.db.models import Event, Subscription
from app.db.session import session_scope
from app.repo import events as events_repo
from app.services.daily_tip import dispatch_due_tips
from app.utils_openai import ai_generate


async def send_nudges(bot: Bot, tz_name: str, weekdays: set[str]):
    """
    –†–∞—Å—Å—ã–ª–∫–∞ ¬´–º—è–≥–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π¬ª —Ç–µ–º, –∫—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ notify_on).
    –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ TZ; —Ç–µ–∫—Å—Ç—ã ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ä–µ–∑ ChatGPT –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏.
    """
    now_local = dt.datetime.now(ZoneInfo(tz_name))
    wd = now_local.strftime("%a")  # 'Mon', 'Tue', ...
    if weekdays and wd not in weekdays:
        return

    prompt = (
        "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —á–µ–∫-–ª–∏—Å—Ç (3‚Äì4 —Å—Ç—Ä–æ–∫–∏) –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è: "
        "—Å–æ–Ω, —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç, 30 –º–∏–Ω—É—Ç –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–¥—ã."
    )
    text = await ai_generate(prompt)
    if not text or text.startswith("‚ö†Ô∏è"):
        text = "–ú–∏–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è:\n" "‚òëÔ∏è –°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤\n" "‚òëÔ∏è 10 –º–∏–Ω —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞\n" "‚òëÔ∏è 30 –º–∏–Ω –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã"

    async with session_scope() as session:
        user_ids = await events_repo.notify_recipients(session)

    for uid in user_ids:
        try:
            await bot.send_message(uid, text)
        except Exception:
            continue


async def send_daily_tips(bot: Bot) -> None:
    await dispatch_due_tips(bot)


async def _start_followup_candidates(session, cutoff: dt.datetime) -> list[int]:
    latest_start = (
        select(Event.user_id, func.max(Event.ts).label("ts"))
        .where(Event.name == "start", Event.user_id.is_not(None))
        .group_by(Event.user_id)
        .subquery()
    )
    latest_quiz = (
        select(Event.user_id, func.max(Event.ts).label("ts"))
        .where(Event.name == "quiz_finish", Event.user_id.is_not(None))
        .group_by(Event.user_id)
        .subquery()
    )
    latest_nudge = (
        select(Event.user_id, func.max(Event.ts).label("ts"))
        .where(Event.name == "retention_test_nudge", Event.user_id.is_not(None))
        .group_by(Event.user_id)
        .subquery()
    )

    stmt = (
        select(latest_start.c.user_id)
        .outerjoin(latest_quiz, latest_quiz.c.user_id == latest_start.c.user_id)
        .outerjoin(latest_nudge, latest_nudge.c.user_id == latest_start.c.user_id)
        .where(
            latest_start.c.ts <= cutoff,
            or_(
                latest_quiz.c.ts.is_(None),
                latest_quiz.c.ts < latest_start.c.ts,
            ),
            or_(
                latest_nudge.c.ts.is_(None),
                latest_nudge.c.ts < latest_start.c.ts,
            ),
        )
    )
    result = await session.execute(stmt)
    return [row[0] for row in result.all() if row[0] is not None]


async def _premium_followup_candidates(
    session, cutoff: dt.datetime, now: dt.datetime
) -> list[int]:
    latest_quiz = (
        select(Event.user_id, func.max(Event.ts).label("ts"))
        .where(Event.name == "quiz_finish", Event.user_id.is_not(None))
        .group_by(Event.user_id)
        .subquery()
    )
    latest_nudge = (
        select(Event.user_id, func.max(Event.ts).label("ts"))
        .where(Event.name == "retention_premium_nudge", Event.user_id.is_not(None))
        .group_by(Event.user_id)
        .subquery()
    )
    active_subs = (
        select(Subscription.user_id)
        .where(Subscription.until > now)
        .subquery()
    )

    stmt = (
        select(latest_quiz.c.user_id)
        .outerjoin(active_subs, active_subs.c.user_id == latest_quiz.c.user_id)
        .outerjoin(latest_nudge, latest_nudge.c.user_id == latest_quiz.c.user_id)
        .where(
            latest_quiz.c.ts <= cutoff,
            active_subs.c.user_id.is_(None),
            or_(
                latest_nudge.c.ts.is_(None),
                latest_nudge.c.ts < latest_quiz.c.ts,
            ),
        )
    )
    result = await session.execute(stmt)
    return [row[0] for row in result.all() if row[0] is not None]


async def send_retention_reminders(bot: Bot) -> None:
    now = dt.datetime.now(dt.timezone.utc)
    start_cutoff = now - dt.timedelta(hours=24)
    premium_cutoff = now - dt.timedelta(hours=72)

    async with session_scope() as session:
        start_candidates = await _start_followup_candidates(session, start_cutoff)
        premium_candidates = await _premium_followup_candidates(session, premium_cutoff, now)

    sent_start: list[int] = []
    sent_premium: list[int] = []

    for uid in start_candidates:
        try:
            await bot.send_message(uid, "‚ö° –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç —ç–Ω–µ—Ä–≥–∏–∏")
        except Exception:
            continue
        else:
            sent_start.append(uid)

    for uid in premium_candidates:
        try:
            await bot.send_message(uid, "üíé –í–∫–ª—é—á–∏ –ü—Ä–µ–º–∏—É–º ‚Äî –ø–æ–ª—É—á–∞–π –ø–æ–¥–±–æ—Ä–∫—É –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é")
        except Exception:
            continue
        else:
            sent_premium.append(uid)

    if not sent_start and not sent_premium:
        return

    async with session_scope() as session:
        for uid in sent_start:
            await events_repo.log(session, uid, "retention_test_nudge", {})
        for uid in sent_premium:
            await events_repo.log(session, uid, "retention_premium_nudge", {})
        await session.commit()
