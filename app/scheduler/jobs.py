# app/scheduler/jobs.py
import datetime as dt
import logging
from zoneinfo import ZoneInfo

from aiogram import Bot

from app.db.session import session_scope
from app.reco.ai_reasoner import build_ai_plan
from app.repo import events as events_repo
from app.repo import subscriptions as subscriptions_repo
from app.storage import commit_safely
from app.utils import split_md
from app.utils_openai import ai_generate


LOG = logging.getLogger(__name__)


async def send_nudges(bot: Bot, tz_name: str, weekdays: set[str]):
    """
    –†–∞—Å—Å—ã–ª–∫–∞ ¬´–º—è–≥–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π¬ª —Ç–µ–º, –∫—Ç–æ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–±—ã—Ç–∏–µ notify_on).
    –î–Ω–∏ –Ω–µ–¥–µ–ª–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ TZ; —Ç–µ–∫—Å—Ç—ã ‚Äî –∫–æ—Ä–æ—Ç–∫–∏–µ, —á–µ—Ä–µ–∑ ChatGPT –¥–ª—è —Å–≤–µ–∂–µ—Å—Ç–∏.
    """
    now_local = dt.datetime.now(ZoneInfo(tz_name))
    wd = now_local.strftime("%a")  # 'Mon', 'Tue', ...
    if weekdays and wd not in weekdays:
        return

    prompt = (
        "–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π —á–µ–∫-–ª–∏—Å—Ç (3‚Äì4 —Å—Ç—Ä–æ–∫–∏) –¥–ª—è —ç–Ω–µ—Ä–≥–∏–∏ –∏ –∑–¥–æ—Ä–æ–≤—å—è: "
        "—Å–æ–Ω, —É—Ç—Ä–µ–Ω–Ω–∏–π —Å–≤–µ—Ç, 30 –º–∏–Ω—É—Ç –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã. –ü–∏—à–∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –±–µ–∑ –≤–æ–¥—ã."
    )
    text = await ai_generate(prompt)
    if not text or text.startswith("‚ö†Ô∏è"):
        text = "–ú–∏–∫—Ä–æ-—á–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è:\n" "‚òëÔ∏è –°–æ–Ω 7‚Äì9 —á–∞—Å–æ–≤\n" "‚òëÔ∏è 10 –º–∏–Ω —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ —Å–≤–µ—Ç–∞\n" "‚òëÔ∏è 30 –º–∏–Ω –±—ã—Å—Ç—Ä–æ–π —Ö–æ–¥—å–±—ã"

    async with session_scope() as session:
        user_ids = await events_repo.notify_recipients(session)

    for uid in user_ids:
        try:
            await bot.send_message(uid, text)
        except Exception:
            continue


async def weekly_ai_plan(bot: Bot):
    """Send the refreshed 7-day AI plan to every active premium user."""

    async with session_scope() as session:
        user_ids = await subscriptions_repo.active_user_ids(session)

    for user_id in user_ids:
        try:
            text = await build_ai_plan(user_id, "7d")
            await bot.send_message(user_id, "üÜï –¢–≤–æ–π –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –ø–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é –≥–æ—Ç–æ–≤!")
            for chunk in split_md(text, 3500):
                await bot.send_message(user_id, chunk, parse_mode="Markdown")
            async with session_scope() as session:
                await events_repo.log(session, user_id, "plan_generated", {"source": "weekly"})
                await commit_safely(session)
        except Exception:
            LOG.exception("weekly_ai_plan failed uid=%s", user_id)
