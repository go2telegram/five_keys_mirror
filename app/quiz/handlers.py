"""Handlers for YAML-driven quizzes."""

from __future__ import annotations

from aiogram import F, Router
from aiogram.filters import Command, CommandObject
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .engine import ANSWER_PREFIX, answer_callback, list_quizzes, load_quiz, start_quiz

router = Router()


@router.message(Command("tests"))
async def command_tests(message: Message) -> None:
    quizzes = list_quizzes()
    if not quizzes:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤. –ó–∞–≥–ª—è–Ω–∏ –ø–æ–∑–∂–µ!")
        return

    kb = InlineKeyboardBuilder()
    for quiz in quizzes:
        kb.button(text=quiz.title, callback_data=f"tests:{quiz.name}")
    kb.adjust(1)

    titles = "\n".join(f"‚Ä¢ {quiz.title}" for quiz in quizzes)
    text = (
        "üß™ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã</b>\n\n"
        f"{titles}\n\n–í—ã–±–∏—Ä–∞–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å."
    )
    await message.answer(text, reply_markup=kb.as_markup())


@router.message(Command("test"))
async def command_test(message: Message, command: CommandObject, state: FSMContext) -> None:
    if not command.args:
        await message.answer("–£–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: <code>/test energy</code>.")
        return

    name = command.args.strip().split()[0].lower()
    try:
        load_quiz(name)
    except FileNotFoundError:
        await message.answer("–¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π /tests —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.")
        return

    await start_quiz(message, state, name)


@router.callback_query(F.data.startswith("tests:"))
async def quiz_callback(call: CallbackQuery, state: FSMContext) -> None:
    data = call.data or ""
    if data.startswith(f"{ANSWER_PREFIX}:"):
        return

    _, _, name = data.partition(":")
    name = name.strip().lower()
    if not name:
        await call.answer()
        return

    try:
        load_quiz(name)
    except FileNotFoundError:
        await call.answer("–¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", show_alert=True)
        return

    await start_quiz(call, state, name)


@router.callback_query(F.data.startswith(f"{ANSWER_PREFIX}:"))
async def quiz_answer(call: CallbackQuery, state: FSMContext) -> None:
    await answer_callback(call, state)
