from __future__ import annotations

import json
from datetime import datetime, timezone
from typing import Any, Dict, Iterable

from sqlalchemy import select

from app.db.models import Event
from app.db.session import compat_session, session_scope
from app.repo import events as events_repo, user_profiles as user_profiles_repo
from app.storage import commit_safely
from app.utils_openai import ai_generate

SYSTEM_PROMPT_RU = (
    "–¢—ã ‚Äî wellness-—ç–∫—Å–ø–µ—Ä—Ç. –î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ª–∞–π—Ñ—Å—Ç–∞–π–ª-–ø–ª–∞–Ω –±–µ–∑ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –¥–∏–∞–≥–Ω–æ–∑–æ–≤."
    " –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω, –ø–æ–º–Ω–∏ —á—Ç–æ —ç—Ç–æ –Ω–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è."
)


async def _latest_events(
    session,
    user_id: int,
    name: str,
    limit: int,
) -> list[Event]:
    stmt = (
        select(Event)
        .where(Event.user_id == user_id, Event.name == name)
        .order_by(Event.ts.desc())
        .limit(limit)
    )
    result = await session.execute(stmt)
    return list(result.scalars())


def _serialize_events(events: Iterable[Event]) -> list[Dict[str, Any]]:
    payload: list[Dict[str, Any]] = []
    for event in events:
        payload.append(
            {
                "ts": event.ts.isoformat() if event.ts else None,
                "meta": event.meta or {},
                "name": event.name,
            }
        )
    return payload


def _render_prompt(user_id: int, horizon: str, context: Dict[str, Any]) -> str:
    lines = [
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_id}",
        f"–ü–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∞: {horizon}",
        "",
        "–ò—Å—Ç–æ—Ä–∏—è –∫–≤–∏–∑–æ–≤:",
    ]
    quizzes = context.get("quizzes", []) or []
    if quizzes:
        for quiz in quizzes:
            meta = quiz.get("meta", {})
            lines.append(f"‚Ä¢ {meta.get('quiz', 'quiz')} ‚Äî —É—Ä–æ–≤–µ–Ω—å {meta.get('level', meta.get('score'))}")
    else:
        lines.append("‚Ä¢ –Ω–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–≤–∏–∑–æ–≤")

    lines.append("")
    lines.append("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–≤:")
    calcs = context.get("calculators", []) or []
    if calcs:
        for calc in calcs:
            meta = calc.get("meta", {})
            lines.append(f"‚Ä¢ {meta.get('calc', 'calc')}: {json.dumps(meta.get('data', {}), ensure_ascii=False)}")
    else:
        lines.append("‚Ä¢ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö —Ä–∞—Å—á—ë—Ç–æ–≤")

    lines.append("")
    lines.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    plans = context.get("plans", []) or []
    if plans:
        for plan in plans:
            meta = plan.get("meta", {})
            lines.append(f"‚Ä¢ {meta.get('title') or meta.get('context_name') or '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω'}")
    else:
        lines.append("‚Ä¢ –ø–ª–∞–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ –±—ã–ª–æ")

    lines.append("")
    lines.append("–°—Ñ–æ—Ä–º–∏—Ä—É–π –ø–ª–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:")
    lines.append("üóì –ü–ª–∞–Ω –Ω–∞ <–ø–µ—Ä–∏–æ–¥>")
    lines.append("### –£—Ç—Ä–æ")
    lines.append("‚Ä¢ ...")
    lines.append("### –î–µ–Ω—å")
    lines.append("‚Ä¢ ...")
    lines.append("### –í–µ—á–µ—Ä")
    lines.append("‚Ä¢ ...")
    lines.append("")
    lines.append("–§–æ–∫—É—Å: –ø–∏—Ç–∞–Ω–∏–µ, –¥–≤–∏–∂–µ–Ω–∏–µ, —Å–æ–Ω, –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ. –ë–µ–∑ –ª–µ–∫–∞—Ä—Å—Ç–≤ –∏ –¥–∏–∞–≥–Ω–æ–∑–æ–≤.")
    return "\n".join(lines)


def _ensure_structure(text: str, horizon: str) -> str:
    header = f"üóì –ü–ª–∞–Ω –Ω–∞ {horizon}"
    result = text.strip()
    if header not in result:
        result = f"{header}\n\n{result}" if result else header
    for section in ("–£—Ç—Ä–æ", "–î–µ–Ω—å", "–í–µ—á–µ—Ä"):
        tag = f"### {section}"
        if tag not in result:
            result += f"\n\n{tag}\n‚Ä¢ –í—ã–±–µ—Ä–∏ 1-2 –ø—Ä–æ—Å—Ç—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {section.lower()}."
    return result


async def build_ai_plan(user_id: int, horizon: str = "7d") -> str:
    async with compat_session(session_scope) as session:
        quizzes = await _latest_events(session, user_id, "quiz_finish", 5)
        calcs = await _latest_events(session, user_id, "calc_finish", 3)
        plans = await events_repo.recent_plans(session, user_id, limit=3)

    context = {
        "quizzes": _serialize_events(quizzes),
        "calculators": _serialize_events(calcs),
        "plans": [
            {"ts": plan.ts.isoformat() if plan.ts else None, "meta": plan.meta or {}}
            for plan in plans
        ],
    }

    prompt = _render_prompt(user_id, horizon, context)
    raw = await ai_generate(prompt, sys=SYSTEM_PROMPT_RU)
    plan_text = _ensure_structure(raw or "", horizon)

    async with compat_session(session_scope) as session:
        payload = {
            "generated_at": datetime.now(timezone.utc).isoformat(),
            "horizon": horizon,
            "plan_text": plan_text,
            "context": context,
        }
        await user_profiles_repo.update_plan(session, user_id, payload)
        await commit_safely(session)

    return plan_text


__all__ = ["build_ai_plan"]
