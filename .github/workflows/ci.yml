name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  lint-autofix:
    name: Lint autofix
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install formatters
        run: |
          python -m pip install --upgrade pip
          python -m pip install black==24.10.0 ruff==0.7.2 pre-commit==4.0.1
      - name: Run Ruff autofix (lint)
        run: |
          ruff check --fix .
          ruff format .
      - name: Run additional auto-fixers
        run: |
          black .
          pre-commit run end-of-file-fixer --all-files
      - name: Detect changes
        id: git-status
        run: |
          if git status --short | grep -q .; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          else
            echo "changed=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Commit changes
        if: steps.git-status.outputs.changed == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add -A
          git commit -m "chore: apply lint autofix"
          git push
      - name: Report manual action required
        if: steps.git-status.outputs.changed == 'true' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "::warning::Lint autofix produced changes but the branch is hosted on a fork. Please apply the patch manually."

  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      BOT_TOKEN: dummy:000
      SERVICE_HOST: 127.0.0.1
      HEALTH_PORT: 0
      NO_NET: 0
      PYTHONWARNINGS: ignore
      MPLBACKEND: Agg
      MEDIA_OWNER: go2telegram
      MEDIA_REPO: media
      MEDIA_REF: 1312d74492d26a8de5b8a65af38293fe6bf8ccc5
      MEDIA_PRODUCTS_PATH: media/products
      MEDIA_DESCRIPTIONS_PATH: media/descriptions
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('requirements*.txt') }}
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov bandit mypy ruff pip-audit safety
      - name: Build catalog
        run: |
          python tools/build_products.py build
          python tools/build_products.py validate
      - name: Head check media (warn-only)
        run: python tools/head_check.py || true
      - name: Partner link health (warn-only)
        run: |
          python tools/check_partner_links.py \
            --report build/reports/links_head_report.txt \
            --diff-json build/reports/links_head_diff.json || true
      - name: Self audit (fast)
        if: github.event_name == 'pull_request'
        run: python tools/self_audit.py --fast --no-net --out build/reports/self_audit_pr.md || true
      - name: Tests
        run: pytest -q
      - name: Diagnose (always)
        if: always()
        run: python tools/ci_diagnose.py --redacted || true
      - name: Merge guard (full audit)
        if: github.event_name == 'push'
        run: |
          echo "Running full self audit before merge..."
          python tools/self_audit.py --ci-merge --no-net --out build/reports/self_audit_final.md
          echo "::notice file=build/reports/self_audit_final.md::Full self-audit summary"
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-reports
          path: build/reports/*

  dev-up-smoke:
    runs-on: ubuntu-latest
    env:
      DEV_DRY_RUN: 1
      HEALTH_PORT: 0
      PYTHONPATH: .
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps (runtime)
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Build catalog (fast)
        run: |
          python -m tools.build_products build
          python -m tools.build_products validate
      - name: Local dev_check summary (fast)
        run: python -m tools.dev_check --fast --json || true
      - name: Run dry
        run: |
          python run.py &
          sleep 2
          curl -sf http://127.0.0.1:8080/ping || true
      - name: Kill
        run: pkill -f "python run.py" || true

  windows-wheels-smoke:
    name: Windows wheels smoke
    runs-on: windows-latest
    timeout-minutes: 30
    defaults:
      run:
        shell: pwsh
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Prepare pip
        run: python -m pip install --upgrade pip
      - name: Download wheels
        run: |
          New-Item -ItemType Directory -Path wheels -Force | Out-Null
          python -m pip download --dest wheels --only-binary=:all: -r wheels-packages.txt
          python -m pip download --dest wheels --only-binary=:all: -r requirements.txt
      - name: Offline install smoke
        run: .\scripts\offline_install.ps1 -WheelsDir .\wheels
      - name: Install test dependencies
        run: python -m pip install pytest==8.3.3 pytest-asyncio==0.24.0
      - name: Tribute smoke tests
        env:
          PYTHONWARNINGS: ignore
        run: python -m pytest tests/test_tribute_stub.py -q

  security:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install audit deps
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-dev.txt
      - name: Download gitleaks (binary)
        run: |
          set -e
          GITLEAKS_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest \
            | grep tag_name | cut -d '"' -f 4)
          curl -L -o gitleaks.tar.gz \
            https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz
          tar -xzf gitleaks.tar.gz gitleaks
          sudo mv gitleaks /usr/local/bin/
          gitleaks version
      - name: Security audit
        run: python tools/security_audit.py
      - name: Generate SBOM
        run: python tools/sbom_generate.py
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: build/reports/*
