name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: codex-${{ github.ref || 'default' }}
  cancel-in-progress: false

jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Gate по ключу, а для вручную запущенного workflow_dispatch пропускаем владельца ---
      - name: Gate
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          : > debug.log
          echo "event=${{ github.event_name }}" | tee -a debug.log
          echo "actor=${GITHUB_ACTOR}" | tee -a debug.log

          ALLOWED=false; REASON=""

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # workflow_dispatch разрешаем владельцу репозитория
            if [[ "${GITHUB_REPOSITORY_OWNER}" == "go2telegram" ]]; then
              ALLOWED=true
            else
              REASON="workflow_dispatch allowed only for repo owner"
            fi
          else
            # repository_dispatch проверяем по секрету
            if [[ "${{ github.event.client_payload.key || '' }}" == "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
              ALLOWED=true
            else
              REASON="wrong or empty key"
            fi
          fi

          echo "allowed=$ALLOWED" | tee -a debug.log
          echo "reason=$REASON"   | tee -a debug.log
          echo "allowed=$ALLOWED" >> "$GITHUB_OUTPUT"
          echo "reason=$REASON"   >> "$GITHUB_OUTPUT"

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        shell: bash
        run: |
          # По умолчанию команда render_menu
          CMD="${{ github.event.client_payload.cmd || '' }}"
          MSG="${{ github.event.client_payload.msg || '' }}"
          [[ -z "$CMD" ]] && CMD="render_menu"
          echo "cmd=$CMD" >> "$GITHUB_OUTPUT"
          echo "msg=$MSG" >> "$GITHUB_OUTPUT"
          echo "cmd=$CMD" | tee -a debug.log
          echo "msg=$MSG" | tee -a debug.log

      # ---------- Рендер Mermaid -> SVG ----------
      - name: Setup Node
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install mermaid-cli
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: npm i -g @mermaid-js/mermaid-cli@10.9.1

      - name: Install fonts (cyrillic + emoji)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji

      - name: Puppeteer no-sandbox
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          cat > puppeteer.json <<'JSON'
          { "args": ["--no-sandbox","--disable-setuid-sandbox"] }
          JSON

      - name: Render docs/**/*.mmd -> artifacts/menu/*.svg
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        id: render
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          mapfile -t files < <(git ls-files 'docs/**/*.mmd' 'docs/*.mmd' 2>/dev/null || true)
          if (( ${#files[@]} == 0 )); then
            echo "::notice ::No .mmd files in docs/"
          else
            for f in "${files[@]}"; do
              out="artifacts/menu/$(basename "${f%.mmd}").svg"
              echo "[render] $f -> $out"
              if ! mmdc -i "$f" -o "$out" --puppeteerConfigFile puppeteer.json; then
                echo "::warning title=Mermaid render failed::$f"
              fi
            done
          fi

      # ---------- Собираем index.html обязательно (даже если нет svg) ----------
      - name: Build index.html
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        shell: bash
        run: |
          mkdir -p artifacts/menu
          {
            cat <<'HTML_HEAD'
<!doctype html><meta charset="utf-8">
<title>Diagrams</title>
<style>
  body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Helvetica,Arial}
  .grid{display:grid;gap:16px;grid-template-columns:repeat(auto-fill,minmax(280px,1fr))}
  header{margin:1rem 0}
  .card{border:1px solid #ddd;border-radius:10px;padding:12px;background:#fff}
  .card h3{margin:.2rem 0;font-size:1.05rem}
  .empty{color:#777}
</style>
<header><h1>Diagrams</h1><p><em>GitHub Pages auto-publish</em></p></header>
<div class="grid">
HTML_HEAD

            shopt -s nullglob
            svgs=(artifacts/menu/*.svg)
            if (( ${#svgs[@]} == 0 )); then
              echo '<p class="empty">No SVG files were generated.</p>'
            else
              for s in "${svgs[@]}"; do
                b=$(basename "$s")
                echo "<div class=\"card\"><h3>$b</h3><a href=\"$b\" target=\"_blank\">open</a></div>"
              done
            fi

            cat <<'HTML_TAIL'
</div>
HTML_TAIL
          } > artifacts/menu/index.html

      # ---------- Публикуем на Pages ----------
      - name: Setup Pages
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu
          name: github-pages

      - name: Deploy to Pages
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Print Pages URL
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: echo "Pages URL: ${{ steps.deploy.outputs.page_url }}"

      # ---------- Отчёт и отладка ----------
      - name: Gate report (always)
        if: always()
        run: |
          echo "gate.allowed=${{ steps.gate.outputs.allowed }}"
          echo "gate.reason=${{ steps.gate.outputs.reason }}"

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: debug.log
          if-no-files-found: warn
