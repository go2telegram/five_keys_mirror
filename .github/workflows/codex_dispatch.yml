name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: codex-${{ github.ref || 'default' }}
  cancel-in-progress: false

jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # ---- Gate: допускаем repository_dispatch по ключу или ручной запуск владельцем ----
      - name: Gate
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          : > debug.log
          echo "event=${{ github.event_name }}"        | tee -a debug.log
          echo "actor=${GITHUB_ACTOR}"                 | tee -a debug.log
          ALLOWED=false; REASON=""
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.client_payload.key }}" == "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
              ALLOWED=true
            else
              REASON="wrong or empty key"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # ручной запуск допускаем для владельца/бота
            if [[ "${GITHUB_ACTOR}" == "go2telegram" || "${GITHUB_ACTOR}" == "github-actions[bot]" ]]; then
              ALLOWED=true
            else
              REASON="manual dispatch but not owner"
            fi
          else
            REASON="unsupported event: ${{ github.event_name }}"
          fi
          echo "allowed=$ALLOWED" | tee -a debug.log
          echo "reason=$REASON"   | tee -a debug.log
          echo "allowed=$ALLOWED" >> $GITHUB_OUTPUT
          echo "reason=$REASON"   >> $GITHUB_OUTPUT

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        shell: bash
        run: |
          # значения по умолчанию для ручного запуска
          CMD="${{ github.event.client_payload.cmd || 'render_menu' }}"
          MSG="${{ github.event.client_payload.msg || 'manual dispatch' }}"
          FIX="${{ github.event.client_payload.fix || '' }}"
          echo "cmd=$CMD" >> $GITHUB_OUTPUT
          echo "msg=$MSG" >> $GITHUB_OUTPUT
          echo "fix=$FIX" >> $GITHUB_OUTPUT
          echo "cmd=$CMD" | tee -a debug.log
          echo "msg=$MSG" | tee -a debug.log

      # ---- Рендер Mermaid -> SVG ----
      - name: Setup Node
        if: steps.p.outputs.cmd == 'render_menu' && steps.gate.outputs.allowed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install mermaid-cli
        if: steps.p.outputs.cmd == 'render_menu' && steps.gate.outputs.allowed == 'true'
        run: npm i -g @mermaid-js/mermaid-cli@10.9.1

      - name: Fonts for Cyrillic & emoji
        if: steps.p.outputs.cmd == 'render_menu' && steps.gate.outputs.allowed == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji

      - name: Puppeteer no-sandbox
        if: steps.p.outputs.cmd == 'render_menu' && steps.gate.outputs.allowed == 'true'
        run: |
          cat > puppeteer.json <<'JSON'
          { "args": ["--no-sandbox","--disable-setuid-sandbox"] }
          JSON

      - name: Render docs/**/*.mmd -> artifacts/menu/*.svg
        if: steps.p.outputs.cmd == 'render_menu' && steps.gate.outputs.allowed == 'true'
        id: render
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          # если нет ни одного .mmd — всё равно выпустим index.html
          mapfile -t files < <(git ls-files 'docs/**/*.mmd' 'docs/*.mmd' 2>/dev/null || true)
          fail=0
          for f in "${files[@]}"; do
            out="artifacts/menu/$(basename "${f%.mmd}").svg"
            echo "[render] $f -> $out"
            if ! mmdc -i "$f" -o "$out" --puppeteerConfigFile puppeteer.json; then
              echo "::warning title=Mermaid render failed::$f"; fail=1
            fi
          done
          echo "failed=$fail" >> $GITHUB_OUTPUT

      # ---- index.html даже если рендер пустой/упал ----
      - name: Build index.html
        if: steps.gate.outputs.allowed == 'true'
        shell: bash
        run: |
          mkdir -p artifacts/menu
          {
            echo '<!doctype html><meta charset="utf-8"><title>Diagrams</title>'
            echo '<h1>Diagrams</h1><ul>'
            shopt -s nullglob
            for s in artifacts/menu/*.svg; do
              n="$(basename "$s")"
              echo "<li><a href='$n'>$n</a></li>"
            done
            echo '</ul>'
          } > artifacts/menu/index.html
          echo "Index built:"
          ls -la artifacts/menu || true

      - name: Upload SVGs artifact
        if: steps.gate.outputs.allowed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: menu_svgs-${{ github.run_id }}
          path: artifacts/menu
          if-no-files-found: warn

      # ---- GitHub Pages ----
      - name: Setup Pages
        if: steps.gate.outputs.allowed == 'true'
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: steps.gate.outputs.allowed == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu
          name: github-pages
          retention-days: 1

      - name: Deploy to Pages
        if: steps.gate.outputs.allowed == 'true'
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Print Pages URL
        if: always()
        run: |
          echo "Pages URL: ${{ steps.deploy.outputs.page_url || '' }}"

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: debug.log
          if-no-files-found: warn
