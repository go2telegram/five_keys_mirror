name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: codex-${{ github.ref || 'default' }}
  cancel-in-progress: false

jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Gate (allow repo_dispatch by key, workflow_dispatch for owner)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          : > debug.log
          EVT="${{ github.event_name }}"
          ACTOR="${GITHUB_ACTOR}"
          ALLOWED=false
          REASON=""
          if [[ "$EVT" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.client_payload.key }}" == "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
              ALLOWED=true
              echo "repo_dispatch: key ok" | tee -a debug.log
            else
              REASON="wrong or empty key"
            fi
          elif [[ "$EVT" == "workflow_dispatch" ]]; then
            if [[ "$ACTOR" == "go2telegram" || "$ACTOR" == "github-actions[bot]" ]]; then
              ALLOWED=true
              echo "workflow_dispatch: owner ok" | tee -a debug.log
            else
              REASON="manual run not allowed for $ACTOR"
            fi
          else
            REASON="unsupported event: $EVT"
          fi
          echo "allowed=$ALLOWED" | tee -a debug.log
          echo "reason=$REASON"   | tee -a debug.log
          echo "allowed=$ALLOWED" >> $GITHUB_OUTPUT
          echo "reason=$REASON"   >> $GITHUB_OUTPUT

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        shell: bash
        run: |
          echo "cmd=${{ github.event.client_payload.cmd }}"  >> $GITHUB_OUTPUT
          echo "msg=${{ github.event.client_payload.msg }}"  >> $GITHUB_OUTPUT
          echo "fix=${{ github.event.client_payload.fix }}"  >> $GITHUB_OUTPUT
          echo "cmd=${{ github.event.client_payload.cmd }}"  | tee -a debug.log
          echo "msg=${{ github.event.client_payload.msg }}"  | tee -a debug.log

      - name: Setup Node & Fonts
        if: steps.gate.outputs.allowed == 'true' && (steps.p.outputs.cmd == 'render_menu' || github.event_name == 'workflow_dispatch')
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk
          npm i -g @mermaid-js/mermaid-cli@10.9.1
          echo '{"args":["--no-sandbox","--no-zygote","--disable-setuid-sandbox"]}' > puppeteer.json

      - name: Render diagrams
        if: steps.gate.outputs.allowed == 'true' && (steps.p.outputs.cmd == 'render_menu' || github.event_name == 'workflow_dispatch')
        id: render
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          mapfile -t files < <(git ls-files 'docs/**/*.mmd' 'docs/*.mmd' || true)
          echo "Found ${#files[@]} .mmd files" | tee -a debug.log
          if (( ${#files[@]} == 0 )); then
            cat > artifacts/menu/index.html <<'HTML'
<!doctype html><meta charset="utf-8">
<title>Diagrams</title>
<h1>No diagrams</h1>
<p>Add .mmd into <code>docs/</code> and rerun.</p>
HTML
          else
            for f in "${files[@]}"; do
              bn="$(basename "${f%.*}")"
              echo "::group::Render $f"
              mmdc -i "$f" -o "artifacts/menu/${bn}.svg" --puppeteerConfigFile puppeteer.json || echo "::warning file=$f::Mermaid render failed"
              echo "::endgroup::"
            done
            {
              echo '<!doctype html><meta charset="utf-8"><title>Diagrams</title>'
              echo '<h1>Diagrams</h1><ul>'
              for s in artifacts/menu/*.svg 2>/dev/null; do
                [ -f "$s" ] || continue
                b=$(basename "$s"); echo "<li><a href=\"$b\">$b</a></li>"
              done
              echo '</ul>'
            } > artifacts/menu/index.html
            ls -la artifacts/menu >> debug.log || true
          fi

      - name: Upload Pages artifact
        if: steps.gate.outputs.allowed == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu
          name: github-pages

      - name: Setup Pages
        if: steps.gate.outputs.allowed == 'true'
        uses: actions/configure-pages@v5

      - name: Deploy to Pages
        if: steps.gate.outputs.allowed == 'true'
        id: dp
        uses: actions/deploy-pages@v4

      - name: Print Pages URL
        if: steps.gate.outputs.allowed == 'true'
        run: echo "Pages URL: ${{ steps.dp.outputs.page_url }}" | tee -a debug.log

      - name: Upload debug
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: debug.log
          if-no-files-found: warn
