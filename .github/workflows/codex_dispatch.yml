name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]

env:
  PYTHONPATH: .

permissions:
  contents: write
  pull-requests: write

jobs:
  dispatch:
    runs-on: ubuntu-latest
    steps:
      - name: Parse command
        id: p
        uses: actions/github-script@v7
        env:
          CODEX_SHARED_KEY: ${{ secrets.CODEX_SHARED_KEY }}
        with:
          script: |
            const payload = context.payload.client_payload || {};
            const expectedKey = process.env.CODEX_SHARED_KEY;
            if (!expectedKey) {
              core.setFailed('Secret CODEX_SHARED_KEY is not configured');
              return;
            }
            if (!payload.key) {
              core.setFailed('client_payload.key is required');
              return;
            }
            if (payload.key !== expectedKey) {
              core.setFailed('Invalid client payload key');
              return;
            }
            const cmd = payload.cmd || '';
            const allowed = ['render_menu', 'build_catalog', 'open_patch_pr', 'lint_autofix', 'auto_label'];
            if (!cmd || !allowed.includes(cmd)) {
              core.setFailed(`Unsupported cmd: ${cmd}`);
              return;
            }
            core.setOutput('cmd', cmd);
            core.setOutput('msg', payload.msg || '');
            core.setOutput('patch_b64', payload.patch_b64 || '');

      - name: Checkout
        if: steps.p.outputs.cmd != ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        if: contains('build_catalog open_patch_pr lint_autofix', steps.p.outputs.cmd)
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node
        if: steps.p.outputs.cmd == 'render_menu'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Mermaid CLI
        if: steps.p.outputs.cmd == 'render_menu'
        run: npm i -g @mermaid-js/mermaid-cli@10

      - name: Render menu diagrams
        if: steps.p.outputs.cmd == 'render_menu'
        run: |
          npx @mermaid-js/mermaid-cli \
            -i docs/menu_map.mmd \
            -o docs/menu_map.svg \
            -b transparent -w 1400

      - name: Install dependencies (build_catalog)
        if: steps.p.outputs.cmd == 'build_catalog'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build catalog
        if: steps.p.outputs.cmd == 'build_catalog'
        run: |
          python tools/build_products.py build
          python tools/build_products.py validate

      - name: Apply patch
        if: steps.p.outputs.cmd == 'open_patch_pr'
        run: |
          if [ -z "${{ steps.p.outputs.patch_b64 }}" ]; then
            echo "patch_b64 is required for open_patch_pr" >&2
            exit 1
          fi
          echo "${{ steps.p.outputs.patch_b64 }}" | base64 -d > /tmp/codex.patch
          git apply --whitespace=nowarn /tmp/codex.patch
          git add -A

      - name: Lint autofix
        if: steps.p.outputs.cmd == 'lint_autofix'
        run: bash scripts/lint_autofix.sh

      # ----- auto_label: повесить automerge на безопасный PR -----
      - name: Auto-label (from SHA)
        if: steps.p.outputs.cmd == 'auto_label' && steps.p.outputs.msg == ''
        uses: peter-evans/find-pull-request@v3
        id: find_from_sha
        with:
          commit: ${{ github.sha }}

      - name: Resolve PR number
        if: steps.p.outputs.cmd == 'auto_label'
        id: prnum
        run: |
          NUM="${{ steps.find_from_sha.outputs.number }}"
          if [ -z "$NUM" ]; then
            # ожидаем, что в msg прокинут номер в виде "pr:123"
            MSG='${{ steps.p.outputs.msg }}'
            if [[ "$MSG" =~ ^pr:([0-9]+)$ ]]; then
              NUM="${BASH_REMATCH[1]}"
            fi
          fi
          if [ -z "$NUM" ]; then
            echo "PR number not resolved"; exit 0
          fi
          echo "number=$NUM" >> $GITHUB_OUTPUT

      - name: Checkout PR head
        if: steps.p.outputs.cmd == 'auto_label' && steps.prnum.outputs.number != ''
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: refs/pull/${{ steps.prnum.outputs.number }}/head

      - name: Paths filter (risky changes)
        if: steps.p.outputs.cmd == 'auto_label' && steps.prnum.outputs.number != ''
        id: pf_autolabel
        uses: dorny/paths-filter@v3
        with:
          filters: |
            risky:
              - '.github/workflows/**'
              - 'Dockerfile'
              - 'requirements*.txt'
              - 'run.py'
              - 'app/main.py'
              - 'scripts/**'

      - name: Get PR author
        if: steps.p.outputs.cmd == 'auto_label' && steps.prnum.outputs.number != ''
        id: pr_author
        uses: actions/github-script@v7
        with:
          script: |
            const num = Number("${{ steps.prnum.outputs.number }}");
            const {data: pr} = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: num,
            });
            core.setOutput('author', pr.user.login);

      - name: Add automerge label
        if: |
          steps.p.outputs.cmd == 'auto_label' &&
          steps.prnum.outputs.number != '' &&
          steps.pf_autolabel.outputs.risky != 'true' &&
          (steps.pr_author.outputs.author == 'go2telegram' || steps.pr_author.outputs.author == 'github-actions[bot]')
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: automerge
          number: ${{ steps.prnum.outputs.number }}

      - name: PR (render_menu)
        if: steps.p.outputs.cmd == 'render_menu'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(docs): render menu diagrams"
          title: ${{ steps.p.outputs.msg != '' && steps.p.outputs.msg || 'codex(docs): render menu diagrams' }}
          body: "Автогенерация диаграмм Mermaid. Открыто через repository_dispatch."
          branch: "codex-render-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            docs/menu_map.svg

      - name: PR (build_catalog)
        if: steps.p.outputs.cmd == 'build_catalog'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(build): rebuild catalog"
          title: ${{ steps.p.outputs.msg != '' && steps.p.outputs.msg || 'codex(build): rebuild catalog' }}
          body: "Сборка каталога выполнена через repository_dispatch."
          branch: "codex-catalog-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            app/catalog/**
            build/**

      - name: PR (open_patch_pr)
        if: steps.p.outputs.cmd == 'open_patch_pr'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: ${{ steps.p.outputs.msg != '' && steps.p.outputs.msg || 'codex(patch): apply patch' }}
          title: ${{ steps.p.outputs.msg != '' && steps.p.outputs.msg || 'codex(patch): apply patch' }}
          body: "Патч применён через repository_dispatch."
          branch: "codex-patch-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"

      - name: PR (lint_autofix)
        if: steps.p.outputs.cmd == 'lint_autofix'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(lint): autofix formatting"
          title: "codex(lint): autofix formatting"
          body: "Auto-format via black/isort from repository_dispatch."
          branch: "codex-lint-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            **/*.py
            pyproject.toml
            scripts/lint_autofix.sh
