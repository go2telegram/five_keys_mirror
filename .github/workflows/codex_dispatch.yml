name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:


jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: read
    concurrency:
      group: codex_dispatch-${{ github.ref || github.run_id }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      - name: Bootstrap env
        run: .github/scripts/bootstrap-env.sh
        env:
          BOT_TOKEN:            ${{ secrets.BOT_TOKEN }}
          CODEX_SHARED_KEY:     ${{ secrets.CODEX_SHARED_KEY }}
          TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:     ${{ secrets.TELEGRAM_CHAT_ID }}
          SLACK_WEBHOOK_URL:    ${{ secrets.SLACK_WEBHOOK_URL }}
          DB_URL:               ${{ secrets.DB_URL }}
          REDIS_URL:            ${{ secrets.REDIS_URL }}
          HEALTH_PORT:          ${{ vars.HEALTH_PORT }}
          DEV_DRY_RUN:          ${{ vars.DEV_DRY_RUN }}
          USE_REDIS:            ${{ vars.USE_REDIS }}
          IMAGES_BASE:          ${{ vars.IMAGES_BASE }}
          QUIZ_IMG_BASE:        ${{ vars.QUIZ_IMG_BASE }}
          TIMEZONE:             ${{ vars.TIMEZONE }}
          LOG_LEVEL:            ${{ vars.LOG_LEVEL }}
          LOG_DIR:              ${{ vars.LOG_DIR }}

      # ------------- Gate + Debug -------------
      - name: Gate (key & sender)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          echo "event=${{ github.event_name }}"
          echo "actor=${GITHUB_ACTOR}"
          ALLOWED=false
          REASON=""
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.client_payload.key }}" == "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
              if [[ "${GITHUB_ACTOR}" == "go2telegram" || "${GITHUB_ACTOR}" == "github-actions[bot]" ]]; then
                ALLOWED=true
              else
                REASON="not trusted sender: ${GITHUB_ACTOR}"
              fi
            else
              REASON="wrong or empty key"
            fi
          else
            REASON="not repository_dispatch (event=${{ github.event_name }})"
          fi
          echo "allowed=${ALLOWED}" | tee -a debug.log
          echo "reason=${REASON}"   | tee -a debug.log
          echo "allowed=${ALLOWED}" >> $GITHUB_OUTPUT
          echo "reason=${REASON}"   >> $GITHUB_OUTPUT

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        shell: bash
        run: |
          set -euo pipefail
          echo "cmd=${{ github.event.client_payload.cmd }}"   | tee -a debug.log
          echo "msg=${{ github.event.client_payload.msg }}"   | tee -a debug.log
          echo "patch_b64=${{ github.event.client_payload.patch_b64 != '' }}" | tee -a debug.log
          echo "cmd=${{ github.event.client_payload.cmd }}"   >> $GITHUB_OUTPUT
          echo "msg=${{ github.event.client_payload.msg }}"   >> $GITHUB_OUTPUT
          echo "patch_b64=${{ github.event.client_payload.patch_b64 }}" >> $GITHUB_OUTPUT

      - name: Debug payload (always)
        if: always()
        run: |
          echo "gate.allowed=${{ steps.gate.outputs.allowed }}" | tee -a debug.log
          echo "gate.reason=${{ steps.gate.outputs.reason }}"   | tee -a debug.log
          echo "payload.cmd=${{ steps.p.outputs.cmd }}"         | tee -a debug.log
          echo "payload.msg=${{ steps.p.outputs.msg }}"         | tee -a debug.log

      # -------- render_menu --------
      - name: Setup Mermaid
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji
          npm i -g @mermaid-js/mermaid-cli@10.9.1
          echo '{ "args": ["--no-sandbox","--disable-setuid-sandbox"] }' > puppeteer.json

      - name: Render *.mmd -> *.svg (retry)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        shell: bash
        run: |
          set -eo pipefail
          mkdir -p artifacts/menu
          fail=0
          for f in $(git ls-files '*.mmd'); do
            out="artifacts/menu/$(basename "${f%.mmd}").svg"
            echo "[render] $f -> $out" | tee -a debug.log
            if ! mmdc -i "$f" -o "$out" --puppeteerConfigFile puppeteer.json; then
              fail=1
            fi
          done
          if [[ $fail -ne 0 ]]; then
            echo "[fix] run mmd_fix.mjs" | tee -a debug.log
            node scripts/mmd_fix.mjs docs/menu_map.mmd || true
            mmdc -i docs/menu_map.mmd -o artifacts/menu/menu_map.svg --puppeteerConfigFile puppeteer.json || true
          fi

      - name: PR (render_menu)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(render): ${{ steps.p.outputs.msg }}"
          title: "codex(render): ${{ steps.p.outputs.msg }}"
          body: "Mermaid render (+auto-fix)."
          branch: "codex-render-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            docs/**/*.mmd
            artifacts/menu/**

      # -------- build_catalog --------
      - name: Build catalog
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'build_catalog'
        shell: bash
        run: |
          set -eo pipefail
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          python tools/build_products.py --descriptions-url "https://raw.githubusercontent.com/go2telegram/media/main/media/descriptions/%D0%9F%D0%BE%D0%BB%D0%BD%D0%BE%D0%B5%20%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%82%D0%BE%D0%B2%20vilavi%20(%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%BE%20v3).txt"
          python - <<'PY'
          import json,jsonschema
          s=json.load(open('app/data/products.schema.json',encoding='utf-8'))
          d=json.load(open('app/catalog/products.json',encoding='utf-8'))
          jsonschema.validate(d,s); print("schema OK; items:", len(d))
          PY

      - name: PR (catalog)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'build_catalog'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(catalog): ${{ steps.p.outputs.msg }}"
          title: "codex(catalog): ${{ steps.p.outputs.msg }}"
          body: "Nightly/dispatch catalog build."
          branch: "codex-catalog-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            app/catalog/products.json

      # -------- open_patch_pr --------
      - name: Apply patch
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'open_patch_pr' && steps.p.outputs.patch_b64 != ''
        run: |
          echo "${{ steps.p.outputs.patch_b64 }}" | base64 -d > codex.patch
          git apply --index codex.patch

      - name: PR (patch)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'open_patch_pr'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(patch): ${{ steps.p.outputs.msg }}"
          title: "codex(patch): ${{ steps.p.outputs.msg }}"
          body: "Patch via repository_dispatch."
          branch: "codex-patch-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"

      # -------- lint_autofix --------
      - name: Lint autofix
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'lint_autofix'
        run: bash scripts/lint_autofix.sh

      - name: PR (lint)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'lint_autofix'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(lint): autofix formatting"
          title: "codex(lint): autofix formatting"
          branch: "codex-lint-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            **/*.py
            pyproject.toml
            scripts/lint_autofix.sh

      # =============== auto_label (native) ===============
      - name: Resolve PR number (by msg 'pr:<num>' or commit SHA)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'auto_label'
        id: prnum
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            
            // 1) попробовать номер из msg формата "pr:123"
            const raw = `${{ toJSON(steps.p.outputs.msg || "") }}`.replace(/^"|"$/g,"");
            let m = /^pr:(\d+)$/.exec(raw);
            if (m) {
              core.setOutput('number', m[1]);
              return;
            }

            // 2) найти связанный PR по текущему SHA
            const { data } = await github.rest.repos.listPullRequestsAssociatedWithCommit({
              owner, repo, commit_sha: context.sha,
            });
            if (Array.isArray(data) && data.length) {
              core.setOutput('number', String(data[0].number));
            } else {
              core.info('PR not found for this SHA and msg');
              core.setOutput('number', '');
            }

      - name: Add 'automerge' label (native)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'auto_label' && steps.prnum.outputs.number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo  = context.repo.repo;
            const number = Number("${{ steps.prnum.outputs.number }}");
            await github.rest.issues.addLabels({
              owner, repo, issue_number: number, labels: ['automerge']
            });
            core.info(`Label 'automerge' added to PR #${number}`);

      # -------- doctor --------
      - name: Doctor report
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'doctor'
        id: doctor
        uses: actions/github-script@v7
        with:
          script: |
            const fs=require('fs'), path=require('path');
            const dir=path.join(process.cwd(),'build','reports');
            fs.mkdirSync(dir,{recursive:true});
            fs.writeFileSync(path.join(dir,'dev_check.md'),
              `Doctor OK ${new Date().toISOString()}\ncmd=${process.env.GITHUB_EVENT_NAME}`);

      - name: PR (doctor)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'doctor'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(doctor): ${{ steps.p.outputs.msg }}"
          title: "codex(doctor): ${{ steps.p.outputs.msg }}"
          branch: "codex-doctor-${{ github.run_id }}"
          base: "main"
          labels: "codex,needs-human"
          add-paths: |
            build/reports/*

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: |
            debug.log
            puppeteer.json
            artifacts/menu/*
            build/reports/*
          if-no-files-found: warn
