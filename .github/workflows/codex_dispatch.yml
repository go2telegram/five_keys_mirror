name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]   # ‚Üê –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û!
  workflow_dispatch:         # ‚Üê –ø–æ –∫–Ω–æ–ø–∫–µ –∏–∑ Actions (—Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫)


jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with: { fetch-depth: 0 }

      # –µ–¥–∏–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç Vars/Secrets –≤ $GITHUB_ENV
      - name: Bootstrap env
        run: .github/scripts/bootstrap-env.sh
        env:
          # secrets
          BOT_TOKEN:            ${{ secrets.BOT_TOKEN }}
          CODEX_SHARED_KEY:     ${{ secrets.CODEX_SHARED_KEY }}
          TELEGRAM_BOT_TOKEN:   ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID:     ${{ secrets.TELEGRAM_CHAT_ID }}
          SLACK_WEBHOOK_URL:    ${{ secrets.SLACK_WEBHOOK_URL }}
          DB_URL:               ${{ secrets.DB_URL }}
          REDIS_URL:            ${{ secrets.REDIS_URL }}
          # vars (–¥–æ–±–∞–≤–ª—è–π –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)
          HEALTH_PORT:          ${{ vars.HEALTH_PORT }}
          DEV_DRY_RUN:          ${{ vars.DEV_DRY_RUN }}
          USE_REDIS:            ${{ vars.USE_REDIS }}
          IMAGES_BASE:          ${{ vars.IMAGES_BASE }}
          QUIZ_IMG_BASE:        ${{ vars.QUIZ_IMG_BASE }}
          TIMEZONE:             ${{ vars.TIMEZONE }}
          LOG_LEVEL:            ${{ vars.LOG_LEVEL }}
          LOG_DIR:              ${{ vars.LOG_DIR }}

      # üîê –¥–æ–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ repository_dispatch + –≤–µ—Ä–Ω—ã–π –∫–ª—é—á + –¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π sender
      - name: Gate (key & sender)
        id: gate
        run: |
          echo "event=${{ github.event_name }}"
          echo "actor=${GITHUB_ACTOR}"
          ALLOWED="false"
          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            if [ "${{ github.event.client_payload.key }}" = "${{ secrets.CODEX_SHARED_KEY }}" ]; then
              if [ "${GITHUB_ACTOR}" = "go2telegram" ] || [ "${GITHUB_ACTOR}" = "github-actions[bot]" ]; then
                ALLOWED="true"
              else
                echo "not trusted sender: ${GITHUB_ACTOR}"
              fi
            else
              echo "wrong or empty key"
            fi
          else
            echo "not repository_dispatch (event=${{ github.event_name }})"
          fi
          echo "allowed=$ALLOWED" >> $GITHUB_OUTPUT

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        run: |
          echo "cmd=${{ github.event.client_payload.cmd }}" >> $GITHUB_OUTPUT
          echo "msg=${{ github.event.client_payload.msg }}" >> $GITHUB_OUTPUT
          echo "patch_b64=${{ github.event.client_payload.patch_b64 }}" >> $GITHUB_OUTPUT

      - name: Debug payload
        if: always()
        run: |
          echo "allowed=${{ steps.gate.outputs.allowed }}"
          echo "cmd=${{ steps.p.outputs.cmd }}"
          echo "msg=${{ steps.p.outputs.msg }}"

      # =============== render_menu ===============
      - name: Setup for Mermaid (Node + fonts + no-sandbox)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji
          npm i -g @mermaid-js/mermaid-cli@10.9.1
          echo '{ "args": ["--no-sandbox","--disable-setuid-sandbox"] }' > puppeteer.json

      - name: Render *.mmd -> *.svg (with retry & fixer)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          set -eo pipefail
          mkdir -p artifacts/menu
          fail=0
          for f in $(git ls-files '*.mmd'); do
            out="artifacts/menu/$(basename "${f%.mmd}").svg"
            echo "[render] $f -> $out"
            if ! mmdc -i "$f" -o "$out" --puppeteerConfigFile puppeteer.json; then
              fail=1
            fi
          done
          if [ $fail -ne 0 ]; then
            # –º—è–≥–∫–∏–π –∞–≤—Ç–æ—Ñ–∏–∫—Å–µ—Ä —Å—Ö–µ–º
            node scripts/mmd_fix.mjs docs/menu_map.mmd || true
            mmdc -i docs/menu_map.mmd -o artifacts/menu/menu_map.svg --puppeteerConfigFile puppeteer.json || true
          fi

      - name: PR (render_menu)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(render): ${{ steps.p.outputs.msg }}"
          title: "codex(render): ${{ steps.p.outputs.msg }}"
          body: "Mermaid render (+auto-fix if needed)."
          branch: "codex-render-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            docs/**/*.mmd
            artifacts/menu/**

      # =============== build_catalog ===============
      - name: Build & validate catalog
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'build_catalog'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt || true
          python tools/build_products.py --descriptions-url "https://raw.githubusercontent.com/go2telegram/media/main/media/descriptions/%D0%9F%D0%BE%D0%BB%D0%BD%D0%BE%D0%B5%20%D0%BE%D0%BF%D0%B8%D1%81%D0%B0%D0%BD%D0%B8%D0%B5%20%D0%BF%D1%80%D0%BE%D0%B4%D1%83%D0%BA%D1%82%D0%BE%D0%B2%20vilavi%20(%D0%BE%D1%84%D0%BE%D1%80%D0%BC%D0%BB%D0%B5%D0%BD%D0%BE%20v3).txt"
          python - <<'PY'
          import json,jsonschema
          s=json.load(open('app/data/products.schema.json',encoding='utf-8'))
          d=json.load(open('app/catalog/products.json',encoding='utf-8'))
          jsonschema.validate(d,s); print("schema OK; items:", len(d))
          PY

      - name: PR (build_catalog)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'build_catalog'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(catalog): ${{ steps.p.outputs.msg }}"
          title: "codex(catalog): ${{ steps.p.outputs.msg }}"
          body: "Nightly/dispatch catalog build & validation."
          branch: "codex-catalog-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            app/catalog/products.json

      # =============== open_patch_pr ===============
      - name: Apply patch (unified diff, base64)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'open_patch_pr' && steps.p.outputs.patch_b64 != ''
        run: |
          echo "${{ steps.p.outputs.patch_b64 }}" | base64 -d > codex.patch
          git apply --index codex.patch

      - name: PR (patch)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'open_patch_pr'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(patch): ${{ steps.p.outputs.msg }}"
          title: "codex(patch): ${{ steps.p.outputs.msg }}"
          body: "Patch applied via repository_dispatch."
          branch: "codex-patch-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"

      # =============== lint_autofix ===============
      - name: Lint autofix (isort+black) & strict check
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'lint_autofix'
        run: |
          bash scripts/lint_autofix.sh

      - name: PR (lint_autofix)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'lint_autofix'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(lint): autofix formatting"
          title: "codex(lint): autofix formatting"
          body: "Auto-format via black/isort."
          branch: "codex-lint-${{ github.run_id }}"
          base: "main"
          labels: "codex,automerge"
          add-paths: |
            **/*.py
            pyproject.toml
            scripts/lint_autofix.sh

      # =============== auto_label ===============
      - name: Resolve PR number (from msg 'pr:<num>' or head SHA)
        id: prnum
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'auto_label'
        uses: peter-evans/find-pull-request@v3
        with:
          commit: ${{ github.sha }}

      - name: Apply automerge label
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'auto_label'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: automerge
          number: ${{ steps.prnum.outputs.number }}

      # =============== doctor ===============
      - name: Doctor report (gather)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'doctor'
        id: doctor
        uses: actions/github-script@v7
        with:
          script: |
            // –∫—Ä–∞—Ç–∫–∞—è –≤–µ—Ä—Å–∏—è: —Å–æ–±—Ä–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç (ENV/labels/workflows)
            // (–ø–æ–ª–Ω–∞—è ENV-–≤–∞–ª–∏–¥–∞—Ü–∏—è —É —Ç–µ–±—è —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
            const fs = require('fs'), path = require('path');
            const dir = path.join(process.cwd(),'build','reports');
            fs.mkdirSync(dir,{recursive:true});
            fs.writeFileSync(path.join(dir,'dev_check.md'), `Doctor OK: ${new Date().toISOString()}`);

      - name: PR (doctor report if problems)  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å create-PR –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'doctor'
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "codex(doctor): ${{ steps.p.outputs.msg }}"
          title: "codex(doctor): ${{ steps.p.outputs.msg }}"
          body: "Doctor health report."
          branch: "codex-doctor-${{ github.run_id }}"
          base: "main"
          labels: "codex,needs-human"
          add-paths: |
            build/reports/*


