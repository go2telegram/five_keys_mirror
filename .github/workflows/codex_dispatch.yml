name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: codex-pages-${{ github.ref || github.run_id }}
  cancel-in-progress: false

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Gate: для repository_dispatch сверяем ключ; для workflow_dispatch — пускаем всегда
      - name: Gate
        id: gate
        shell: bash
        run: |
          allowed=true
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            if [[ "${{ github.event.client_payload.key }}" != "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
              echo "wrong or empty key" | tee -a debug.log
              allowed=false
            fi
          fi
          echo "allowed=$allowed" >> "$GITHUB_OUTPUT"

      # Всегда собираем минимальный сайт (index.html); так Pages никогда не пустые
      - name: Build site (always index.html)
        if: steps.gate.outputs.allowed == 'true' || github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          # подхватим SVG, если уже есть
          shopt -s nullglob
          SVG_LIST=()
          for s in docs/*.svg docs/**/*.svg artifacts/menu/*.svg; do
            [[ -f "$s" ]] && cp -f "$s" artifacts/menu/ && SVG_LIST+=("$(basename "$s")")
          done
          # если SVG нет — положим placeholder
          if [[ ${#SVG_LIST[@]} -eq 0 ]]; then
            cat > artifacts/menu/sample.svg <<'SVG'
            <svg xmlns="http://www.w3.org/2000/svg" width="640" height="200">
              <rect width="100%" height="100%" fill="#f8fafc"/>
              <text x="20" y="60" font-size="24" fill="#334155">No diagrams yet</text>
              <text x="20" y="100" font-size="14" fill="#64748b">Add docs/*.mmd or *.svg to show here.</text>
            </svg>
            SVG
            SVG_LIST=("sample.svg")
          fi

          # index.html
          cat > artifacts/menu/index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <title>five_keys_mirror · Diagrams</title>
          <style>
            body{font:16px/1.5 system-ui,Segoe UI,Roboto,Arial,sans-serif;padding:24px;max-width:980px;margin:auto}
            h1{margin:0 0 6px}
            .sub{color:#667;margin:0 0 20px}
            .grid{display:grid;grid-template-columns:repeat(auto-fill,minmax(280px,1fr));gap:16px}
            .card{border:1px solid #e5e7eb;border-radius:12px;padding:12px;background:#fff}
            .card img{max-width:100%;height:auto;display:block;border:1px solid #e5e7eb;border-radius:8px;background:#fff}
            footer{margin-top:24px;color:#667}
            a{color:#06c;text-decoration:none}
          </style>
          <h1>Mermaid/diagram gallery</h1>
          <p class="sub">Auto-published via GitHub Pages. Folder: <code>artifacts/menu/</code></p>
          <div class="grid">
          HTML

          for b in artifacts/menu/*.svg; do
            n=$(basename "$b")
            printf '<div class="card"><h3>%s</h3><img src="%s" alt="%s"></div>\n' "$n" "$n" "$n" >> artifacts/menu/index.html
          done

          cat >> artifacts/menu/index.html <<'HTML'
          </div>
          <footer>
            Repo: <a href="https://github.com/go2telegram/five_keys_mirror">go2telegram/five_keys_mirror</a>
          </footer>
          HTML

      # Pages deploy
      - uses: actions/configure-pages@v5
      - uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu
      - id: deploy
        uses: actions/deploy-pages@v4
      - name: Print URL
        run: echo "Pages URL: ${{ steps.deploy.outputs.page_url }}"
