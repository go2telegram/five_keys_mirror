name: codex_dispatch

on:
  repository_dispatch:
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  pages: write
  id-token: write

concurrency:
  group: codex_dispatch-${{ github.ref || github.run_id }}
  cancel-in-progress: false

jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # --- Gate: только по ключу из секрета
      - name: Gate (key only)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          : > debug.log
          echo "event=${{ github.event_name }}" | tee -a debug.log
          echo "actor=${GITHUB_ACTOR}" | tee -a debug.log
          ALLOWED=false; REASON=""
          if [[ "${{ github.event.client_payload.key }}" == "${{ secrets.CODEX_SHARED_KEY }}" ]]; then
            ALLOWED=true
          else
            REASON="wrong or empty key"
          fi
          echo "allowed=$ALLOWED" | tee -a debug.log
          echo "reason=$REASON"   | tee -a debug.log
          echo "allowed=$ALLOWED" >> $GITHUB_OUTPUT
          echo "reason=$REASON"   >> $GITHUB_OUTPUT

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        run: |
          echo "cmd=${{ github.event.client_payload.cmd }}" >> $GITHUB_OUTPUT
          echo "msg=${{ github.event.client_payload.msg }}" >> $GITHUB_OUTPUT
          echo "fix=${{ github.event.client_payload.fix }}" >> $GITHUB_OUTPUT
          echo "cmd=${{ github.event.client_payload.cmd }}" | tee -a debug.log
          echo "msg=${{ github.event.client_payload.msg }}" | tee -a debug.log

      # ---------- RENDER (Mermaid -> SVG) ----------
      - name: Setup Node
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install mermaid-cli
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: npm i -g @mermaid-js/mermaid-cli@10.9.1

      - name: Install fonts (cyrillic + emoji)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk fonts-noto-color-emoji

      - name: Puppeteer no-sandbox
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: |
          cat > puppeteer.json <<'JSON'
          { "args": ["--no-sandbox","--disable-setuid-sandbox"] }
          JSON

      - name: Render *.mmd -> *.svg
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        id: render
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          fail=0
          mapfile -t files < <(git ls-files '*.mmd' || true)
          if (( ${#files[@]} == 0 )); then
            echo "No .mmd files found"; exit 0
          fi
          for f in "${files[@]}"; do
            out="artifacts/menu/$(basename "${f%.mmd}").svg"
            echo "[render] $f -> $out"
            if ! mmdc -i "$f" -o "$out" --puppeteerConfigFile puppeteer.json; then
              echo "::warning title=Mermaid render failed::$f"; fail=1
            fi
          done
          echo "failed=$fail" >> $GITHUB_OUTPUT

      # === НОВОЕ: собираем index.html, чтобы на Pages не было 404 ===
      - name: Build index.html for Pages
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          if ! ls artifacts/menu/*.svg >/dev/null 2>&1; then
            echo '<!doctype html><meta charset="utf-8"><title>No SVG</title><h1>No SVGs were produced</h1>' \
              > artifacts/menu/index.html
          else
            {
              echo '<!doctype html><meta charset="utf-8">'
              echo '<title>Rendered SVGs</title>'
              echo "<h1>Rendered SVGs — $GITHUB_REPOSITORY</h1><ul>"
              for f in artifacts/menu/*.svg; do
                b=$(basename "$f")
                echo "<li><a href=\"$b\">$b</a></li>"
              done
              echo '</ul>'
              first=$(basename "$(ls artifacts/menu/*.svg | head -n1)")
              echo "<hr><object data=\"$first\" type=\"image/svg+xml\" style=\"width:100%;height:80vh\"></object>"
            } > artifacts/menu/index.html
          fi

      - name: Upload rendered SVGs (artifact)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/upload-artifact@v4
        with:
          name: menu_svgs-${{ github.run_id }}
          path: artifacts/menu
          if-no-files-found: warn

      # ---------- Publish to GitHub Pages ----------
      - name: Setup Pages
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu
          name: github-pages
          retention-days: 1

      - name: Deploy to Pages
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Print Pages URL
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'render_menu'
        run: echo "Pages URL: ${{ steps.deploy.outputs.page_url }}"

      # ---------- DOCTOR (минимальный отчёт) ----------
      - name: Doctor report (minimal)
        if: steps.gate.outputs.allowed == 'true' && steps.p.outputs.cmd == 'doctor'
        run: |
          echo "repo=$(git remote get-url origin)"           | tee -a debug.log
          echo "branch=$(git rev-parse --abbrev-ref HEAD)"   | tee -a debug.log
          echo "files_mmd=$(git ls-files '*.mmd' | wc -l)"   | tee -a debug.log
          echo "files_py=$(git ls-files '*.py' | wc -l)"     | tee -a debug.log

      # ---------- Всегда: отчёт и debug ----------
      - name: Gate report (always)
        if: always()
        run: |
          echo "gate.allowed=${{ steps.gate.outputs.allowed }}"
          echo "gate.reason=${{ steps.gate.outputs.reason }}"

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: debug.log
          if-no-files-found: warn
