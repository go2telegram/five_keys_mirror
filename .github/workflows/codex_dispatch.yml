name: codex_dispatch

on:
  repository/workflow_run:
    workflows:
      - codex_dispatch # оставлено для обратной совместимости
    types: [completed]
  repository_dispatch:
    # запуск через codexctl / gh api
    types: [codex_command]
  workflow_dispatch:

permissions:
  contents: write
  pull-request: write
  pages: write
  id-token: write

concurrency:
  group: codex-${{ github.ref || 'default' }}
  cancel-in-progress: false

jobs:
  run-codex-command:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Gate (key only)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          : > debug.log
          echo "event=${{ github.event_name }}" | tee -a debug.log
          echo "actor=${GITHUB_ACTOR}" | tee -a debug.log
          if [[ "${{ github.event.client_payload.key }}" == "${{ secrets.CODEX_SHARED }} " || "${{ secrets.CODEX_SHARED_KEY }}" != "" ]]; then
            echo "allowed=true"  | tee -a debug.log
            echo "allowed=true"  >> $GITHUB_OUTPUT
            echo "reason="       >> $GITHUB_OUTPUT
          else
            echo "allowed=false" | tee -a debug.log
            echo "reason=no or wrong CODEX_SHARED_KEY" >> $GITHUB_OUTPUT
          fi

      - name: Read payload
        if: steps.gate.outputs.allowed == 'true'
        id: p
        run: |
          echo "cmd=${{ github.event.client_payload.cmd }}"  | tee -a debug.log
          echo "msg=${{ github.event.client_payload.msg }}"  | tee -a debug.log
          echo "fix=${{ github.event.client_payload.fix }}"  | tee -a debug.log
          echo "cmd=${{ github.event.client_payload.cmd }}"  >> $GITHUB_OUTPUT
          echo "msg=${{ github.event.client_payload.msg }}"  >> $GITHUB_OUTPUT
          echo "fix=${{ github.event.client_payload.fix }}"  >> $GITHUB_OUTPUT

      # ---------- RENDER -> artifacts/menu ----------
      - name: Setup Node
        if: steps.p.outputs.cmd == 'render_menu'
        uses: actions/setup-node@v5
        with: { node-version: '20' }

      - name: Install mermaid-cli & fonts
        if: steps.p.outputs.cmd == 'render_menu'
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-noto fonts-noto-cjk
          npm i -g @mermaid-js/mermaid-cli@10.9.1
          echo '{"args":["--no-stats=true","--no-sandbox","--no-zygote"]}' > puppeteer.json

      - name: Render docs/*.mmd -> artifacts/menu/*.svg
        if: steps.p.outputs.cmd == 'render_menu'
        id: render
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/menu
          mapfile -t files < <(git ls-files 'docs/**/*.mmd' 'docs/*.mmd' || true)
          if (( ${#files[@]} == 0 )); then
            echo 'Нет .mmd – положим заглушку'
            echo '<!doctype html><meta charset="utf-8"><title>No diagrams</title><h1>No diagrams</h1>' > artifacts/menu/index.html
            exit 0
          fi
          for f in "${files[@]}"; do
            base="$(basename "${f%.*}")"
            echo "::group::Render $f"
            mmdc -i "$f" -o "artifacts/menu/${base}.svg" --puppeteerConfigFile puppeteer.json || {
              echo "::warning file=$f::render failed"
            }
            echo "::endgroup::"
          done
          # Всегда делаем index.html
          {
            echo '<!doctype html><meta charset="utf-8"><title>Rendered SVGs</title>'
            echo '<h1>Rendered SVGs</h1><ul>'
            for f in artifacts/menu/*.svg; do
              b=$(basename "$f")
              echo "<li><a href='$b'>$b</a></li>"
            done
            echo '</ul>'
            first=$(ls artifacts/menu/*.svg 2>/dev/null | head -n1)
            if [[ -n "$first" ]]; then
              fb=$(basename "$first")
              echo "<hr><object data='$fb' type='image/svg+xml' style='width:100%;height:80vh'></object>"
            fi
          } > artifacts/menu/index.html

      - name: Upload site as artifact
        if: steps.p.outputs.cmd == 'render_menu'
        uses: actions/upload-artifact@v4
        with:
          name: site-${{ github.run_id }}
          path: artifacts/menu
          if-no-files-found: warn

      # ---------- Publish to GitHub Pages ----------
      - name: Setup Pages
        if: steps.p.outputs.cmd == 'render_menu'
        uses: actions/configure-pages@v5

      - name: Upload to Pages
        if: steps.p.outputs.cmd == 'render_menu'
        id: upload
        uses: actions/upload-pages-artifact@v3
        with:
          path: artifacts/menu

      - name: Deploy to Pages
        if: steps.p.outputs.cmd == 'render_menu'
        id: deploy
        uses: actions/deploy-pages@v4

      - name: Print & check Page URL
        if: steps.p.outputs.cmd == 'render_menu'
        shell: bash
        run: |
          set -e
          echo "Pages URL: ${{ steps.deploy.outputs.page_url }}"
          code=$(curl -s -o /dev/null -w "%{http_code}" "${{ steps.deploy.outputs.page_url }}")
          echo "HTTP status: $code"
          if [[ "$code" != "200" ]]; then
            echo "Page not reachable or no index.html (status=$code)"; exit 1; fi

      # ---------- Doctor (минимум) ----------
      - name: Doctor report
        if: steps.p.outputs.cmd == 'doctor'
        run: |
          echo "repo=$(git remote get-url origin)"         | tee -a debug.log
          echo "branch=$(git rev-parse --abbrev-ref HEAD)" | tee -a debug.log
          echo "mmd_files=$(git ls-files '*.mmd' | wc -l)" | tee -a debug.log

      - name: Upload debug bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: codex_dispatch-debug-${{ github.run_id }}
          path: debug.log
          if-no-files-found: warn
